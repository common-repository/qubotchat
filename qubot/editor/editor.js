/*
* QuData Chat Builder Plugin.
*
* @copyright Copyright (C) 2023, qudata.com
*/
window.editorConfig = JSON.parse(`{
    "version":    "1.1.10",
    "botManager": "https://dev.services.qudata.com/bot/manager/api/",
    "analytics":  "https://dev.services.qudata.com/bot/analytics/api/v1/"
  }`);

class QuBotEditorBase {
    constructor(editor) {
        this.LANGUAGE = localStorage.getItem("language") || "en", this.editor = editor, 
        this.currentDragObj = void 0;
    }
    add(parent, className, element = "div") {
        element = document.createElement(element);
        return className && className.length && (element.className = className), 
        parent && parent.append(element), element;
    }
    addBtnAdd(obj, onclick, centerX = !1, centerY = !1, dX = 0, dY = 0) {
        var btn = this.add(obj, "qubot-btn");
        return btn.onclick = onclick, centerX ? btn.style.left = (obj.clientWidth - btn.clientWidth) / 2 - 1 + dX + "px" : btn.style.right = -6 + dX + "px", 
        btn.style.bottom = centerY ? (obj.clientHeight - btn.clientHeight) / 2 - 1 + dY + "px" : -6 + dY + "px", 
        this.add(btn, "qubot-icon-add"), btn;
    }
    addIcDrag(obj, onclick, dX = 0, dY) {
        obj = this.add(obj, "qubot-btn");
        return obj.addEventListener("mousedown", e => {
            e.target.closest(".qubot-btn").parentNode.setAttribute("draggable", "true"), 
            e.target.closest(".qubot-btn").parentNode.addEventListener("dragstart", e => {
                var coordData = e.target.closest(".qubot-button").id.substring(13).split("_");
                this.currentDragObj = {
                    element: e.target.closest(".qubot-button"),
                    data: this.items.items[+coordData[0]].items[+coordData[1]]
                }, setTimeout(() => {
                    this.editor.stateEditor.items.leaveItemFromRow(this.currentDragObj.element), 
                    this.editor.resetEditorAndCard(), this.editor.save();
                });
            });
        }), obj.addEventListener("mouseout", e => {
            e.target.closest(".qubot-btn").removeAttribute("draggable");
        }), obj.style.border = "none", obj.style.width = "0", obj.style.height = "0", 
        this.add(obj, "qubot-icon-drag-btn"), obj;
    }
    addImageDrag(obj, onclick, dX = 0, dY) {
        obj = this.add(obj, "qubot-btn");
        return obj.style.border = "none", obj.style.width = "0", obj.style.height = "0", 
        this.add(obj, "qubot-icon-drag-btn"), obj;
    }
    addBtnDel(obj, onclick, dX = 0, dY = 0) {
        obj = this.add(obj, "qubot-btn del");
        return obj.onclick = onclick, obj.style.right = -6 + dX + "px", obj.style.top = -6 + dY + "px", 
        this.add(obj, "qubot-icon-del"), obj;
    }
    addBtnUpload(obj, onclick, dX = 0, dY = 0) {
        obj = this.add(obj, "qubot-btn");
        return obj.onclick = onclick, obj.style.width = "25px", obj.style.height = "25px", 
        obj.style.top = dY + "px", obj.style.right = dX + 20 + "px", obj.style.border = "none", 
        obj.style.background = "none", this.add(obj, "qubot-icon-upload_"), obj;
    }
    addBtnUp(obj, onclick, dX = 0, dY = 0) {
        obj = this.add(obj, "qubot-btn");
        return obj.onclick = onclick, obj.style.top = -6 + dY + "px", obj.style.left = -6 + dX + "px", 
        this.add(obj, "qubot-icon-up"), obj;
    }
    addBtnDn(obj, onclick, dX = 0, dY = 0) {
        obj = this.add(obj, "qubot-btn");
        return obj.onclick = onclick, obj.style.bottom = -6 + dY + "px", obj.style.left = -6 + dX + "px", 
        this.add(obj, "qubot-icon-dn"), obj;
    }
    addBtnLf(obj, onclick) {
        obj = this.add(obj, "qubot-btn");
        return obj.onclick = onclick, obj.style.top = "-6px", obj.style.left = "20px", 
        this.add(obj, "qubot-icon-lf"), obj;
    }
    addBtnRt(obj, onclick) {
        obj = this.add(obj, "qubot-btn");
        return obj.onclick = onclick, obj.style.top = "-6px", obj.style.right = "20px", 
        this.add(obj, "qubot-icon-rt"), obj;
    }
    addDragMenu(obj, forItems = !0, disabled = [], intent = !1) {
        let menu = null, createMenu = !1;
        if ((this.forItems = forItems) ? (menu = document.querySelector(".qubot-drag-menu.qubot-drag-menu-item")) || (menu = this.add(document.querySelector("body"), "qubot-drag-menu qubot-drag-menu-item"), 
        createMenu = !0) : intent ? (menu = document.querySelector(".qubot-drag-menu.qubot-drag-menu-intent")) || (menu = this.add(document.querySelector("body"), "qubot-drag-menu qubot-drag-menu-intent"), 
        createMenu = !0) : (menu = document.querySelector(".qubot-drag-menu.qubot-drag-menu-action")) || (menu = this.add(document.querySelector("body"), "qubot-drag-menu qubot-drag-menu-action"), 
        createMenu = !0), createMenu) {
            var drag = this.add(menu, "qubot-icon-drag qubot-icon"), add = this.add(menu, "qubot-btn-plus"), add = (this.add(add, "qubot-icon-plus"), 
            this.addAddMenu(add, disabled), this.add(menu, "qubot-icon-copy qubot-icon")), disabled = this.add(menu, "qubot-icon-paste qubot-icon"), del = this.add(menu, "qubot-icon-trash qubot-icon");
            let editor = this.editor;
            forItems ? (del.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.items.deleteItem(document.querySelector("#" + elem)), 
                editor.resetEditorAndCard(), editor.save();
            }, add.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.items.copyItem(document.querySelector("#" + elem));
            }, disabled.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.items.pasteItem(document.querySelector("#" + elem)), 
                editor.resetEditorAndCard(), editor.save();
            }) : (del.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.actions.delAction(document.querySelector("#" + elem)), 
                editor.save(), editor.listEditor.showArrows();
            }, add.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.actions.copyAction(document.querySelector("#" + elem));
            }, disabled.onclick = function() {
                var elem = this.parentNode.getAttribute("for");
                editor.stateEditor.actions.pasteAction(document.querySelector("#" + elem));
            }), drag.onmousedown = this.mousedownDragMenu.bind(this);
        }
        let selector = forItems ? ".qubot-drag-menu.qubot-drag-menu-item" : intent ? ".qubot-drag-menu.qubot-drag-menu-intent" : ".qubot-drag-menu.qubot-drag-menu-action";
        return obj.addEventListener("mouseover", function() {
            var rect = this.getBoundingClientRect(), elem = document.querySelector(selector);
            elem.setAttribute("for", this.id), rect.height < 52.5 ? elem.style.top = rect.top - (35 - rect.height) / 2 + "px" : elem.style.top = rect.top + "px", 
            elem.style.left = rect.right + "px", elem.classList.add("show");
        }, !0), obj.addEventListener("mouseout", function() {
            var rect = this.getBoundingClientRect(), elem = document.querySelector(selector);
            rect.height < 52.5 ? elem.style.top = rect.top - (35 - rect.height) / 2 + "px" : elem.style.top = rect.top + "px", 
            elem.style.left = rect.right - 30 + "px", elem.classList.remove("show");
        }, !0), menu;
    }
    getStateItem(arr) {
        return this.editor.stateEditor.items.items[+arr[0]].items[+arr[1]].items[+arr[2]];
    }
    getCountRowsID(id) {
        return this.editor.stateEditor.items.items[id].items.length;
    }
    getCountItemsRow(id, row) {
        return this.editor.stateEditor.items.items[id].items[row].items.length;
    }
    moveAtBtn(e) {
        this.fantom.style.left = e.x - parseInt(this.fantom.style.width) / 2 + "px", 
        this.fantom.style.top = e.y - parseInt(this.fantom.style.height) / 2 + "px";
    }
    dragStartBtn(e) {
        e.preventDefault(), this.dragBtn = e.target.parentNode, this.stylishFantom(), 
        this.moveAtBtn(e), document.body.appendChild(this.fantom), this.dragBtn.style.opacity = 0, 
        setTimeout(() => this.dragBtn.classList.remove("active"));
        e = this.dragBtn.id.substr(this.dragBtn.id.lastIndexOf("-") + 1).split("_");
        this.stateID = +e[0], this.rowBTN = +e[1], this.itemBTN = +e[2], this.dragBtnItem = this.getStateItem(e), 
        document.onmouseup = e => this.dragEndBtn(e), document.onmousemove = e => this.dragHandler(e);
    }
    dragHandler(e) {
        if (e.preventDefault(), this.moveAtBtn(e), 0 !== this.rowBTN || 1 !== this.getCountItemsRow(this.stateID, this.rowBTN)) {
            this.fantom.style.visibility = "hidden";
            var curentRow = document.elementFromPoint(e.x, e.y).closest(".qubot-buttons-row");
            if (this.fantom.style.visibility = "", curentRow) {
                var targetItem = curentRow.id.substr(curentRow.id.lastIndexOf("-") + 1).split("_");
                if (this.itemID = +targetItem[0], this.itemROW = +targetItem[1], 
                this.getCountRowsID(this.stateID) !== this.itemROW || 1 !== this.getCountItemsRow(this.stateID, this.rowBTN)) {
                    var targetItem = curentRow.lastChild, targetItem = targetItem.currentStyle || window.getComputedStyle(targetItem), style = curentRow.currentStyle || window.getComputedStyle(curentRow), targetItem = parseInt(targetItem.width), style = parseInt(style.width), rowMouseX = (this.accWidth = style - targetItem, 
                    50 < targetItem && (this.accWidth = style - 42), this.countPositions = curentRow.children.length - 1, 
                    this.itemROW !== this.rowBTN && this.countPositions++, this.widthPos = this.accWidth / this.countPositions, 
                    this.beginX = curentRow.getBoundingClientRect().x, this.endX = this.beginX + this.accWidth, 
                    e.clientX - this.beginX);
                    let beg = 0;
                    for (let i = 0; i < this.countPositions; i++, beg += this.widthPos) {
                        var end = beg + this.widthPos;
                        rowMouseX > beg && rowMouseX < end && (this.itemROW !== this.rowBTN && (this.editor.stateEditor.items.changeButtonRow(this.itemID, this.rowBTN, this.itemBTN, this.itemROW, i), 
                        this.rowBTN = this.itemROW, this.editor.stateEditor.items.changeButtonPosition(i, i, this.itemID, this.itemROW), 
                        this.curDragBtn = document.getElementById("qubot-editor-" + this.itemID + "_" + this.itemROW + "_" + i), 
                        this.curDragBtn.style.opacity = 0, this.itemBTN = i), i !== this.itemBTN) && (this.editor.stateEditor.items.changeButtonPosition(this.itemBTN, i, this.itemID, this.itemROW), 
                        this.curDragBtn = document.getElementById("qubot-editor-" + this.itemID + "_" + this.itemROW + "_" + i), 
                        this.curDragBtn.style.opacity = 0, this.itemBTN = i);
                    }
                    this.dragBtn = document.getElementById("qubot-editor-" + this.itemID + "_" + this.itemROW + "_" + this.itemBTN);
                }
            }
        }
    }
    dragEndBtn(e) {
        this.dragBtn.style.opacity = 1, document.onmouseup = null, document.onmousemove = null, 
        document.body.removeChild(this.fantom), this.editor.save();
    }
    stylishFantom() {
        var input = this.dragBtn.querySelector("input").value, style = this.dragBtn.currentStyle || window.getComputedStyle(this.dragBtn);
        this.fantom = document.createElement("div"), this.fantom.style.display = "flex", 
        this.fantom.style.justifyContent = "center", this.fantom.style.alignItems = "center", 
        this.fantom.style.display = "flex", this.fantom.innerHTML = input, this.fantom.style.userSelect = "none", 
        this.fantom.style.borderRadius = style.borderRadius, this.fantom.style.border = style.border, 
        this.fantom.style.background = "white", this.fantom.style.width = style.width, 
        this.fantom.style.height = style.height, this.fantom.style.position = "fixed", 
        this.fantom.style.opacity = .5, this.fantom.onmouseover = () => this.fantom.style.cursor = "grabbing", 
        this.fantom.onmouseout = () => this.fantom.style.cursor = null;
    }
    mousedownDragMenu(e) {
        this.mousePosY = e.clientY;
        var path = e.path || e.composedPath && e.composedPath();
        if (e.path[1].classList.add("is-drag"), this.dragItem = document.querySelector("#" + path[1].getAttribute("for")), 
        document.querySelectorAll("#" + path[1].getAttribute("for") + " *").forEach(item => {
            item.onchange && (item.onchange(), item.onchange = null);
        }), !(this.dragItem.parentNode.children.length < 2)) {
            e.stopPropagation(), e.preventDefault(), this.dragCurPos = parseInt(this.dragItem.id.substring(this.dragItem.id.lastIndexOf("-") + 1));
            var children = this.dragItem.parentNode.children;
            for (let i = this.dragMinPosY = 0; i < children.length; i++) {
                var child = children[i];
                if (child.id) {
                    this.dragStartPos = parseInt(child.id.substring(child.id.lastIndexOf("-") + 1));
                    break;
                }
                this.dragMinPosY = child.offsetTop + child.offsetHeight;
            }
            this.dragItem.parentNode.parentNode && this.dragItem.parentNode.parentNode.id && "qubot-actions" !== this.dragItem.parentNode.id && (this.dragMinPosY = 0), 
            this.dragPhantom = document.createElement("div"), this.dragPhantom.id = "qubot-phantom", 
            this.dragPhantom.style.width = this.dragItem.clientWidth + "px", this.dragPhantom.style.height = this.dragItem.clientHeight + "px", 
            this.dragItem.after(this.dragPhantom);
            path = this.dragItem.currentStyle || window.getComputedStyle(this.dragItem), 
            e = (this.dragItemMarginTop = parseInt(path.marginTop), this.dragItem.clientWidth), 
            path = this.dragItem.offsetTop;
            this.dragItem.style.position = "absolute", this.dragItem.style.width = e + "px", 
            this.dragItem.style.top = path - this.dragItemMarginTop + "px", this.dragItem.style.cursor = "grab";
            for (let i = 0; i < this.dragItem.children.length; i++) this.dragItem.children[i].style.cursor = "grab";
            this.dragItem.style.zIndex = 1e3, this.dragItem.style.border = "1px dashed black", 
            this.dragItem.style.backgroundColor = "white", this.dragItem.style.opacity = "0.8", 
            this.dragItem.firstChild.onmouseleave = this.mousemoveDragMenu.bind(this), 
            document.onmouseup = this.mouseupDragMenuOnID.bind(this), document.onmousemove = this.mousemoveDragMenu.bind(this);
        }
    }
    mousedownDragMenuOnID(e, itemID, isItem) {
        this.mousePosY = e.clientY;
        var itemClass = isItem ? "qubot-editor-" : "qubot-action-";
        if (this.dragItem = document.getElementById(itemClass + itemID), this.dragItem.classList.add("is-drag"), 
        document.querySelectorAll("#" + itemClass + itemID + " *").forEach(item => {
            item.onchange && (item.onchange(), item.onchange = null);
        }), !(this.dragItem.parentNode.children.length < 2)) {
            var itemClass = document.querySelector("#qubot-items .qubot-message"), children = (itemClass && (itemClass.style.minHeight = itemClass.offsetHeight + "px"), 
            e.stopPropagation(), e.preventDefault(), this.dragItem.parentNode.children);
            this.dragCurPos = parseInt(this.dragItem.id.substring(this.dragItem.id.lastIndexOf("-") + 1));
            for (let i = this.dragMinPosY = 0; i < children.length; i++) {
                var child = children[i];
                if (child.id) {
                    this.dragStartPos = parseInt(child.id.substring(child.id.lastIndexOf("-") + 1));
                    break;
                }
                this.dragMinPosY = child.offsetTop + child.offsetHeight;
            }
            this.dragItem.parentNode.parentNode && this.dragItem.parentNode.parentNode.id && "qubot-actions" !== this.dragItem.parentNode.id && (this.dragMinPosY = 0), 
            this.dragPhantom = document.createElement("div"), this.dragPhantom.id = "qubot-phantom", 
            isItem && this.dragPhantom.setAttribute("item", isItem), this.dragPhantom.style.width = this.dragItem.clientWidth + "px", 
            this.dragPhantom.style.height = this.dragItem.clientHeight + "px", this.dragPhantom.style.maxHeight = "70px", 
            this.dragItem.after(this.dragPhantom);
            itemID = this.dragItem.currentStyle || window.getComputedStyle(this.dragItem), 
            itemClass = (this.dragItemMarginTop = parseInt(itemID.marginTop), this.dragItem.clientWidth), 
            e = this.dragItem.offsetTop;
            this.dragItem.style.position = "absolute", this.dragItem.style.width = itemClass + "px", 
            this.dragItem.style.top = e - this.dragItemMarginTop + "px", this.dragItem.style.cursor = "grab";
            for (let i = 0; i < this.dragItem.children.length; i++) this.dragItem.children[i].style.cursor = "grab";
            this.dragItem.style.zIndex = 1e3, this.dragItem.style.border = "1px dashed black", 
            this.dragItem.style.backgroundColor = "white", this.dragItem.style.opacity = "0.8", 
            this.dragItem.firstChild.onmouseleave = this.mousemoveDragMenu.bind(this), 
            document.onmouseup = this.mouseupDragMenuOnID.bind(this), document.onmousemove = this.mousemoveDragMenu.bind(this);
        }
    }
    mousedownDragMenuActions(e, itemID, isItem, parentIDs) {
        this.mousePosY = e.clientY;
        if (this.dragItem = document.getElementById("qubot-action-" + itemID), this.dragItem.classList.add("is-drag"), 
        document.querySelectorAll("#qubot-action-" + itemID + " *").forEach(item => {
            item.onchange && (item.onchange(), item.onchange = null);
        }), !(this.dragItem.parentNode.children.length < 2)) {
            var itemID = document.getElementById("qubot-actions"), children = (itemID && (itemID.style.minHeight = itemID.offsetHeight + "px"), 
            e.stopPropagation(), e.preventDefault(), this.dragItem.parentNode.children);
            this.dragCurPos = parentIDs;
            for (let i = this.dragMinPosY = 0; i < children.length; i++) {
                var child = children[i];
                if (child.id) {
                    this.dragStartPos = parseInt(child.id.substring(child.id.lastIndexOf("-") + 1));
                    break;
                }
                this.dragMinPosY = child.offsetTop + child.offsetHeight;
            }
            this.dragItem.parentNode.parentNode && this.dragItem.parentNode.parentNode.id && "qubot-actions" !== this.dragItem.parentNode.id && (this.dragMinPosY = 0), 
            this.dragPhantom = document.createElement("div"), this.dragPhantom.id = "qubot-phantom", 
            isItem && this.dragPhantom.setAttribute("item", isItem), this.dragPhantom.style.width = this.dragItem.clientWidth + "px", 
            this.dragPhantom.style.height = this.dragItem.clientHeight + "px", this.dragPhantom.style.maxHeight = "70px", 
            this.dragItem.after(this.dragPhantom);
            itemID = this.dragItem.currentStyle || window.getComputedStyle(this.dragItem), 
            e = (this.dragItemMarginTop = parseInt(itemID.marginTop), this.dragItem.clientWidth), 
            parentIDs = this.dragItem.offsetTop;
            this.dragItem.style.position = "absolute", this.dragItem.style.width = e + "px", 
            this.dragItem.style.top = parentIDs - this.dragItemMarginTop + "px", 
            this.dragItem.style.cursor = "grab";
            for (let i = 0; i < this.dragItem.children.length; i++) this.dragItem.children[i].style.cursor = "grab";
            this.dragItem.style.zIndex = 1e3, this.dragItem.style.border = "1px dashed black", 
            this.dragItem.style.backgroundColor = "white", this.dragItem.style.opacity = "0.8", 
            this.dragItem.firstChild.onmouseleave = this.mousemoveDragMenu.bind(this), 
            document.onmouseup = this.mouseupDragMenuActions.bind(this), document.onmousemove = this.mousemoveDragMenu.bind(this);
        }
    }
    mousemoveDragMenu(e) {
        e.stopPropagation(), e.preventDefault(), this.dragItem.firstChild.style.display = "flex", 
        this.dragItem.firstChild.style.opacity = "1";
        var dY = this.mousePosY - e.clientY;
        this.forItems ? -2 <= this.dragItem.offsetTop - this.dragItemMarginTop - dY && this.dragItem.offsetTop - this.dragItemMarginTop - dY <= this.dragItem.parentNode.clientHeight && (this.mousePosY = e.clientY, 
        this.dragItem.style.top = this.dragItem.offsetTop - this.dragItemMarginTop - dY + "px", 
        this.getDragPos()) : this.dragItem.offsetTop - this.dragItemMarginTop - dY >= this.dragMinPosY - 2 && this.dragItem.offsetTop - this.dragItemMarginTop - dY <= this.dragItem.parentNode.clientHeight && (this.mousePosY = e.clientY, 
        this.dragItem.style.top = this.dragItem.offsetTop - this.dragItemMarginTop - dY + "px", 
        this.getDragPos());
    }
    getDragPos() {
        var posY = this.dragItem.offsetTop, children = this.dragItem.parentNode.children;
        let i = 0;
        for (i = this.dragItem.classList.contains("image") ? 1 : i; i < children.length; i++) {
            var child = children[i], dY = .5 * child.offsetHeight;
            if (child.offsetTop < posY && posY < child.offsetTop + child.offsetHeight) {
                child.id && "qubot-phantom" !== child.id && (child.offsetTop + dY > posY ? i + 1 < children.length && children[i + 1] === this.dragPhantom && child.before(this.dragPhantom) : child.after(this.dragPhantom));
                break;
            }
        }
    }
    mouseupDragMenuOnID(e) {
        e.stopPropagation(), e.preventDefault(), document.onmouseup = null, document.onmousemove = null;
        var item, items_panel = document.querySelector("#qubot-items .qubot-message");
        items_panel && (items_panel.style.height = ""), document.querySelector(".is-drag").classList.remove("is-drag"), 
        (e.path || e.composedPath()).forEach(elem => {
            "qubot-actions" != elem.id && "qubot-items" != elem.id || elem.querySelectorAll(".qubot-line").forEach(item => {
                item.parentNode.removeChild(item);
            });
        });
        let newPos = 0, j = 0, children = this.dragItem.parentNode.children, isItem = !1;
        for (let i = 0; i < children.length; i++) {
            if ("qubot-phantom" === children[i].id) {
                newPos = j, isItem = children[i].getAttribute("item");
                break;
            }
            !children[i].id || 0 != children[i].id.indexOf("qubot-action") && 0 != children[i].id.indexOf("qubot-editor") || children[i] == this.dragItem || j++;
        }
        isItem ? (items_panel = parseInt(this.dragItem.id.substring(13)), e = this.editor.bot.states[this.editor.bot.state], 
        0 <= items_panel && items_panel < e.length && 0 <= newPos && newPos < e.length && (item = e[items_panel], 
        e.splice(items_panel, 1), e.splice(newPos, 0, item)), this.editor.resetEditorAndCard()) : this.editor.stateEditor.actions.changeActionPosition(this.dragStartPos, this.dragCurPos, newPos), 
        this.dragItem.firstChild.onmouseleave = null, this.dragItem.firstChild.style = "", 
        this.dragItem = null, this.dragPhantom.remove(), this.dragPhantom = null, 
        this.editor.save();
    }
    mouseupDragMenuActions(e) {
        e.stopPropagation(), e.preventDefault(), document.onmouseup = null, document.onmousemove = null;
        var item, actions_panel = document.getElementById("qubot-actions");
        actions_panel && (actions_panel.style.height = ""), document.querySelector(".is-drag").classList.remove("is-drag"), 
        (e.path || e.composedPath()).forEach(elem => {
            "qubot-actions" != elem.id && "qubot-items" != elem.id || elem.querySelectorAll(".qubot-line").forEach(item => {
                item.parentNode.removeChild(item);
            });
        });
        let newPos = 0, j = 0, children = this.dragItem.parentNode.children, isItem = !1;
        for (let i = 0; i < children.length; i++) {
            if ("qubot-phantom" === children[i].id) {
                newPos = j, isItem = children[i].getAttribute("item");
                break;
            }
            !children[i].id || 0 != children[i].id.indexOf("qubot-action") && 0 != children[i].id.indexOf("qubot-editor") || children[i] == this.dragItem || j++;
        }
        isItem ? (actions_panel = parseInt(this.dragItem.id.substring(13)), e = this.editor.bot.states[this.editor.bot.state], 
        0 <= actions_panel && actions_panel < e.length && 0 <= newPos && newPos < e.length && (item = e[actions_panel], 
        e.splice(actions_panel, 1), e.splice(newPos, 0, item)), this.editor.resetEditorAndCard()) : this.editor.stateEditor.actions.changeActionPositionOnID(this.dragCurPos, newPos), 
        this.dragItem.firstChild.onmouseleave = null, this.dragItem.firstChild.style = "", 
        this.dragItem = null, this.dragPhantom.remove(), this.dragPhantom = null, 
        this.editor.save();
    }
    createAddMenu(obj, list, disabled = []) {
        var menu = this.add(obj, "qubot-menu");
        for (let i = 0; i < list.length; i++) {
            let item = list[i], a;
            var dis = disabled.includes(item[0]), cont = (a = dis ? this.add(menu, "qubot-menu-item disabled") : this.add(menu, "qubot-menu-item"), 
            "paste" == item[0] && a.classList.add("qubot-add-paste"), this.add(a, "qubot-menu-container"));
            this.add(cont, "qudata-svg qudata-svg-" + item[0]), this.add(cont, "", "span").innerHTML = item[0], 
            dis || (a.onclick = item[1]);
        }
        let editor = this.editor;
        return obj.onclick = function() {
            editor.onclickBtnAdd(this);
        }, menu;
    }
    onclickBtnAdd(obj) {
        var obj = obj.lastChild, rect = (obj.style.top = "-5px", obj.style.left = "-1px", 
        obj.style.display = "flex", obj.getBoundingClientRect()), wWidth = document.documentElement.clientWidth, wHeight = document.documentElement.clientHeight;
        rect.bottom > wHeight && (obj.style.top = wHeight - rect.bottom - 20 + "px"), 
        rect.right > wWidth && (obj.style.right = wWidth - rect.right - 20 + "px");
    }
    showAddMenu(e, menu, ids, rect) {
        var wWidth, wHeight;
        e.stopPropagation(), this.hideAddMenu(), menu && (e = document.documentElement.scrollTop, 
        menu.setAttribute("for", ids), (menu = menu.lastChild).style.top = rect.top - 5 + e + "px", 
        menu.style.left = rect.left - 5 + "px", menu.style.display = "flex", ids = menu.getBoundingClientRect(), 
        wWidth = document.documentElement.clientWidth, wHeight = document.documentElement.clientHeight, 
        ids.bottom > wHeight && (menu.style.top = rect.top - 5 + (wHeight - ids.bottom - 20) + e + "px"), 
        ids.right > wWidth && (menu.style.left = rect.left - 5 + (wWidth - ids.right - 20) + "px"), 
        document.body.onclick = this.hideAddMenu.bind(this));
    }
    hideAddMenu(e) {
        var ids = [ "items", "actions", "intents" ];
        for (let i = 0; i < ids.length; i++) {
            var menu = document.querySelector("#qubot-paste-" + ids[i] + "-panel .qubot-menu");
            menu && (menu.style.display = "none");
        }
        document.body.onclick = null;
    }
    getText(obj, isHTML = !1) {
        let txt = "", alias = {
            ua: "uk"
        };
        return Object.keys(alias).forEach(key => {
            key in obj && (obj[alias[key]] = obj[key], delete obj[key]);
        }), "string" == typeof obj ? txt = obj : this.LANGUAGE in obj && (txt = obj[this.LANGUAGE]), 
        txt = isHTML ? txt : txt.replaceAll("&lt;", "<").replaceAll("&gt;", ">");
    }
    getNonEmplyText(obj) {
        if ("string" == typeof obj) return obj;
        if (this.LANGUAGE in obj && obj[this.LANGUAGE].length) return obj[this.LANGUAGE];
        for (var k in obj) if (obj[k].length) return obj[k];
        return "";
    }
    alloyHTML = [ "b", "i", "u", "strong", "tt" ];
    prepareText(text) {
        return text = text.replaceAll("<", "&lt;").replaceAll(">", "&gt;"), this.alloyHTML.forEach(x => {
            text = text.replaceAll("&lt;/" + x + "&gt;", "</" + x + ">").replaceAll("&lt;" + x + "&gt;", "<" + x + ">");
        }), text;
    }
    setText(obj, text) {
        "" === text.trim() ? delete obj[this.LANGUAGE] : obj[this.LANGUAGE] = this.prepareText(text);
    }
    onkeydownText(ev) {
        let editor = this.editor;
        if ("$" === ev.key) {
            editor.stateEditor.removeSlotsMenu();
            ev = ev.path || ev.composedPath && ev.composedPath();
            if (1 < ev.length) {
                var slot, ev = ev[1], menu = editor.add(ev, "qubot-slots-menu");
                for (slot in editor.bot.slots) {
                    let a;
                    (a = "INPUT" === slot || "LANGUAGE" === slot || "INTENT" === slot || "CONFIDENCE" === slot ? editor.add(menu, "a-sys") : editor.add(menu, "a")).innerHTML = slot, 
                    a.onclick = function() {
                        editor.stateEditor.insertText(this);
                    };
                }
                var rect = ev.getBoundingClientRect(), recH = menu.getBoundingClientRect();
                let top = -1;
                rect.top + recH.height > document.documentElement.clientHeight && (top -= rect.top + recH.height - document.documentElement.clientHeight), 
                menu.style.left = ev.clientWidth + "px", menu.style.top = top + "px", 
                menu.onmouseleave = function() {
                    this.remove();
                };
            }
        }
    }
    removeSlotsMenu() {
        var menus = document.getElementById("qubot-state-editor").getElementsByClassName("qubot-slots-menu");
        for (let i = 0; i < menus.length; i++) menus[i].remove();
    }
    insertText(obj) {
        var text = obj.parentNode.parentNode.getElementsByTagName("textarea");
        text.length && (text = text[0], this.editor.insertAtCursor(text, obj.innerHTML), 
        text.parentElement && text.parentElement.update && (text.parentElement.update(text.value), 
        text.parentElement.sync_scroll()), obj.parentNode.remove(), obj = new Event("input", {
            bubbles: !0,
            cancelable: !0
        }), text.dispatchEvent(obj), obj = new Event("change", {
            bubbles: !0,
            cancelable: !0
        }), text.dispatchEvent(obj));
    }
    insertAtCursor(myField, myValue) {
        var startPos, endPos;
        document.selection ? (myField.focus(), (sel = document.selection.createRange()).text = myValue) : myField.selectionStart || "0" == myField.selectionStart ? (startPos = myField.selectionStart, 
        endPos = myField.selectionEnd, myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length)) : myField.value += myValue;
    }
    clearAfter(parent, after) {
        for (var children = parent.children, i = children.length - 1; 0 <= i && children[i] != after; i--) parent.removeChild(children[i]);
    }
}

class QuBotEditorEnv {
    constructor() {
        this.type = null, this.clientToken = null, this.isToken = !1;
    }
    async create() {}
    async save({}) {}
    async load({}) {}
    async saveBot({}) {}
    async loadBot({}) {}
    async onClick({}) {}
    async newBot() {}
    async deleteBot({}) {}
    async sendBotManager(request) {}
    async receive({}) {}
    async runExtension(extensionName, version, requestName, requestParams) {}
    async onResizeEvent(event) {
        await this.lib.onResizeEvent();
    }
    async onBeforeUnloadEvent() {
        await this.lib.onBeforeUnloadEvent();
    }
    setClientToken(token) {
        this.isToken = 10 < token.length, this.clientToken = this.isToken ? token : null;
    }
    getClientToken() {
        return this.clientToken;
    }
    sendPost(url, request, headers = null, callback = function(obj) {}) {
        let xhrRequest = new XMLHttpRequest();
        for (var header in xhrRequest.responseType = "json", xhrRequest.open("POST", url, !0), 
        headers) xhrRequest.setRequestHeader(header, headers[header]);
        xhrRequest.addEventListener("readystatechange", function() {
            var result;
            4 === xhrRequest.readyState && 200 === xhrRequest.status && (result = xhrRequest.response, 
            callback(result));
        }), xhrRequest.send(request);
    }
}

class QuBotEditorLib extends QuBotEditorBase {
    constructor(env) {
        super(), (this.editor = this).env = env;
    }
    async create(params) {}
    renameBotEvent(botID, name) {}
    async init() {}
    async show() {}
    async hide() {}
    async selectBot({}) {}
    async updateBot({}) {}
    async onResizeEvent(event) {}
    async onBeforeUnloadEvent() {}
    createMenu(menu) {}
}

class QuBotEditorHelp extends QuBotEditorBase {
    constructor(editor) {
        super(editor), this.editor = editor, this.isStartInfo = !0, this.isHint = !0, 
        this.fastMode = !1, this.isOffline = "wp" == editor.env.type, this.isGrid = !1;
        let wpLang = document.documentElement.lang;
        this.isOffline && wpLang && (editor = wpLang.indexOf("-"), (wpLang = -1 < editor ? wpLang.substring(0, editor) : wpLang) in {
            en: "",
            uk: "",
            ua: "",
            ru: ""
        }) ? this.helpLanguage = wpLang : this.helpLanguage = this.LANGUAGE || "en", 
        this.messages = {
            StartMessage: {
                en: `
                    There are different ways to create a bot:
                    <ol>
                    <li> Feel free to edit the current bot.<br> In <b>My bots</b> menu, you can find it as "<i>My first bot</i>" (default).
                    <li> Choose a bot from <b>Templates</b>, then click <b>Clone</b> in <b>Edit Bot</b> menu.<br> The bot will be added to <b>My bots</b>.
                    </ol>           
                    Useful tips:    
                    <ul>
                        <li> new bots can be created by clicking <b>Edit Bot</b> - <b>New</b>;<br> you can then rename and delete the bots;
                        <li> dialog steps are arranged in a grid or as an arbitrary diagram (see <b>View</b> menu);
                        <li> click <b>Help</b> - <b>Virtual Assistant</b> to receve more information from the bot;
                        <li> the window and hints are enabled/disabled in <b>Help</b> menu.
                    </ul>
                    `,
                ru: `
                    Для создания бота, выберете одну из следующих возможностей:
                    <ol>
                    <li> Смело редактируйте текущего бота.<br> В меню <b>Мои боты</b> он называется "<i>My first bot</i>" (по умолчанию).
                    <li> Из меню <b>Шаблоны</b> выберите одного из готовых ботов.<br> Затем в меню <b>Править бота</b> выберете пункт <b>Клонировать</b>, сделав его своим (он добавится в меню <b>Мои боты</b>).
                    </ol>           
                    Обратите внимание, что:    
                    <ul>
                        <li> новых ботов можно создавать в меню <b>Править бота</b> - <b>Создать</b>; там же их можно переименовать или удалить;
                        <li> шаги диалога упорядочиваются в виде сетки или как произвольная диаграмма (меню <b>Вид</b>);
                        <li> более подробную информацию можно получить у бота, выбрав пункт меню <b>Помощь</b> - <b>Виртуальный ассистент</b>;
                        <li> это окно и другие подсказки отключаются или включаются в меню <b>Помощь</b>.
                    </ul>
                `,
                uk: `
                    Створити бота можливо одним із перелічених способів:
                    <ol>
                    <li> Редагуйте існуючий бот.<br> У меню <b>Мої боти</b> він називається "<i>My first bot</i>" (за замовчуванням).
                    <li> Виберіть готовий бот з меню <b>Шаблони</b>.<br> Потім оберіть в меню <b>Редагувати бота</b> пункт <b>Клонувати</b> (він з'явиться у меню <b>Мої боти</b>).
                    </ol>           
                    Зверніть увагу, що:    
                    <ul>
                        <li> нових ботів можна створювати в меню <b>Редагувати бота</b> - <b>Створити</b>; там їх можна перейменувати або видалити;
                        <li> кроки діалогу впорядковуються у вигляді сітки або як довільна діаграма (меню <b>Перегляд</b>);
                        <li> більш детальну інформацію можна отримати від бота, обравши пункт меню <b>Допомога</b> - <b>Віртуальний помічник</b>;
                        <li> це вікно та інші підказки відключаються або включаються в меню <b>Допомога</b>.
                    </ul>
                `
            },
            storageNeedQudata: {
                en: `
                    To use this repository,
                    read the following gidelines: <a href="https://qudata.com/en/qubot/wordpress/" target="_blank">qudata.com/wordpress/</a>                
                    `,
                ru: `
                    Для использования этого хранилища, 
                    прочтите инструкции <a href="https://qudata.com/ru/qubot/wordpress/" target="_blank">qudata.com/wordpress/</a>
                    `,
                uk: `
                    Для використання цього сховища, 
                    прочитайте інструкції <a href="https://qudata.com/ru/qubot/wordpress/" target="_blank">qudata.com/wordpress/</a>
                    `
            },
            UnknownState: {
                en: `
                    Unknown step name. Don't enter it here. 
                    Click on that entry and then on the step card where you want to go.
                    `,
                ru: `
                    Неизвестное имя шага. Лучше не вводите его здесь. 
                    Щелкните по этому вводу, а затем по карточке шага, куда Вы хотите перейти.
                    `,
                uk: `
                    Невідома назва кроку. Краще її тут не вводити. 
                    Натисніть на це введення, а потім по картці кроку, куди Ви хочете перейти.
                    `
            },
            YouCannotEdit: {
                en: `
                    You cannot edit the template or example. Make it your own bot first. 
                    In order to do it, click <b>Edit bot</b> and select <b>Clone</b>.
                    `,
                ru: `Вам не следует редактировать шаблон или пример. Сначала  сделайте его своим собственным ботом. 
                    Для этого зайдите в меню <b>Править бота</b> и выберете <b>Клонировать</b>.
                    `,
                uk: `Вам не слід редагувати шаблон чи приклад. Спочатку зробіть його власним ботом. 
                    Для цього перейдіть у меню <b>Редагувати бота</b> та оберіть <b>Клонувати</b>.
                    `
            },
            SetStartStateInOther: {
                en: `
                    This is the starting step. 
                    To change the starting step, select it and click this checkbox.
                    `,
                ru: `
                    Это стартовый шаг (сообщение) бота. 
                    Чтобы сделать стартовым другой шаг, зайдите в него и нажмите этот чекбокс.
                    `,
                uk: `
                    Це початковий крок (повідомлення) бота. 
                    Щоб зробити початковим інший крок, зайдіть у нього та натисніть на цей чекбокс.
                    `
            },
            StateNameExists: {
                en: `
                    A step with the same name already exists. Choose a different name.
                    `,
                ru: `
                    Шаг диалога с таким именем уже существует. Выберете другое имя.
                    `,
                uk: `
                    Крок діалога з такою назвою вже існує. Оберіть іншу назву.
                    `
            },
            DoYouWantChabgeStartState: {
                en: `
                    Do you want to change the bot starting message to the current one?
                    `,
                ru: `
                    Вы хотите изменить стартовое сообщение бота на текущее?
                    `,
                uk: `
                    Ви хочете змінити початкове повідомлення бота на поточне?
                    `
            },
            RemovedPermanently: {
                en: `
                    Are you sure? It will be deleted permanently.
                    `,
                ru: `
                    Вы уверены? Он будет удалён навсегда.
                    `,
                uk: `
                    Ви впевнені? Його буде видалено остаточно.
                    `
            },
            NoActiveBot: {
                en: `
                    You don't have your own active bot. 
                    You can make the current bot your bot (<b>Edit bot</b> - <b>Clone</b>)
                    `,
                ru: `
                    У Вас нет собственного активного бота. 
                    Можно сделать своим текущий бот (<b>Править бота</b> - <b>Клонировать</b>)
                    `,
                uk: `
                    У Вас немає власного активного бота. 
                    Ви можете зробити цей бот своїм (<b>Редагувати бота</b> - <b>Клонувати</b>)
                    `
            },
            NoActiveBot: {
                en: `
                    There is no active bot. First select it from the menu <b>My Bots</b>.
                    `,
                ru: `
                    У Вас нет активного бота. Сначала выберете его в меню <b>Мои боты</b>.
                    `,
                uk: `
                    У Вас немає активного робота. Спочатку оберіть його в меню <b>Мої боти</b>.
                    `
            },
            DeleteBot: {
                en: `
                    Are you sure you want to delete the current bot?    
                    `,
                ru: `
                    Вы уверены, что хотите удалить текущего бота?
                    `,
                uk: `
                    Ви впевнені, що хочете видалити цей бот?
                    `
            },
            NoBotsForRename: {
                en: `
                    You haven't chosen your active bot in <b>My Bots</b>.
                    `,
                ru: `
                    Не выбран Ваш активный бот в меню <b>Мои боты</b>
                    `,
                uk: `
                    Не обрано Ваш активний бот в меню <b>Мої боти</b>
                    `
            },
            BotCopy: {
                en: `
                    You copied the current bot, and can now paste it to other bot. 
                    Just select this bot (<b>My bots</b> menu) and then click <b>Edit</b> -  <b>Paste</b>.
                    `,
                ru: `
                    Текущий бот скопирован. Теперь Вы можете вставить его в другой бот. 
                    Для этого выберете этот бот (меню <b>Мои боты</b>) и затем выполните <b>Edit</b> -  <b>Вставить</b>
                    `,
                uk: `
                    Поточний бот скопійовано. Тепер Ви можете вставити його в інший бот. 
                    Для цього оберіть цей бот (меню <b>Мої боти</b>) и далі виконайте <b>Edit</b> -  <b>Вставити</b>
                    `
            },
            BotPasteCannot1: {
                en: `
                    You haven't copied the bot. Click <b>Edit</b> and select <b>Copy</b>.
                    `,
                ru: `
                    Вы ещё не скопировали бота. Войдите в меню <b>Edit</b> и выберете <b>Копировать</b>.
                    `,
                uk: `
                    Ви ще не скопіювали бота. Увійдіть у меню <b>Edit</b> та оберіть <b>Копіювати</b>.
                    `
            },
            BotPasteCannot2: {
                en: `
                    You cannot paste the copied bot to a template. 
                    First select a bot in <b>My Bots</b>.
                    `,
                ru: `
                    Нельзя вставить скопированного бота в шаблон. 
                    Сначала выберете бота в разделе <b>Мои боты</b>.
                    `,
                uk: `
                    Не можна вставити скопійованого бота в шаблон. 
                    Спочатку оберіть бота у розділі <b>Мої боти</b>.
                    `
            },
            ImportBot: {
                en: `
                    It will be imported into the current bot.
                    Are you sure you want to continue?
                    `,
                ru: `
                    Импорт  произойдёт в текущего бота. 
                    Вы уверены в этом?
                    `,
                uk: `
                    Імпорт відбудеться у поточного бота. 
                    Ви впевнені, що хочете продовжити?
                    `
            },
            UploadImage: {
                en: `
                    The image will be uploaded to the QuData servers and you will receive a link.
                    `,
                ru: `
                    Изображение будет загружено на сервера QuData и Вы получите ссылку.
                    `,
                uk: `
                    Зображення буде завантажено на сервер QuData і Ви отримаєте посилання.
                    `
            },
            UploadAudio: {
                en: `
                    The audio will be uploaded to the QuData servers and you will receive a link.
                    `,
                ru: `
                    Аудио будет загружено на сервера QuData и Вы получите ссылку.
                    `,
                uk: `
                    Аудіо буде завантажено на сервер QuData і Ви отримаєте посилання.
                    `
            },
            UploadVideo: {
                en: `
                    The video will be uploaded to the QuData servers and you will receive a link.
                    `,
                ru: `
                    Видео будет загружено на сервера QuData и Вы получите ссылку.
                    `,
                uk: `
                    Відео буде завантажено на сервер QuData і Ви отримаєте посилання.
                    `
            },
            UploadFile: {
                en: `
                    The file will be uploaded to the QuData servers and you will receive a link.
                    `,
                ru: `
                    Файл будет загружен на сервера QuData и Вы получите ссылку.
                    `,
                uk: `
                    Файл буде завантажено на сервер QuData і Ви отримаєте посилання.
                    `
            },
            SaveToClipboard: {
                en: "Saved to clipboard",
                ru: "Сохранено в буфер обмена",
                uk: "Збережено у буфер обміну"
            },
            OneState: {
                en: "There has to be at least one step",
                ru: "В боте должен быть хотя бы один шаг",
                uk: "Бот повинен мати хоча б один крок"
            },
            DelState: {
                en: "Are you sure you want to delete this step?",
                ru: "Вы уверены, что хотите удалить этот шаг?",
                uk: "Ви впевнені, що хочете видалити цей крок?"
            },
            DelFolder: {
                en: "Are you sure you want to delete this folder?",
                ru: "Вы уверены, что хотите удалить эту папку?",
                uk: "Ви впевнені, що хочете видалити цю папку?"
            },
            NoActiveFolder: {
                en: "There is no active folder. First select it.",
                ru: "У Вас нет активной папки. Сначала выберете ее.",
                uk: "У Вас немає активної папки. Спочатку виберіть її."
            },
            UploadBot: {
                en: "Your bot has been added to the site",
                ru: "Ваш бот успешно помещён на сайт",
                uk: "Ваш бот успішно розміщено на сайті"
            },
            UnUploadBot: {
                en: "Your bot is not displayed on the website",
                ru: "Ваш бот не отображается на сайте",
                uk: "Ваш бот не відображається на сайті"
            },
            YouDontCopyActionYet: {
                en: "You haven't copied the action yet",
                ru: "Вы ещё не скопировали действие",
                uk: "Ви ще не скопіювали дію"
            },
            YouDontCopyItemYet: {
                en: "You have not copied the message element yet.",
                ru: "Вы ещё не скопировали элемент сообщения",
                uk: "Ви ще не скопіювали елемент повідомлення"
            },
            ClickOnFolder: {
                en: "You can edit the contents of the folder only in the <b>View</b> - <b>Grid</b> mode.",
                ru: "Редактировать содержимое папки можно только в режиме <b>Вид</b> - <b>Сетка</b>",
                uk: "Редагувати вміст папки можливо лише у режимі <b>Перегляд</b> - <b>Сітка</b>"
            },
            NotEmptyState: {
                en: "Step name cannot be empty.",
                ru: "Имя шага не может быть пустым.",
                uk: "Назва кроку не може бути пустою."
            },
            OneButton: {
                en: "There must be at least one button. <p>To remove a row of buttons, use the menu on the right.</p>",
                ru: "Должна быть хотя бы одна кнопка. <p>Для удаления ряда кнопок, используйте меню справа.</p>",
                uk: "Повинна бути хоча б одна кнопка. <p>Для видалення ряду кнопок, скористайтеся меню праворуч.</p>"
            },
            hintTextItem: {
                en: `
                    Here is the message text. It can be displayed in different languages.
                    Language can be changed in the top right of the step editor (<b>en</b> stands for English).
                    <p> You can use slot names or calculations in the texts in curly brackets: </p>
                    <p> Hello {NAME}</p>
                    <p> Total: {AMOUNT * PRICE} </p>
                `,
                ru: `
                    Текст сообщения. Он может быть на различных языках. 
                    Язык меняется в правом верхнем углу редактора шага (<b>en</b> - это английский). 
                    <p>В текстах можно использовать имена слотов или вычисления внутри текста, окружая их фигурными скобками:</p>
                    <p>Привет {NAME}</p>
                    <p>Стоимость равна {AMOUNT * PRICE}</p>
                    `,
                uk: `
                    Текст повідомлення. Він може відображатися різними мовами. 
                    Мова змінюється у верхньому правому кутку редактора кроку (<b>en</b> - це англійська). 
                    <p>У текстах можна використовувати назви слотів або обчислення всередині тексту у фігурних дужках:</p>
                    <p>Привіт {NAME}</p>
                    <p>Вартість складає {AMOUNT * PRICE}</p>
                    `
            },
            MustBeQuotes: {
                en: "A string constant or step name has to be enclosed in quotes.",
                ru: "Если это строковая константа или имя шага, то текст нужно окружить кавычками.",
                uk: "Назву рядкової константи або кроку має бути взято в лапки."
            },
            hintImageItem: {
                en: `
                    Add the image url to inserst it. 
                    It can be hosted on your website or an external resource. 
                    The image width and aligment is set in the properties.
                    `,
                ru: `
                    Для вставки в сообщение картинки, необходимо указать её адрес в интернете. 
                    Она может быть на Вашем сайте или на одном из внешних сайтов с изображениями. 
                    В свойствах можно настроить ширину картинки и её центрирование.
                    `,
                uk: `
                    Щоб додати у повідомлення зображення, необхідно вказати його адресу в інтернеті. 
                    Воно може бути на Вашому сайті або на одному із зовнішніх сайтів із зображеннями. 
                    Ширина та вирівнювання зображення налаштовується у властивостях.
                    `
            },
            hintVideoItem: {
                en: `
                    Add the video mp4 url to inserst it. 
                    It can be hosted on your website or an external resource.                     
                    `,
                ru: `
                    Для вставки в сообщение видео mp4, необходимо указать его адрес в интернете. 
                    Оно может быть на Вашем сайте или на одном из внешних сайтов с видео.                     
                    `,
                uk: `
                    Для додавання у повідомлення відео mp4 необхідно вказати його адресу в інтернеті. 
                    Воно може бути на Вашому сайті або на одному із зовнішніх сайтів із відео.                     
                    `
            },
            hintAudioItem: {
                en: `
                    Add the audio mp3 url to inserst it. 
                    It can be hosted on your website or an external resource.                     
                    `,
                ru: `
                    Для вставки в сообщение аудиофайл mp3, необходимо указать его адрес в интернете. 
                    Оно может быть на Вашем сайте или на одном из внешних сайтов с аудиофайлами.                     
                    `,
                uk: `
                    Для додавання у повідомлення аудіофайлу mp3 необхідно вказати його адресу в інтернеті. 
                    Він може бути на Вашому сайті або на одному із зовнішніх сайтів із аудіофайлами.                     
                    `
            },
            hintButtonItem: {
                en: `
                    It's a button. You can add few buttons in a row. 
                    Buttons are usually placed at the bottom of the message.
                    <p>In the Item properties, you can set the dialog step that the bot will navigate to
                    when the button is pressed, or save certain information in the slots.</p>
                    <p> You can use slot names or calculations in the buttons in curly brackets: </p>
                    <p> Pay: {PRICE}</p>
                    `,
                ru: `
                    Это кнопка. В линию можно добавить несколько кнопок. 
                    Обычно в сообщении кнопки стоят последними.
                    <p> В Свойствах элемента можно задать шаг диалога, в который бот перейдёт 
                    при нажатии на кнопку, или сохранить в слотах некоторую информацию.</p>
                    <p>В кнопках можно использовать имена слотов или вычисления внутри текста окружая их фигурными скобками:</p>
                    <p>Оплатить: {PRICE}</p>
                    `,
                uk: `
                    Це кнопка. Ви можете додати кілька кнопок підряд.
                    Кнопки зазвичай розміщуються внизу повідомлення.
                    <p> У Властивостях елемента можна задати крок діалогу, на який бот перейде 
                    при натисканні на кнопку, або зберегти в слотах деяку інформацію.</p>
                    <p>У кнопках можна використовувати назви слотів або обчислення всередині тексту у фігурних дужках:</p>
                    <p>Сплатити: {PRICE}</p>
                    `
            },
            hintActionItem: {
                en: `
                    The actions performed when the dialog step is activated is described here.
                    <p> In Item properties, you can set the next step to navigate by default.
                    It will be done when a button is pressed or when text is entered, if the step isn't defined for them.</p>
                    `,
                ru: `
                    Здесь описываются действия, выполняющиеся, когда активируется этот шаг диалога.
                    <p> В Свойствах элемента Вы можете задать переход на следующий шаг 
                    по умолчанию для всех кнопок или ввода текста, 
                    а также инициализировать значения слотов.</p>
                    `,
                uk: `
                    Тут описано дії, які виконуються під час активації цього кроку діалогу.
                    <p> У Властивостях елемента Ви можете встановити наступний крок для переходу за замовчуванням. 
                     Це буде зроблено при натисканні на кнопку або введені тексту, якщо не визначено інший крок.</p>
                    `
            },
            hintTimerItem: {
                en: `
                    The actions performed when the timer expires is described here.
                    <p>The countdown starts when the current step is displayed.</p>
                    `,
                ru: `
                    Здесь описываются действия, выполняющиеся, когда срабатывает таймер. 
                    <p>Таймер начинает отсчёт времени при показе текущего шага.</p>
                    `,
                uk: `
                    Тут описано дії, які виконуються, коли спрацьовує таймер. 
                    <p>Таймер починає відлік часу під час показу поточного кроку.</p>
                    `
            },
            hintTime: {
                en: `
                    Time in milliseconds after which the following actions will be performed. 
                    <p>In particular, the <b>step</b> property is meant to navigate to the next dialog step.
                    `,
                ru: `
                    Время в миллисекундах, после которого выполнятся идущие далее действия. 
                    <p>В частности, свойство <b>шаг</b> приведёт к переходу на следующий шаг диалога.</p>
                    `,
                uk: `
                    Час у мілісекундах, після якого будуть виконані наступні дії. 
                    <p>Зокрема властивість <b>крок</b> призведе до переходу на наступний крок діалогу.</p>
                    `
            },
            hintMapItem: {
                en: "Link to Google Maps with your coordinates",
                ru: "Ссылка на карту Google Map с Вашими координатами",
                uk: "Посилання на карту Google Map з Вашими координатами"
            },
            hintMapHight: {
                en: "Map height in pixels",
                ru: "Высота карты в пикселях",
                uk: "Висота карти у пікселях"
            },
            hintMapLongitude: {
                en: "Location by longitude. Used in messengers",
                ru: "Расположение по долготе. Используется в мессенджерах",
                uk: "Розташування за довготою. Використовується в месенджерах"
            },
            hintMapLatitude: {
                en: "Location by latitude. Used in messengers",
                ru: "Расположенние по широте. Используется в мессенджерах",
                uk: "Розташування за широтою. Використовується в месенджерах"
            },
            hintInputItem: {
                en: `
                    Click here to configure the navigation to a new dialog step when a user enters text.
                    <p>The text you enter is stored in the INPUT slot and can then be used in messages.</p>
                    `,
                ru: `
                    Кликнув сюда, Вы можете настроить переход в новый шаг диалога при вводе пользователем текста. 
                    <p>Вводимый текст сохраняется в слоте INPUT и может использоваться затем в сообщениях.</p>
                    `,
                uk: `
                    Натисніть тут, щоб налаштувати перехід у новий крок діалогу під час введення користувачем тексту. 
                    <p>Текст, що вводиться, зберігається у слоті INPUT і може використовуватися потім в повідомленнях.</p>
                    `
            },
            hintStateName: {
                en: `
                    It's the name of the current dialog step.
                    <p>Use meaningful names to easily set navigations in the Item properties.</p>
                    `,
                ru: `
                    Это имя текущего шага диалога. 
                    <p>Стоит задавать осмысленные имена. Тогда будет проще ориентироваться при определении  
                    переходов в Свойствах элемента.</p>
                    `,
                uk: `
                    Це назва поточного кроку діалогу. 
                    <p>Використовуйте змістовні імена, щоб було легко орієнтуватися при визначені 
                    переходів у Властивостях элемента.</p>
                    `
            },
            hintLANGUAGE: {
                en: `
                    Texts and buttons can be lokalized.
                    <p>When a new language is selected, the text of the previous language is displayed in gray.</p>
                    <p>Language selection can be done on a separate step by changing the value of the built-in LANGUAGE slot to ru, en, etc.</p>

                    `,
                ru: `
                    Тексты и надписи на кнопках могут быть на нескольких языках. 
                    <p>При выборе нового языка, текст предыдущего языка отображается серым цветом.</p> 
                    <p>Смену языка можно сделать в отдельном шаге, изменив значение встроенного слота LANGUAGE на ru, en и т.д.</p>
                    `,
                uk: `
                    Тексти та написи на кнопках можуть бути кількома мовами. 
                    <p>При виборі нової мови текст попередньої мови відображається сірим кольором.</p> 
                    <p>Перехід на іншу мову можна зробити окремо, змінивши значення вбудованого слота LANGUAGE на ru, en і т.д.</p>
                    `
            },
            hintStartState: {
                en: `
                    If the checkbox is active, it means the current dialog step is the starting step, which  will be initiated when the bot is launched. 
                    <p>It is marked as "start" in the step card heading.</p>                
                    `,
                ru: `
                    Когда чекбокс активен, это означает, что текущий шаг диалога является стартовым и при запуске бота он выполнится первым. 
                    <p>В заголовке карточки шага это помечается надписью "start".</p>
                    `,
                uk: `
                    Коли чекбокс активний, це означає, що поточний крок діалогу є початковим і при запуску бота він виконається першим. 
                    <p>У заголовку картки кроку це позначається написом "start".</p>
                    `
            },
            hintState: {
                en: `
                    This is the name of the step to navigate when an event occurs (button pressed, text entered, or timer expired).
                    <p> You needn't edit it. Simply click the input field, and then the card with the step in the list of steps on the right. </>
                    <p> However, it can be deleted or edited. </p>
                    `,
                ru: `
                    Это имя шага для перехода при возникновении события (нажата кнопка, введен текст или сработал таймер).
                    <p> Его не стоит редактировать. Достаточно кликнуть на поле ввода, а затем  на карточку с шагом в списке шагов справа.</> 
                    <p>Хотя, при желании, его можно удалить или отредактировать.</p>
                    `,
                uk: `
                    Це назва кроку для переходу при події (натиснуто кнопку, введено текст або спрацював таймер).
                    <p> Його не потрібно редагувати. Достатньо натиснути на поле введення, а потім на картку з кроком у списку кроків праворуч.</> 
                    <p>За бажанням, його можна видалити або відредагувати.</p>
                    `
            },
            hintGoto: {
                en: `
                    This is the step name for the "instant" navigation.
                    All actions below are ignored and the content of the specified step is displayed immediately.
                    `,
                ru: `
                    Это имя шага для "мгновенного" перехода. 
                    Все ниже лежащие действия игнорируются и сразу показывается контент указанного шага.
                    `,
                uk: `
                    Це назва кроку для "миттєвого" переходу. 
                    Усі наведені нижче дії ігноруються, а вміст зазначеного кроку відображається негайно.
                    `
            },
            hintInputKind: {
                en: `
                    By default, entered text is regarded a text. However, it can also be an email, a phone, or a number.
                    <p>For example, if you select the email, then the bot will check if the format is correct.
                    If the entered string is not email, then the <b>INPUT</b> slot will remain empty. </p>
                    <p>This can be processed using the condition <b>if</b>: not INPUT </p>
                    `,
                ru: `
                    По умолчанию, введенный текст считается просто текстом. Однако он также может быть email-ом, телефоном или числом. 
                    <p>Если Вы выберете, например, email, то бот проверит корректность его формата. 
                    Если введенная строка не является email, то слот <b>INPUT</b> будет пустой. </p> 
                    <p>Это можно обработать при помощи условия <b>if</b>:  not INPUT </p>                    
                    `,
                uk: `
                    За замовчуванням введений текст вважається текстом. Однак це також може бути електронна адреса, номер телефону або число. 
                    <p>Наприклад, якщо Ви виберете email, бот перевірить, чи правильний формат введено. 
                    Якщо введений рядок не email, тоді слот <b>INPUT</b> буде порожнім. </p> 
                    <p>Це можна обробити за допомогою умови <b>if</b>:  not INPUT </p>                    
                    `
            },
            hintSlot: {
                en: `
                    A slot is a variable in which values can be stored. A slot has a name and values.
                    Below, the first field is the name of the slot and the second is its value.
                    `,
                ru: `
                    Слот - это переменная, в которой можно сохранять значения. Слот имеет имя и значения. 
                    Ниже, первое поле - это имя слота, а второе - его значение.
                    `,
                uk: `
                    Слот - це змінна, у якій можуть зберігатися значення. Слот має назву та значення. 
                    Нижче, перше поле — це назва слота, а друге — його значення.
                    `
            },
            hintSlotName: {
                en: `
                    You can choose any name for a slot. If you need to create a new slot, just enter its name.
                    It will then appear in the drop-down list.
                    <p>Slots can be used in message texts.
                    If you have saved the client's name in the NAME slot, then you may have "Hello {NAME}!",
                    and the client's name will be substitutedin the text. </p>
                    `,
                ru: `
                    Имя слота может быть любым. Если Вам необходимо создать новый слот, просто введите его название. 
                    В дальнейшем он будет появляться в выпадающем списке.  
                    <p>Слот можно использовать в текстах сообщений. 
                    Если Вы сохранили имя клиента в слоте NAME, то в тексте можно написать: 
                    "Привет {NAME}!" и это имя будет подставлено.</p>
                    `,
                uk: `
                    Ви можете вибрати будь-яку назву для слота. Якщо Вам потрібно створити новий слот, просто введіть його назву. 
                    Надалі він з’явиться у списку, що випадає.  
                    <p>Слот можна використовувати у текстах повідомлень. 
                    Якщо Ви зберегли ім'я клієнта у слоті NAME, то в тексті можна написати: 
                    "Привіт {NAME}!" і це ім'я буде підставлено.</p>
                    `
            },
            hintSlotValue: {
                en: `
                    The slot value may be a number, a string, values of other slots,
                    or arithmetic expressions. A string has to be enclosed in quotes: "string".
                    <p> For example, the input string properties for the NAME slot can be set to INPUT.
                    As a result, the text entered by a user will be saved to NAME. </p>
                    `,
                ru: `Значением слота могут быть числа, строки, значения других слотов, 
                    а также арифметические выражения. Строки нужно окружать кавычками: "строка".
                    <p>Например, в свойствах строки ввода для слота NAME можно задать значение INPUT. 
                    В результате в NAME будет сохранён введенный пользователем текст.</p>                  
                    `,
                uk: `Значенням слота може бути число, рядок, значення інших слотів, 
                    а також арифметичні вирази. Рядок потрібно взяти в лапки: "рядок".
                    <p>Наприклад, у властивостях рядка для введення для слота NAME можна встановити значення INPUT. 
                    У результаті введений користувачем текст буде збережено в NAME.</p>                  
                    `
            },
            hintIf: {
                en: `
                    Any logical expression can be written in the <b>if</b> condition string.
                    If it is true, then the actions going under it are performed.
                    <p>For example, if you request a customer's name, you can check if he has entered a single letter:
                    INPUT.length &lt; 2
                    </p>
                    <p>
                    If so, then you may set the navigation to the dialog step to reprove the user for it.</p>
                    If the input string type is email, then before saving the value in the slot,
                    add "not INPUT" in <b>if</b> and navigate to the step informing that the entered email is incorrect. 
                    `,
                ru: `
                    В строке условия <b>if</b> можно написать любое логическое выражение. 
                    Если оно истинно, то выполняются действия, идущие под ним. 
                    <p>Например, если Вы спросили имя клиента, можно проверить не ввёл ли он одну букву:  
                    INPUT.length &lt; 2
                    </p>
                    <p>
                    Если это так, то можно задать переход в шаг диалога, где его за это пожурить.</p>
                    <p>Если строка ввода имеет тип email, то прежде чем его его запомнить в слоте, 
                    следует в <b>if</b> написать: not INPUT и перейти в шаг сообщающий, что это адрес неверен.</p>
                    `,
                uk: `
                    У рядку умови <b>if</b> можна записати будь-який логічний вираз. 
                    Якщо його значення істинне, то виконуються визначені під ним дії. 
                    <p>Наприклад, якщо Ви запитуєте ім’я клієнта, можна перевірити, чи не ввів він лише одну літеру:  
                    INPUT.length &lt; 2
                    </p>
                    <p>
                    Якщо це так, то можна задати перехід у крок діалогу і додатково уточнити.</p>
                    <p>Якщо рядок введення визначино як email, то перед збереженням значення в слоті, 
                    слід у <b>if</b> написати: not INPUT і перейти у крок, що повідомляє, що ця адреса невірна.</p>
                    `
            },
            hintElIf: {
                en: `
                    These actions are performed if the <b>if</b>-condition above is false and the boolean condition written in the line is true.
                    `,
                ru: `
                    Эти действия выполняются, если вышеуказанное условие <b>if</b> ложно, а логическое условие, записанное в строке, истина.
                    `,
                uk: `
                    Ці дії виконуються, якщо вищевизначена умова <b>if</b> хибна, а логічна умова, записана в рядку, істинна.
                    `
            },
            hintElse: {
                en: `
                    These actions are performed if the <b>if</b>-condition above is false.
                    `,
                ru: `
                    Эти действия выполняются, если вышеуказанное условие <b>if</b> ложно.
                    `,
                uk: `
                    Ці дії виконуються, якщо вищевизначена умова <b>if</b> хибна.
                    `
            },
            hintRun: {
                en: `
                    This is the name of a step that is immediately executed, after which it returns to the call point.                    
                    `,
                ru: `
                    Это имя шага, который сразу выполняется, после чего происходит возврат в точку вызова.                                         
                    `,
                uk: `
                    Це назва кроку, який виконується негайно, після чого відбувається повернення в момент виклику.                                         
                    `
            },
            hintMessageItem: {
                en: `Start of a new message. By default, each step is a new message.
                    You can put this object at the beginning of the step and override, for example, the background color of the message.
                    <p> You can also put this object in the middle of a step and then it will be split into two messages.
                    In addition to color, you can also set the duration of the tapping effect. </p>
                    `,
                ru: `Начало нового сообщения. По умолчанию, каждый шаг является новым сообщением. 
                     Вы можете поставить этот объект вначале шага и переопределить, например цвет фона сообщения.
                     <p>Можно также поставить этот объект в середине шага и тогда он будет разбит на два сообщения.
                     Кроме цвета, можно также задать продолжительность эффекта набора сообщения.</p>
                    `,
                uk: `Початок нового повідомлення. За замовчуванням кожен крок є новим повідомленням. 
                     Ви можете розмістити цей об'єкт на початок кроку і замінити, наприклад, колір фону повідомлення.
                     <p>Ви також можете розмістити цей об’єкт у середині кроку, і тоді він буде розділений на два повідомлення.
                     Окрім кольору, Ви також можете встановити тривалість ефекту друку повідомлення.</p>
                    `
            },
            hintMessageTyping: {
                en: "The time of the taiping effect that simulates the typing of a bot.",
                ru: "Время эффекта печати, имитирующий набор текста ботом.",
                uk: "Час ефекту друку, який імітує набір тексту ботом."
            },
            hintMessageBack: {
                en: "The background color of the message, if different from the default.",
                ru: "Цвет фона сообщения, если он отличен от принятого по умолчанию.",
                uk: "Колір фону повідомлення, якщо він відрізняється від встановленого за замовчуванням."
            },
            hintMessageType: {
                en: "Message types: </br>- normal - standard message. </br>- disappear - disappearing message (removed after displaying a normal message)",
                ru: "Тип сообщения: </br>- normal - обычное сообщение. </br>- disappear - исчезающее сообщение (будет удалено в момент, когда пользователю будет выведено обычное сообщение).",
                uk: "Тип повідомлення: </br>- normal - звичайне повідомлення. </br>- disappear - повідомлення, що зникає (буде видалено після відображення звичайного повідомлення)."
            },
            hintSwitch: {
                en: `
                    The "<b>switch</b>" statement evaluates the expression.
                    <p> If its value matches the value in the following "<b>case</b>" statements, then their actions will be executed. </p>
                    <p> If no "<b>case</b>" works, then the "<b>default</b>" block will be executed.                
                    `,
                ru: `
                    Оператор "<b>switch</b>" вычисляет выражение. 
                    <p>Если его значение совпадёт со значением в следующих далее операторах "<b>case</b>", то выполнятся их действия.</p>
                    <p>Если ни один "case" не сработает, то выполнится блок "<b>default</b>".
                    `,
                uk: `
                    Оператор "<b>switch</b>" обчислює вираз. 
                    <p>Якщо його значення співпадає зі значенням у наступних операторах "<b>case</b>", то виконуються їхні дії.</p>
                    <p>Якщо жоден "case" не спрацює, виконається блок "<b>default</b>".
                    `
            },
            hintCase: {
                en: `
                    The actions of the "<b>case</b>" statement are executed if the value of its expression matches the value in the above "<b>switch</b>" statement.
                    <p> If "<b>case</b>" fires, no further "<b>case</b>" statements are checked </p>
                    <p> In the "<b>case</b>" statement, you can write several expressions, separating them with a semicolon. The block will be triggered if one of these values matches the "<b>switch</b>" statement. </p>                
                    `,
                ru: `
                    Действия оператора "<b>case</b>" выполняются, если значение его выражения совпадёт со значением, в стоящем выше операторе "<b>switch</b>".
                    <p>Если "<b>case</b>" сработал, дальнейшие операторы "<b>case</b>" не проверяются</p>
                    <p>В операторе "<b>case</b>" можно записывать несколько выражений, разделяя их точкой с запятой. Блок сработает, если одно из этих значений совпадёт с оператором "<b>switch</b>".</p>
                    `,
                uk: `
                    Дія оператора "<b>case</b>" виконується, якщо значення його виразу збігається зі значенням у наведеному вище операторі "<b>switch</b>".
                    <p>Якщо "<b>case</b>" спрацював, наступні оператори "<b>case</b>" не перевіряються</p>
                    <p>В операторі "<b>case</b>" можна записати кілька виразів, розділяючи їх крапкою з комою. Блок спрацює, якщо одне з цих значень співпаде з оператором "<b>switch</b>".</p>
                    `
            },
            hintDefault: {
                en: `
                    The actions of the "<b>default</b>" operator are executed if none of the "<b>case</b>" statements above have worked.
                    `,
                ru: `
                    Действия оператора "<b>default</b>" выполняются, если не сработал ни один из операторов "<b>case</b>", стоящих выше.
                    `,
                uk: `
                    Дії оператора "<b>default</b>" виконуються, якщо жоден із наведених вище операторів "<b>case</b>" не спрацював. 
                    `
            },
            hintIntentItem: {
                en: `
                    In this item, you can describe the classes of intentions of users when they enter text.
                    <p> Examples of intentions: <b> GREET </b> (the person said hello) or <b> YES </b> (the person agreed). </p>
                    <p> For each intent, examples are given on which the bot learns. </p>
                    `,
                ru: `
                    В этом элементе можно описывать классы намерений пользователей при вводе ими текста.
                    <p>Примеры намерений: <b>GREET</b> (человек поздоровался) или <b>YES</b> (человек согласился).</p>
                    <p>Для каждого намерения приводятся примеры, на которых бот обучается.</p>
                    `,
                uk: `
                    У цьому пункті можна описувати класи намірів користувачів під час введення ними тексту.
                    <p>Приклади намірів: <b>GREET</b> (людина привіталася) або <b>YES</b> (людина погодилася).</p>
                    <p>Для кожного наміру наведено приклади, на яких навчається бот.</p>
                    `
            },
            hintIntentName: {
                en: `
                    This is the name of the intent. It must be unique and must be entered without spaces.
                    <p> This name is then used to react to the text in the input field. For the bot to start recognizing intent, <b> kind: </b> intent </p> must be selected in the input field.                  
                    `,
                ru: `
                    Это имя намерения. Оно должно быть уникальным и вводится без пробелов.
                    <p>Это имя затем используется для реакции на текст в поле ввода. Чтобы бот начал распознавание намерения в полее ввода должен быть выбран <b>kind:</b> intent</p>.
                    `,
                uk: `
                    Це назва наміру. Вона має бути унікальною і вводитися без пробілів.
                    <p>Потім ця назва використовується для реакції на текст у полі введення. Щоб бот почав розпізнавати намір, у полі введення потрібно вибрати <b>kind:</b> intent</p>.
                    `
            },
            hintIntentWords: {
                en: `
                    Examples of texts characteristic of this intention. Separate these examples with semicolons.
                    <p> When attributing a text to this intention, both single words and pairs of words (within this example) are taken into account. </p>
                    `,
                ru: `
                    Примеры текстов, характерных для данного намерения. Эти примеры должны разделяться точкой с запятой.
                    <p>При отнесении текста к данному намерению учитываются как одиночные слова, так и пары слов (внутри данного примера).</p>
                    `,
                uk: `
                    Приклади текстів, які характерні для цього наміру. Ці приклади повинні розділятися крапкою з комою.
                    <p>При віднесенні тексту до цього наміру враховуються як окремі слова, так і пари слів (всередині цього прикладу).</p>
                    `
            },
            hintActionLoad: {
                en: "When performing this action, data from the external storage will be sent to the specified slot.",
                ru: "При выполнении этого действия данные из внешнего хранилища будут загружены в указанный слот.",
                uk: "При виконанні цієї дії відомості із зовнішнього сховища будуть завантажені у зазначений слот."
            },
            hintActionLoadStorage: {
                en: "What to use as data storage. Learn more here: https://wiki.qudata.com/",
                ru: "Что можно использовать в качестве хранилища для данных. Детали можно найти на https://wiki.qudata.com/",
                uk: "Що можна використовувати як сховище для даних. Дізнайтеся більше тут https://wiki.qudata.com/"
            },
            hintActionLoadGoogleSheetsTableURL: {
                en: "Google Sheets table URL. To paste, open the table in a separate window, copy the address bar and paste it into this field",
                ru: "URL таблицы Google Sheets. Для вставки, откройте таблицу в отдельном окне, скопируйте адресную строку и вставьте в данное поле",
                uk: "URL таблиці Google Sheets. Щоб вставити, відкрийте таблицю в окремому вікні, скопіюйте адресний рядок і вставте у це поле"
            },
            errorIncorrentGoogleSheetsTableURL: {
                en: "Incorrect Google Sheets table URL. Please try again or read documentation",
                ru: "Не верно вставлен URL к таблице Google Sheets. Попробуйте еще раз или прочтите документацию.",
                uk: "Неправильна URL-адреса таблиці Google Sheets. Спробуйте ще раз або прочитайте документацію."
            },
            hintActionLoadGoogleSheetsSlotName: {
                en: "The name of the slot into which the contents of the table will be loaded",
                ru: "Имя слота, в который будет загружено содержимое таблицы",
                uk: "Назва слота, в який буде завантажено вміст таблиці"
            },
            hintActionLoadGoogleSheetsFilter: {
                en: "A filter used to draw data from the table, has to be declared as a dictionary: { 'COLUMN': 'search string' }",
                ru: "Фильтр для выборки данных из таблицы должен быть описан как словарь: { 'СТОЛБЕЦ': 'искомая строка' }",
                uk: "Фільтр для вибірки даних із таблиці має бути описаний як словник: { 'СТОВПЕЦЬ': 'рядок пошуку' }"
            },
            hintActionSaveGoogleSheetsFilter: {
                en: "A filter used to draw data from the table, has to be declared as a dictionary: { 'COLUMN': 'search string' }",
                ru: "Фильтр для выборки данных из таблицы должен быть описан как словарь: { 'СТОЛБЕЦ': 'искомая строка' }",
                uk: "Фільтр для вибірки даних із таблиці має бути описаний як словник: { 'СТОВПЕЦЬ': 'рядок пошуку' }"
            },
            hintActionLoadGoogleDriveFileURL: {
                en: "Google Sheets table URL. To paste, open the table in a separate window, copy the address bar and paste it into this field",
                ru: "URL таблицы Google Sheets. Для вставки, откройте таблицу в отдельном окне, скопируйте адресную строку и вставьте в данное поле",
                uk: "URL таблиці Google Sheets. Щоб вставити, відкрийте таблицю в окремому вікні, скопіюйте адресний рядок і вставте у це поле"
            },
            errorIncorrentGoogleDriveFileURL: {
                en: "Incorrect Google Drive file URL. Please try again or read documentation",
                ru: "Не верно вставлен URL к файлу из Google Drive. Попробуйте еще раз или прочтите документацию.",
                uk: "Неправильна URL-адреса до файлу з Google Drive. Спробуйте ще раз або прочитайте документацію."
            },
            hintActionLoadGoogleDriveSlotName: {
                en: "The name of the slot into which the contents of the file will be loaded",
                ru: "Имя слота в который будет загружено содержимое файла",
                uk: "Назва слота, в який буде завантажено вміст файлу"
            },
            hintActionLoadDropboxFilePath: {
                en: "Path to file in Dropbox",
                ru: "Путь к файлу в Dropbox",
                uk: "Шлях до файлу в Dropbox"
            },
            errorIncorrentDropboxFilePath: {
                en: "Incorrect Dropbox file path. Please try again or read documentation",
                ru: "Не верно вставлен путь к файлу из Dropbox. Попробуйте еще раз или прочтите документацию.",
                uk: "Неправильний шлях до файлу з Dropbox. Спробуйте ще раз або прочитайте документацію."
            },
            hintActionLoadDropboxSlotName: {
                en: "The name of the slot into which the contents of the file will be loaded",
                ru: "Имя слота, в который будет загружено содержимое файла",
                uk: "Назва слота, в який буде завантажено вміст файлу"
            },
            hintActionModel: {
                en: "The model to be used.",
                ru: "Модель, которая будет использоваться.",
                uk: "Модель, яка буде використовуватись."
            },
            hintActionModelSystem: {
                en: "A system message that is used to configure the model. To use the global value, enter %GPT.SYSTEM%.",
                ru: "Системное сообщение, которое используется для конфигурации модели. Чтобы использовать глобальное изначение введите %GPT.SYSTEM%.",
                uk: "Системне повідомлення, яке використовується для конфігурації моделі. Щоб використовувати глобальне значення, введіть %GPT.SYSTEM%."
            },
            hintActionModelText: {
                en: "Text for the model to be answered. To use a global prompt, enter %GPT.PROMPT%.",
                ru: "Текст для модели, на который будет дан ответ. Чтобы использовать глобальный промпт введите %GPT.PROMPT%.",
                uk: "Текст для моделі, на який буде дано відповідь. Щоб використовувати глобальний промпт, введіть %GPT.PROMPT%."
            },
            hintActionModelSlot: {
                en: "The slot in which the response will be written. The default is OUTPUT.",
                ru: "Слот, в который будет записан ответ. По умолчанию это OUTPUT.",
                uk: "Слот, на який буде записана відповідь. За замовчуванням це OUTPUT."
            },
            hintActionSave: {
                en: "When performing this action, data from the bot will be sent to external storage.",
                ru: "При выполнении этого действия данные из бота будут посланы во внешнее хранилище.",
                uk: "При виконанні цієї дії відомості з бота будуть надіслані у зовнішнє сховище."
            },
            hintActionSaveValue: {
                en: `
                    The sent data is an object, with a list of key-values in curly brackets.
                    <p> { "name": NAME, "age": AGE, "kind": "person" } </p>
                    `,
                ru: `
                    Посылаемые данные - объект, со списком ключей и значений, окружённых фигурными скобками.
                    <p> { "name": NAME, "age": AGE, "kind": "person" } </p>
                    `,
                uk: `
                    Надіслані дані - це об'єкт, зі списком ключів і значень у фігурних дужках.
                    <p> { "name": NAME, "age": AGE, "kind": "person" } </p>
                    `
            },
            hintActionSaveStorage: {
                en: "What to use as data storage. Learn more here: https://wiki.qudata.com/",
                ru: "Что можно использовать в качестве хранилища для данных. Детали можно найти здесь https://wiki.qudata.com/",
                uk: "Що можна використовувати як сховища даних. Деталі можна знайти тут https://wiki.qudata.com/"
            },
            hintActionOperator: {
                en: "Connecting to the operator and setting up the adapter",
                ru: "Подключение к оператору и настройка адаптера",
                uk: "Підключення до оператора та налаштування адаптера"
            },
            hintActionOperatorState: {
                en: "Status of work with the operator",
                ru: "Состояние работы с оператором",
                uk: "Статус роботи з оператором"
            },
            hintActionOperatorUserName: {
                en: "Username that will be used for messaging",
                ru: "Имя пользователя, от которого придёт сообщение",
                uk: "Ім'я користувача, від якого надійде повідомлення"
            },
            hintActionOperatorAdapter: {
                en: "Adapter used to work with the operator",
                ru: "Адаптер используемый для работы с оператором",
                uk: "Адаптер, що використовується для роботи з оператором"
            },
            hintActionOperatorMessage: {
                en: "The first message from a user",
                ru: "Первое сообщение от пользователя",
                uk: "Перше повідомлення від користувача"
            },
            hintActionEvent: {
                en: `
                    When this action is performed, information is saved for the analytics system.
                    <p>User navigation to any dialog step automatically generates an event
                    to track the bot funnel.</p>
                    <p>Here you can additionally indicate any significant event.</p>
                    `,
                ru: `
                    При выполнении этого действия сохраняется информация для системы аналитики. 
                    <p>Появление пользователя в любом шаге диалога автоматически генерит событие, 
                    для отслеживания воронки прохождения бота.</p> 
                    <p>Здесь же Вы можете дополнительно указать важное для Вас событие.</p>
                    `,
                uk: `
                    Під час виконання цієї дії зберігається інформація для системи аналітики. 
                    <p>Поява користувача на будь-якому кроці діалогу автоматично генерує подію, 
                    для відстеження воронки проходження бота.</p> 
                    <p>Тут же Ви можете додатково вказати важливу для Вас подію.</p>
                    `
            },
            hintActionEventKey: {
                en: `
                    It's an arbitrary string aimed to track the bot funnel in the analytics system.
                    `,
                ru: `
                    Произвольная строка, по которой в системе аналитики можно отслеживать воронку 
                    прохождения пользователя по боту.
                    `,
                uk: `
                    Довільний рядок, призначений для відстеження у системі аналітики воронки 
                    проходження користувача по боту.
                    `
            },
            hintActionEventTarget: {
                en: `
                    The key event is marked with a tick.
                    Filter by key events in the analytics system.
                    `,
                ru: `
                    Помечается, что данное событие является ключевым. 
                    В системе аналитики поставить фильтр по ключевым событиям
                    `,
                uk: `
                    Ключова подія позначена галочкою. 
                    У системі аналітики фільтрувати за ключовими подіями
                    `
            },
            hintClear: {
                en: "Delete the recent chat messages",
                ru: "Удалить из чата последние сообщения",
                uk: "Видалити з чату останні повідомлення"
            },
            hintScript: {
                en: "You can call various functions for slots operation. Chat with the bot from Help. You can read more on the page https://wiki.qudata.com/index.php?title=Qubot_Script",
                ru: "Можно вызвать различные функции по работе со слотами. Пообщайтесь с ботом из раздела Помощь. Подробнее Вы можете прочитать на странице https://wiki.qudata.com/index.php?title=Qubot_Script",
                uk: "Можливо викликати різні функції для роботи зі слотами. Поспілкуйтеся з ботом із розділу Допомога. Детальніше Ви можете прочитати на сторінці https://wiki.qudata.com/index.php?title=Qubot_Script"
            },
            hintComment: {
                en: "Here you can write an arbitrary comment in the actions",
                ru: "Здесь можно написать произвольный комментарий в действиях",
                uk: "Тут можна написати довільний коментар у діях"
            },
            hintInputNumberType: {
                en: "The type of the input number. The type can be integer (Integer, 1..N) or real (Double, 3.14).",
                ru: "Тип вводимого числа. Тип может быть целым (Integer, 1..N) или вещественным (Double, 3.14).",
                uk: "Тип числа, що вводиться. Тип може бути цілим (Integer, 1..N) або речовим (Double, 3.14)."
            },
            hintInputDateTimeFormat: {
                en: "The format of the input date.",
                ru: "Формат вводимой даты.",
                uk: "Формат дати, що вводиться."
            },
            hintInputDateTimeTime: {
                en: "Whether to request the time along with the date.",
                ru: "Запрашивать ли вместе с датой время.",
                uk: "Чи запитувати разом із датою час."
            },
            hintInputAI: {
                en: "Language model or trained model for communicating with the user",
                ru: "Языковая или обученная модель для общения с пользователем",
                uk: "Мовна модель або навчена модель для спілкування з користувачем"
            },
            hintInputAIModel: {
                en: "Model type. Each model is configured individually in the console.",
                ru: "Тип модели. Каждая модель настраивается индивидуально в консоли.",
                uk: "Тип моделі. Кожна модель налаштовується індивідуально у консолі."
            },
            hintInputAISystem: {
                en: 'System message for the bot. Describe the behavior of the model in detail. For example, "You are a QuData support bot...".',
                ru: 'Системное сообщения для бота. Подробно описывайте поведение модели. Например, "Ты бот-поддержки компании QuData...".',
                uk: 'Системне повідомлення для бота. Докладно описуйте поведінку моделі. Наприклад, "Ти бот-підтримки компанії QuData...".'
            },
            hintInputRange: {
                en: "The range of input values",
                ru: "Диапазон вводимых значений",
                uk: "Діапазон значень, що вводяться"
            },
            hintInputRangeFrom: {
                en: "Minimum number to be entered",
                ru: "Минимально вводимое число",
                uk: "Мінімальне число для введення"
            },
            hintInputRangeTo: {
                en: "Maximum number to be entered",
                ru: "Максимально вводимое число",
                uk: "Максимальне число для введення"
            },
            hintInputFileStorage: {
                en: "The storage where the file will be saved",
                ru: "Хранилище, в которое будет сохранён файл",
                uk: "Сховище, в яке буде збережено файл"
            },
            hintInputFileDropboxPath: {
                en: "The path where the downloaded file will be located, including the name",
                ru: "Путь, по которому будет располагаться загруженный файл, включая имя",
                uk: "Шлях, де буде розміщено завантажений файл, включаючи назву"
            },
            hintInputFileGoogleDriveFolderID: {
                en: "The ID of the folder to upload the file to",
                ru: "ID папки, в которую будет загружен файл",
                uk: "Ідентифікатор папки для завантаження файлу"
            },
            hintInputFileGoogleDriveFileName: {
                en: "The name that the file will be saved under",
                ru: "Имя файла, с которым файл будет сохранён",
                uk: "Назва файлу, під якою файл буде збережено"
            },
            hintInputPhoneMyPhone: {
                en: 'Text for "Submit my phone" button',
                ru: 'Текст для кнопки "Отправить мой телефон"',
                uk: 'Текст для кнопки "Надіслати мій телефон"'
            },
            hintInputLocationGetText: {
                en: 'Text for "Submit my location" button',
                ru: 'Текст для кнопки "Отправить мою геолокацию"',
                uk: 'Текст для кнопки "Надіслати мою геолокацію"'
            },
            errorIncorrentMediaURL: {
                en: "Invalid media URL. Please, use a link starting with https:// or ftp://",
                ru: "Неверная ссылка на медиаконтент. Пожалуйста используйте ссылку начинающуюся на https:// или ftp://",
                uk: "Неправильне посилання на медіаконтент. Будь ласка, використовуйте посилання, що починається з https:// або ftp://"
            },
            errorIncorrentImageURL: {
                en: "Invalid image link. Please use the link starting with https:// or ftp://",
                ru: "Неверная ссылка на изображение. Пожалуйста, используйте ссылку начинающуюся на https:// или ftp://",
                uk: "Неправильне посилання на зображення. Будь ласка, використовуйте посилання, що починається з https:// або ftp://"
            },
            errorImageNotAccess: {
                en: "Failed to access the image from the specified link",
                ru: "Не удалось получить доступ к изображению по указанной ссылке",
                uk: "Не вдалося отримати доступ до зображення за вказаним посиланням"
            },
            errorMediaNotAccess: {
                en: "Failed to access the media resource from the specified link",
                ru: "Не удалось получить доступ к медиа-ресурсу по указанной ссылке",
                uk: "Не вдалося отримати доступ до медіаресурсу за вказаним посиланням"
            },
            errorIncorrentSlotName: {
                en: "Invalid slot name. A slot name cannot start with a number.",
                ru: "Неверное имя слота. Имя слота не может начинатся с числа",
                uk: "Недійсна назва слота. Назва слота не може починатися з числа"
            },
            CreateCardFolder: {
                en: "Please enter folder name:",
                ru: "Введите название папки:",
                uk: "Введіть назву папки:"
            },
            RenameCardFolder: {
                en: "Please enter folder name:",
                ru: "Введите название папки:",
                uk: "Введіть назву папки:"
            },
            hint: {
                en: "",
                ru: "",
                uk: ""
            }
        }, this.modal = null;
    }
    get(nick) {
        nick = this.messages[nick];
        if (!nick) switch (this.helpLanguage) {
          case "uk":
            return "Щось дивне відбувається ...";

          case "ru":
            return "Что-то странное происходит ...";

          default:
            return "Something strange is happening ...";
        }
        return nick[this.helpLanguage];
    }
    alert(nick, dontShow = !1, savedKey = "isStartInfo") {
        var header, md;
        this.modal || (this.modal = this.add(this.editor.pageDiv, "qubot-modal"), 
        md = this.add(this.modal, "qubot-modal-window qudata-alert"), header = this.add(md, "qubot-modal-header"), 
        this.add(header, "qubot-modal-title", "span").innerHTML = "", header = this.add(md, "qubot-modal-content"), 
        md = this.add(header, "qubot-modal-block"), this.add(md, "", "p").innerHTML = this.get(nick), 
        dontShow || (md = this.add(header, "qubot-modal-block"), (nick = this.add(md, "bootstrap-btn bootstrap-btn-primary", "button")).innerHTML = "Ok", 
        nick.onclick = function() {
            this.modal.style.display = "none", this.modal.remove(), this.modal = null;
        }.bind(this)), dontShow && (md = this.add(header, "qubot-modal-footer"), 
        (nick = this.add(md, null, "input")).type = "checkbox", nick.onclick = function(obj) {
            (obj = (obj.path || obj.composedPath && obj.composedPath())[0]).checked ? "isStartInfo" === savedKey ? this.editor.onclickMenuOptions("start") : this.editor.help[savedKey] = !0 : this.editor.help[savedKey] = !1, 
            this.save();
        }.bind(this), this.add(md, "label").innerHTML = "don't show again"), close.onclick = function() {
            this.modal.style.display = "none", this.modal.remove(), this.modal = null;
        }.bind(this), window.onclick = function(event) {
            event.target == this.modal && (this.modal.style.display = "none", this.modal.remove(), 
            this.modal = null);
        }.bind(this));
    }
    startInfo(nick) {
        if (!this.modal) {
            this.modal = this.add(this.editor.pageDiv, "qubot-modal");
            var md = this.add(this.modal, "qubot-modal-window start-info"), header = this.add(md, "qubot-modal-header"), header = (this.add(header, "qubot-modal-title", "span").innerHTML = this.editor.locale.get("StartInfo") + "...", 
            this.add(header, "qubot-modal-close", "span")), md = (header.innerHTML = "&times;", 
            this.add(md, "qubot-modal-content")), cont = this.add(md, "qubot-modal-block"), cont = (this.add(cont, "", "p").innerHTML = this.get(nick), 
            this.add(md, "qubot-modal-footer")), nick = this.add(cont, "qudata-checkbox", "input");
            nick.type = "checkbox", nick.setAttribute("id", "qubot-dont-show-start"), 
            nick.setAttribute("name", "qubot-dont-show-start");
            let lbl = this.add(cont, "qudata-checkbox small", "label");
            lbl.setAttribute("for", "qubot-dont-show-start"), (lbl = this.add(cont, "", "label")).innerHTML = this.editor.locale.get("Don't show again").toLowerCase(), 
            lbl.setAttribute("for", "qubot-dont-show-start"), nick.onclick = function(obj) {
                this.editor.onclickMenuOptions("start");
            }.bind(this), header.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null;
            }.bind(this), window.onclick = function(event) {
                event.target == this.modal && (this.modal.style.display = "none", 
                this.modal.remove(), this.modal = null);
            }.bind(this);
        }
    }
    confirm(nick) {
        return this.nick = nick, new Promise(function(resolve) {
            var nick = this.nick, md = (this.modal = this.add(this.editor.pageDiv, "qubot-modal"), 
            this.add(this.modal, "qubot-modal-window qudata-alert")), header = this.add(md, "qubot-modal-header"), header = (this.add(header, "qubot-modal-title", "span").innerHTML = "", 
            this.add(md, "qubot-modal-content")), cont = this.add(header, "qubot-modal-block"), cont = (this.add(cont, "", "p").innerHTML = this.get(nick), 
            this.add(header, "qubot-modal-block")), nick = this.add(cont, "bootstrap-btn bootstrap-btn-primary", "button"), header = (nick.innerHTML = "Yes", 
            this.add(cont, "bootstrap-btn bootstrap-btn-secondary", "button"));
            header.innerHTML = "Cancel", md.style.display = "block", nick.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(1);
            }.bind(this), header.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this), close.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this);
        }.bind(this));
    }
    delConfirm(nick) {
        return this.nick = nick, new Promise(function(resolve) {
            var nick = this.nick, md = (this.modal = this.add(this.editor.pageDiv, "qubot-modal"), 
            this.add(this.modal, "qubot-modal-window qudata-alert")), header = this.add(md, "qubot-modal-header"), header = (this.add(header, "qubot-modal-title", "span").innerHTML = "", 
            this.add(md, "qubot-modal-content")), cont = this.add(header, "qubot-modal-block"), cont = (this.add(cont, "", "p").innerHTML = this.get(nick), 
            this.add(header, "qubot-modal-block")), nick = this.add(cont, "bootstrap-btn bootstrap-btn-danger", "button"), header = (nick.innerHTML = this.editor.locale.get("Delete"), 
            this.add(cont, "bootstrap-btn bootstrap-btn-secondary", "button"));
            header.innerHTML = this.editor.locale.get("Cancel"), md.style.display = "block", 
            nick.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(1);
            }.bind(this), header.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this), close.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this);
        }.bind(this));
    }
    async getText(nick, value = "") {
        return this.nick = nick, new Promise(function(resolve) {
            var nick = this.nick, md = (this.modal = this.add(this.editor.pageDiv, "qubot-modal"), 
            this.add(this.modal, "qubot-modal-window qudata-alert no-borders")), header = this.add(md, "qubot-modal-header"), nick = (this.add(header, "qubot-modal-title", "span").innerHTML = this.get(nick), 
            this.add(header, "qubot-modal-close", "span")), header = (nick.innerHTML = "&times;", 
            this.add(md, "qubot-modal-content")), cont = this.add(header, "qubot-modal-block");
            let input = this.add(cont, "qudata-form-control", "input");
            input.setAttribute("placeholder", this.editor.locale.get("Enter text here...")), 
            input.value = value;
            cont = this.add(header, "qubot-modal-block"), header = this.add(cont, "bootstrap-btn bootstrap-btn-primary", "button"), 
            header.innerHTML = this.editor.locale.get("Ok"), cont = this.add(cont, "bootstrap-btn bootstrap-btn-secondary", "button");
            cont.innerHTML = this.editor.locale.get("Cancel"), md.style.display = "block", 
            header.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(input.value);
            }.bind(this), cont.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this), nick.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this);
        }.bind(this));
    }
    showHint(obj, nick) {
        if (!this.hint && this.isHint) {
            this.hint = this.add(document.body, "qubot-hint");
            var text = this.add(this.hint, "", "p"), nick = (text.innerHTML = this.get(nick), 
            this.hint.style.display = "block", obj.getBoundingClientRect()), obj = text.getBoundingClientRect();
            let top = nick.top;
            nick.top + obj.height + 50 > document.documentElement.clientHeight && (top -= nick.top + obj.height - document.documentElement.clientHeight + 50), 
            this.hint.style.left = nick.right + 100 + window.scrollX + "px", this.hint.style.top = top + 0 + window.scrollY + "px";
        }
    }
    hideHint() {
        this.hint && (this.hint.style.display = "none", this.hint.remove(), this.hint = null);
    }
    loadFile(nick, wndTitle = "Upload file", btnOkText = "Upload", acceptExt = "") {
        if (!this.modal) return this.nick = nick, new Promise(function(resolve) {
            var nick = this.nick, md = (this.modal = this.add(this.editor.pageDiv, "qubot-modal"), 
            this.modal.ttt = 1, this.add(this.modal, "qubot-modal-window")), header = this.add(md, "qubot-modal-header"), header = (this.add(header, "qubot-modal-title", "span").innerHTML = this.editor.locale.get(wndTitle), 
            this.add(header, "qubot-modal-close", "span")), md = (header.innerHTML = "&times;", 
            this.inputFiles = null, this.add(md, "qubot-modal-content")), cont = (md.addEventListener("dragover", event => {
                event.stopPropagation(), event.preventDefault(), event.dataTransfer.dropEffect = "copy";
            }), md.addEventListener("drop", event => {
                event.stopPropagation(), event.preventDefault(), this.inputFiles = event.dataTransfer.files, 
                this.inputFiles.length && (this.inputFileLbl.innerHTML = this.inputFiles[0].name), 
                btnOk.disabled = !1;
            }), this.add(md, "qubot-modal-block")), nick = (this.add(cont, "", "p").innerHTML = this.get(nick), 
            cont = this.add(md, "qubot-modal-block"), this.add(cont, "qubot-import-input", "label")), nick = (this.inputFileLbl = this.add(nick, ""), 
            this.inputFileLbl.innerHTML = this.editor.locale.get("Select or drag a file"), 
            nick.setAttribute("for", "upload-file-JSON"), this.add(nick, "qubot-icon-upload"), 
            this.inputFile = this.add(cont, "qubot-import-drop-area", "input"), 
            this.inputFile.style.display = "none", this.inputFile.type = "file", 
            0 < acceptExt.length && this.inputFile.setAttribute("accept", acceptExt), 
            this.inputFile.id = "upload-file-JSON", this.inputFile.onchange = function(ev) {
                this.inputFile.files.length && (this.inputFileLbl.innerHTML = this.inputFile.files[0].name, 
                this.inputFiles = this.inputFile.files, btnOk.disabled = !1);
            }.bind(this), this.add(md, "qubot-modal-block")), cont = this.add(nick, "bootstrap-btn bootstrap-btn-secondary", "button");
            cont.innerHTML = this.editor.locale.get("Cancel");
            let btnOk = this.add(nick, "bootstrap-btn bootstrap-btn-primary", "button");
            btnOk.innerHTML = this.editor.locale.get(btnOkText), btnOk.disabled = !0, 
            btnOk.onclick = function() {
                var reader;
                this.inputFiles && (this.modal.style.display = "none", this.modal.remove(), 
                this.modal = null, (reader = new FileReader()).addEventListener("load", event => {
                    this.inputFileContent = event.target.result, resolve(this.inputFiles[0]);
                }), this.inputFileType = this.inputFiles[0].type, this.inputFileName = this.inputFiles[0].name, 
                this.inputFileName.toLowerCase().endsWith(".json") ? reader.readAsText(this.inputFiles[0]) : reader.readAsArrayBuffer(this.inputFiles[0]));
            }.bind(this), cont.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this), header.onclick = function() {
                this.modal.style.display = "none", this.modal.remove(), this.modal = null, 
                resolve(0);
            }.bind(this);
        }.bind(this));
    }
    save() {
        this.editor.env.save({
            param: "qubotEditorHelp",
            data: JSON.stringify({
                isHint: this.isHint,
                isStartInfo: this.isStartInfo,
                isOffline: this.isOffline,
                isGrid: this.isGrid
            })
        });
    }
    async load() {
        this.editor.env.load({
            param: "qubotEditorHelp"
        }).then(data => {
            data && ("isHint" in data && (this.isHint = data.isHint), "isOffline" in data && (this.isOffline = data.isOffline), 
            "isStartInfo" in data && (this.isStartInfo = data.isStartInfo), "isGrid" in data) && (this.isGrid = data.isGrid);
        }).catch(error => {
            throw this.editor.critical("load help error", error), new Error("load bots error");
        });
    }
}

class QuBotEditorLocale extends QuBotEditorBase {
    constructor(editor) {
        super(editor), this.isOffline = "wp" == editor.env.type, this.strings = {
            "Click to show actions when entering text": {
                en: "Click to show actions when entering text",
                ru: "Нажмите, чтоб показать действия при введении текста",
                uk: "Натисніть, щоб показати дії під час введення тексту"
            },
            "Board of states:": {
                en: "Board of states:",
                ru: "Доска состояний:",
                uk: "Дошка станів:"
            },
            "List of states:": {
                en: "List of steps:",
                ru: "Рабочее поле:",
                uk: "Робочий простір:"
            },
            "Item properties:": {
                en: "Item properties:",
                ru: "Свойства элемента:",
                uk: "Властивості елемента:"
            },
            "Current step:": {
                en: "Current step:",
                ru: "Текущий шаг:",
                uk: "Поточний крок:"
            },
            "Shift+": {
                en: "Shift+",
                ru: "Увеличить",
                uk: "Збільшити"
            },
            "Shift-": {
                en: "Shift-",
                ru: "Уменьшить",
                uk: "Зменшити"
            },
            AddStep: {
                en: "Add step",
                ru: "Добавить шаг",
                uk: "Додати крок"
            },
            AddFolder: {
                en: "Add folder",
                ru: "Добавить папку",
                uk: "Додати папку"
            },
            Paste: {
                en: "Paste",
                ru: "Вставить",
                uk: "Вставити"
            },
            PasteFolder: {
                en: "Paste folder",
                ru: "Вставить папку",
                uk: "Вставити папку"
            },
            Copy: {
                en: "Copy",
                ru: "Копировать",
                uk: "Копіювати"
            },
            CopyFolder: {
                en: "Copy folder",
                ru: "Копировать папку",
                uk: "Копіювати папку"
            },
            RenameFolder: {
                en: "Rename folder",
                ru: "Переименовать папку",
                uk: "Перейменувати папку"
            },
            DeleteFolder: {
                en: "Delete folder",
                ru: "Удалить папку",
                uk: "Видалити папку"
            },
            Delete: {
                en: "Delete",
                ru: "Удалить",
                uk: "Видалити"
            },
            Delete: {
                en: "Delete",
                ru: "Удалить",
                uk: "Видалити"
            },
            Increase: {
                en: "Increase",
                ru: "Увеличить",
                uk: "Збільшити"
            },
            Decrease: {
                en: "Decrease",
                ru: "Уменьшить",
                uk: "Зменшити"
            },
            Step: {
                en: "Step",
                ru: "Шаг",
                uk: "Крок"
            },
            Folder: {
                en: "Folder",
                ru: "Папка",
                uk: "Папка"
            },
            Template: {
                en: "Template",
                ru: "Шаблон",
                uk: "Шаблон"
            },
            Plugin: {
                en: "Plugin",
                ru: "Плагин",
                uk: "Плагін"
            },
            Cancel: {
                en: "Cancel",
                ru: "Отмена",
                uk: "Скасувати"
            },
            Ok: {
                en: "Ok",
                ru: "Подтвердить",
                uk: "Підтвердити"
            },
            MyBots: {
                en: "My Bots",
                ru: "Мои боты",
                uk: "Мої боти"
            },
            EditBot: {
                en: "Edit Bot",
                ru: "Править бота",
                uk: "Редагувати бота"
            },
            EditStep: {
                en: "Edit Step",
                ru: "Править шаг",
                uk: "Редагувати крок"
            },
            Templates: {
                en: "Templates",
                ru: "Шаблоны",
                uk: "Шаблони"
            },
            Examples: {
                en: "Examples",
                ru: "Примеры",
                uk: "Приклади"
            },
            Options: {
                en: "Options",
                ru: "Параметры",
                uk: "Параметри"
            },
            Help: {
                en: "Help",
                ru: "Помощь",
                uk: "Допомога"
            },
            New: {
                en: "New",
                ru: "Создать",
                uk: "Створити"
            },
            Clone: {
                en: "Clone",
                ru: "Клонировать",
                uk: "Клонувати"
            },
            Rename: {
                en: "Rename",
                ru: "Переименовать",
                uk: "Перейменувати"
            },
            Export: {
                en: "Export",
                ru: "Экспортировать",
                uk: "Експортувати"
            },
            Import: {
                en: "Import",
                ru: "Импортировать",
                uk: "Імпортувати"
            },
            "Import bot": {
                en: "Import bot",
                ru: "Импортировать бота",
                uk: "Імпортувати бота"
            },
            "Select or drag a file": {
                en: "Select or drag a file",
                ru: "Выберите или перетащите файл",
                uk: "Виберіть або перетягніть файл"
            },
            "Don't show again": {
                en: "Don't show again",
                ru: "Не показывать это окно",
                uk: "Більше не показувати"
            },
            Add: {
                en: "Add",
                ru: "Добавить",
                uk: "Додати"
            },
            YesNoStep: {
                en: "Yes/No step",
                ru: 'Шаг "Да/Нет"',
                uk: 'Крок "Так/Ні"'
            },
            ChangeLangStep: {
                en: "Change Language step",
                ru: "Шаг смены языка",
                uk: 'Крок "Зміна мови"'
            },
            Grid: {
                en: "Grid",
                ru: "Сетка",
                uk: "Сітка"
            },
            Free: {
                en: "Free",
                ru: "Произвольный",
                uk: "Довільний"
            },
            View: {
                en: "View",
                ru: "Вид",
                uk: "Перегляд"
            },
            StartInfo: {
                en: "Start info",
                ru: "Вводная информация",
                uk: "Вступна інформація"
            },
            Hints: {
                en: "Hints",
                ru: "Подсказки",
                uk: "Підказки"
            },
            FastMode: {
                en: "Fast mode",
                ru: "Быстрый режим",
                uk: "Швидкий режим"
            },
            ActiveStep: {
                en: "Active step",
                ru: "Шаг запуска",
                uk: "Крок запуску"
            },
            ActiveLang: {
                en: "Active language",
                ru: "Активация языка",
                uk: "Активація мови"
            },
            ServerMode: {
                en: "Server mode",
                ru: "Режим сервера",
                uk: "Режим серверу"
            },
            VAssistant: {
                en: "Virtual Assistant",
                ru: "Виртуальный ассистент",
                uk: "Віртуальний помічник"
            },
            Documentation: {
                en: "Documentation",
                ru: "Документация",
                uk: "Документація"
            },
            Documentation_link: {
                en: "https://wiki.qudata.com/index.php?title=Bot_Editor_Overview",
                ru: "https://wiki.qudata.com/index.php?title=Bot_Editor_Overview/ru",
                uk: "https://wiki.qudata.com/index.php?title=Bot_Editor_Overview/ru"
            },
            "RUN BOT": {
                en: "RUN BOT",
                ru: "ЗАПУСТИТЬ",
                uk: "ЗАПУСТИТИ"
            },
            "Upload audio": {
                en: "Upload audio",
                ru: "Загрузить аудио",
                uk: "Завантажити аудіо"
            },
            "Upload video": {
                en: "Upload video",
                ru: "Загрузить видео",
                uk: "Завантажити відео"
            },
            "Upload image": {
                en: "Upload image",
                ru: "Загрузить картинку",
                uk: "Завантажити картинку"
            },
            Upload: {
                en: "Upload",
                ru: "Загрузить",
                uk: "Завантажити"
            },
            tuto1: {
                en: "The editor allows you to test your bot functionality and the modifications made by starting a chat with the bot. Click the RUN BOT button to launch the chat and debug window.",
                ru: "В редакторе Вы можете протестировать работу вашего бота и внесенные изменения, запустив чат с ботом. Нажмите кнопку ЗАПУСТИТЬ, чтобы запустить чат и окно настроек.",
                uk: "В редакторі Ви можете протестувати роботу вашого бота та внесені зміни, запустивши чат з ботом. Натисніть кнопку ЗАПУСТИТИ, щоб запустити чат та вікно налаштувань."
            },
            tuto2: {
                en: "You can also start a chat with the bot without debugging by simply clicking on the chat icon.",
                ru: "Вы также можете начать чат с ботом без отладки, просто нажав на значок чата.",
                uk: "Також Ви можете запустити чат з ботом без налаштувань, натиснувши відразу на іконку чату."
            },
            "Enter text here...": {
                en: "Enter text here...",
                ru: "Вводите текст сюда...",
                uk: "Введіть сюди текст..."
            },
            "system-help": {
                en: "Virtual Assistant",
                ru: "Виртуальный помощник",
                uk: "Віртуальний помічник"
            }
        };
        let wpLang = document.documentElement.lang;
        this.isOffline && wpLang && (editor = wpLang.indexOf("-"), (wpLang = -1 < editor ? wpLang.substring(0, editor) : wpLang) in {
            en: "",
            uk: "",
            ua: "",
            ru: ""
        }) ? this.helpLanguage = wpLang : this.helpLanguage = this.LANGUAGE || "en";
    }
    get(nick) {
        nick = this.strings[nick];
        if (!nick) switch (this.helpLanguage) {
          case "uk":
            return "Щось дивне відбувається ...";

          case "ru":
            return "Что-то странное происходит ...";

          default:
            return "Something strange is happening ...";
        }
        return nick[this.helpLanguage];
    }
}

class QuBotCard {
    constructor(elem, posFree, posGrid) {
        this.posFree = posFree, this.posGrid = posGrid, this.elem = elem, this.folder = null;
    }
    type() {
        throw new Error("You have to implement the method type!");
    }
    center() {
        var cardRect = this.elem.getBoundingClientRect();
        return {
            x: (cardRect.left + cardRect.right) / 2,
            y: (cardRect.top + cardRect.bottom) / 2
        };
    }
    centerLocal() {
        var cardRect = this.elem.getBoundingClientRect();
        return {
            x: (cardRect.right - cardRect.left) / 2,
            y: (cardRect.bottom - cardRect.top) / 2
        };
    }
    rect() {
        return this.elem.getBoundingClientRect();
    }
    rectLocal(scale = 1) {
        var cardRect = this.elem.getBoundingClientRect(), parentRect = this.elem.parentElement.getBoundingClientRect();
        return {
            left: (cardRect.left - parentRect.left) / scale,
            top: (cardRect.top - parentRect.top) / scale,
            width: cardRect.width / scale,
            height: cardRect.height / scale
        };
    }
    pos() {
        var cardRect = this.elem.getBoundingClientRect();
        return {
            x: cardRect.left,
            y: cardRect.top
        };
    }
    posLocal() {
        var cardRect = this.elem.getBoundingClientRect(), parentRect = this.elem.parentElement.getBoundingClientRect();
        return {
            x: cardRect.left - parentRect.left,
            y: cardRect.top - parentRect.top
        };
    }
    visible() {
        return !this.folder || !!this.folder.open && this.folder.visible;
    }
    visibleFolder() {
        var folders = [];
        let card = this;
        for (;card.folder; ) folders.push(card.folder), card = card.folder;
        for (card = this; folders.length; ) {
            var newCard = folders.pop();
            if (!newCard.visible()) return card;
            card = newCard;
        }
        return card;
    }
    setFolder(folderCard) {
        this.folder = folderCard;
    }
    toString() {
        return this.folder ? this.folder.toString() + "_" + this.kind : this.kind;
    }
}

class QuBotCardAdd extends QuBotCard {
    constructor(elem, posFree, posGrid) {
        super(elem, posFree, posGrid), this.kind = "add";
    }
    type() {
        return "add";
    }
    toString() {
        return this.folder ? this.folder.toString() + "_" + this.kind : this.kind;
    }
}

class QuBotCardState extends QuBotCard {
    constructor(state, elem, posFree, posGrid) {
        super(elem, posFree, posGrid), this.state = state, this.kind = "state";
    }
    type() {
        return "state";
    }
    toString() {
        return this.folder ? this.folder.toString() + "_" + this.kind + "_" + this.state : this.kind + "_" + this.state;
    }
}

class QuBotCardFolder extends QuBotCard {
    constructor(name, elem, posFree, posGrid, openFree, openGrid) {
        super(elem, posFree, posGrid), this.name = name, this.kind = "folder", this.open = !1, 
        this.folder = null, this.openFree = openFree, this.openGrid = openGrid;
    }
    type() {
        return "folder";
    }
    toString() {
        return this.folder ? this.folder.toString() + "_" + this.kind + "_" + this.name : this.kind + "_" + this.name;
    }
}

class QuBotCards {
    constructor() {
        this.cards = {
            state: [],
            add: [],
            folder: []
        };
    }
    pushStateCard(state, cardElement, posFree = null, posGrid = null) {
        state = new QuBotCardState(state, cardElement, posFree, posGrid);
        return this.cards.state.push(state), state;
    }
    pushAddCard(cardElement, posFree = null, posGrid = null) {
        cardElement = new QuBotCardAdd(cardElement, posFree, posGrid);
        return this.cards.add.push(cardElement), cardElement;
    }
    pushFolderCard(name, cardElement, posFree = null, posGrid = null, openFree = null, openGrid = null) {
        name = new QuBotCardFolder(name, cardElement, posFree, posGrid, openFree, openGrid);
        return this.cards.folder.push(name), name;
    }
    popCard(card) {
        this.cards[card.kind] = this.cards[card.kind].filter(function(value) {
            return value != card;
        });
    }
    getStateCards() {
        return this.cards.state;
    }
    getFolderCards() {
        return this.cards.folder;
    }
    getContentCards() {
        return this.cards.state.concat(this.cards.folder);
    }
    getAllCardsWithRow(r) {
        return this.getAllCards().filter(function(card) {
            return card.posGrid.r == r;
        });
    }
    getAddCards() {
        return this.cards.add;
    }
    getAllCards() {
        let cards = [];
        for (var kind in this.cards) cards = cards.concat(this.cards[kind]);
        return cards;
    }
    getCardsFromFolder(folderCard) {
        return this.getAllCards().filter(function(card) {
            return card.folder == folderCard;
        });
    }
    getContentCardsFromFolder(folderCard) {
        return this.getContentCards().filter(function(card) {
            return card.folder == folderCard;
        });
    }
    findCardByElement(elem) {
        return this.getAllCards().find(function(card) {
            return card.elem == elem;
        });
    }
    findCardByState(state) {
        return this.cards.state.find(function(card) {
            return card.state == state;
        });
    }
    findFolderByName(name) {
        return this.cards.folder.find(function(card) {
            return card.name == name;
        });
    }
    findCardByColRow(c, r) {
        return this.getAllCards().find(function(card) {
            return card.posGrid && card.posGrid.c == c && card.posGrid.r == r;
        });
    }
    rectLocal(cards, scale) {
        let minX = null, minY = null, maxX = null, maxY = null;
        return cards.forEach(card => {
            card = card.rectLocal(scale);
            minX = null == minX || card.left < minX ? card.left : minX, minY = null == minY || card.top < minY ? card.top : minY, 
            maxX = null == maxX || card.left + card.width > maxX ? card.left + card.width : maxX, 
            maxY = null == maxY || card.top + card.height > maxY ? card.top + card.height : maxY;
        }), {
            left: minX,
            top: minY,
            width: maxX - minX,
            height: maxY - minY
        };
    }
    clear() {
        this.cards = {
            state: [],
            add: [],
            folder: []
        };
    }
    nearest(card) {
        var cards = this.getAllCards();
        return this.nearestInList(card, cards);
    }
    nearestInList(card, cards) {
        var cardPos = card.posLocal();
        let dist = -1, nearest = null;
        for (let i = 0; i < cards.length; i++) {
            var cardOtherPos, cardOther = cards[i];
            cardOther != card && cardOther.visible() && (cardOtherPos = cardOther.posLocal(), 
            cardOtherPos = Math.pow(cardPos.x - cardOtherPos.x, 2) + Math.pow(cardPos.y - cardOtherPos.y, 2), 
            dist < 0 || cardOtherPos < dist) && (dist = cardOtherPos, nearest = cardOther);
        }
        return nearest;
    }
}

class QuBotEditorSVG {
    constructor() {
        this.svg = null, this.svgColor = "blue", this.svgSpline = !1, this.scale = 1, 
        this.posX = 0, this.posY = 0;
    }
    create() {
        this.svg = document.getElementById("qubot-svg-drawing"), this.posX = 0, 
        this.posY = 0, this.scale = 1;
    }
    clear() {
        if (this.svg) for (;1 < this.svg.childElementCount; ) this.svg.lastChild.remove();
    }
    drawPathArrow(path, color, alpha = 1) {
        var fig = document.createElementNS("http://www.w3.org/2000/svg", "path");
        fig.setAttribute("d", path), fig.style.stroke = color, fig.style.strokeWidth = "2px", 
        fig.style.strokeOpacity = alpha, fig.style.fill = "transparent", fig.style.markerEnd = "url(#qubot-arrow-" + color + ")", 
        fig.style.markerStart = "url(#qubot-circle-" + color + ")", fig.classList.add("qubot-svg-shadow"), 
        this.svg.appendChild(fig);
    }
    drawPathPoint(path, color, alpha = 0) {
        var fig = document.createElementNS("http://www.w3.org/2000/svg", "path");
        fig.setAttribute("d", path), fig.style.stroke = color, fig.style.strokeWidth = "2px", 
        fig.style.strokeOpacity = "0", fig.style.fill = "transparent", fig.style.markerEnd = "none", 
        fig.style.markerStart = "url(#qubot-big-circle-" + color + ")", fig.classList.add("qubot-svg-shadow"), 
        this.svg.appendChild(fig);
    }
    drawPath(path, color) {
        var fig = document.createElementNS("http://www.w3.org/2000/svg", "path");
        fig.setAttribute("d", path), fig.style.stroke = color, fig.style.strokeWidth = "2px", 
        fig.style.fill = "transparent", this.svg.appendChild(fig);
    }
    drawSpline(cx1, cy1, w1, h1, cx2, cy2, w2, h2, scale = 0, color = "gray", alpha = 1) {
        let curve = .5, px1 = cx1, py1, sx1, sy1, px2, py2 = cy2, sx2, sy2;
        px2 = Math.abs(cx1 - cx2) < w1 / 8 ? (px1 = cx1 + w1, cx2 + w2 + 2) : cx1 + w1 < cx2 - w2 ? (px1 = cx1 + w1, 
        cx2 - w2 - 2) : cx2 + w2 < cx1 - w1 ? (px1 = cx1 - w1, cx2 + w2 + 2) : cx2 + w2 < cx1 + w1 ? (px1 = cx1 + w1, 
        cx2 + w2 + 2) : cx1 - w1 < cx2 - w2 ? (px1 = cx1 - w1, cx2 - w2 - 2) : (px1 = cx1 - w1, 
        cx2 + w2 + 2), py1 = cy1, (curve *= Math.abs(px1 - px2)) < 20 && (curve = 20), 
        sx1 = px1 + Math.sign(px1 - cx1) * curve, sy1 = py1, sy2 = py2, sx2 = px2 + Math.sign(px2 - cx2) * curve;
        cy2 = "M" + Math.round(px1) + "," + Math.round(py1) + " C " + Math.round(sx1) + "," + Math.round(sy1) + " " + Math.round(sx2) + "," + Math.round(sy2) + " " + Math.round(px2) + "," + Math.round(py2);
        this.drawPathArrow(cy2, color, alpha);
    }
    drawArrow(cx1, cy1, w1, h1, cx2, cy2, w2, h2, scale = 0, color = "blue", alpha = 1) {
        let px2, py2 = cy2;
        px2 = cx1 + w1 < cx2 - w2 ? cx2 - w2 + 10 : cx2 + w2 - 10, this.drawPathArrow("M " + cx1 + " " + (cy1 + h1) + " L " + px2 + " " + py2, color, alpha);
    }
    drawPoint(cx1, cy1, w1, h1, scale = 0, color = "blue", alpha = 1) {
        let px2, py2 = cy1;
        px2 = cx1 + w1 < cx1 - w1 ? cx1 - w1 + 10 : cx1 + w1 - 10, this.drawPathPoint("M " + cx1 + " " + (cy1 + h1) + " L " + px2 + " " + py2, color, alpha);
    }
    drawLines(points, color = "green") {
        let path = "";
        for (let i = 0; i < points.length; i++) path = (path += 0 == i ? "M " : " L ") + points[i].x + " " + points[i].y;
        this.drawPath(path, color);
    }
}

class QuBotEditorList extends QuBotEditorBase {
    constructor(cards, lists) {
        super(lists.editor), this.cardOpacity = "0.9", this.canvas = new QuBotEditorSVG(), 
        this.space = null, this.cards = cards, this.lists = lists, this.editor = lists.editor, 
        this.active = !1, this.activeFolder = null, this.savePosFlag = !1;
    }
    init() {
        this.savePosFlag = !0;
    }
    show() {
        this.active = !0;
    }
    hide() {
        this.active = !1;
    }
    placeCard(card) {
        this.active && ("add" == card.kind ? card.caption.onmousedown = this.mousedownCardAdd.bind(this) : "folder" == card.kind ? card.caption.onmousedown = this.mousedownCardFolder.bind(this) : card.caption.onmousedown = this.mousedownCardState.bind(this));
    }
    placeCardInFolder(card, folderCard, beforeCard = 0, afterCard) {
        card.setFolder(folderCard);
    }
    onResizeCardEvent(card) {
        this.showArrows();
    }
    findCardByState(state) {
        return this.cards.findCardByState(state);
    }
    findCardByElement(obj) {
        return this.cards.findCardByElement(obj);
    }
    clear() {
        this.canvas.clear(), this.cards.clear();
    }
    create() {
        this.space = document.getElementById("qubot-state-space"), this.canvas.create();
        var title = document.getElementById("qubot-list_state-title");
        title && (title.innerHTML = this.editor.locale.get("List of states:"));
    }
    spaceOnclickHandler(e) {
        let items = [ "qubot-ctx-menu-btn-incr", "qubot-ctx-menu-btn-decr" ], path = e.path || e.composedPath();
        for (let i = 0; i < path.length; i++) if (-1 < items.findIndex(item => item === path[i].id)) return;
        e = document.getElementById("qubot-ctx-menu");
        if (e && e.remove(), items = document.querySelectorAll(".qubot-control-panel")) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
    }
    contextMenuHandler(e, cardElem) {
        e.preventDefault(), e.target.click();
        var oldCtxMenu = document.getElementById("qubot-ctx-menu"), oldCtxMenu = (oldCtxMenu && oldCtxMenu.remove(), 
        document.createElement("div"));
        oldCtxMenu.classList.add("qubot-ctx-menu"), oldCtxMenu.setAttribute("id", "qubot-ctx-menu"), 
        oldCtxMenu.style.left = e.clientX + "px", oldCtxMenu.style.top = e.clientY + "px", 
        document.body.append(oldCtxMenu);
        let btn = this.addCtxButton(this.editor.locale.get("AddStep"), null, "addStep");
        this.addCtxButton(this.editor.locale.get("AddFolder"), null, "addFolder"), 
        oldCtxMenu.innerHTML += "<hr>", (btn = this.addCtxButton(this.editor.locale.get("Paste"), null, "paste")).setAttribute("for", cardElem), 
        btn.setAttribute("x", e.layerX), btn.setAttribute("y", e.layerY), this.addCtxButton(this.editor.locale.get("PasteFolder"), null, "pasteFolder"), 
        "qubot-state" === cardElem || "qubot-folder" === cardElem ? ("qubot-folder" === cardElem ? this.addCtxButton(this.editor.locale.get("CopyFolder"), null, "copyFolder") : this.addCtxButton(this.editor.locale.get("Copy"), null, "copy"), 
        oldCtxMenu.innerHTML += "<hr>", this.addCtxButton(this.editor.locale.get("Delete"), null, "delete")) : (oldCtxMenu.innerHTML += "<hr>", 
        (btn = this.addCtxButton(this.editor.locale.get("Increase"), null, "incr")).setAttribute("x", e.layerX), 
        btn.setAttribute("y", e.layerY), (btn = this.addCtxButton(this.editor.locale.get("Decrease"), null, "decr")).setAttribute("x", e.layerX), 
        btn.setAttribute("y", e.layerY)), oldCtxMenu.innerHTML += "<hr>", this.addCtxButton(this.editor.locale.get("Cancel"), null, "cancel");
        var subCtxMenu = document.getElementById("qubot-subctx-menu");
        subCtxMenu.style.left = parseInt(oldCtxMenu.style.left) + oldCtxMenu.offsetWidth - 1 + "px", 
        e.clientX + oldCtxMenu.offsetWidth > window.innerWidth && (oldCtxMenu.style.left = e.clientX - oldCtxMenu.offsetWidth + "px", 
        subCtxMenu.style.left = parseInt(oldCtxMenu.style.left) - 107 + 1 + "px"), 
        e.clientX + oldCtxMenu.offsetWidth + 107 > window.innerWidth && (subCtxMenu.style.left = parseInt(oldCtxMenu.style.left) - 107 + 1 + "px"), 
        e.clientY + oldCtxMenu.offsetHeight > window.innerHeight && (oldCtxMenu.style.top = e.clientY - oldCtxMenu.offsetHeight + "px"), 
        this.addCtxMenuListeners(cardElem);
    }
    addCtxMenuListeners(item) {
        var arrBtn = [ ...document.getElementById("qubot-ctx-menu").getElementsByTagName("button") ];
        for (let i = 0; i < arrBtn.length; i++) "qubot-ctx-menu-btn-addFolder" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.createCardFolder();
        }), "qubot-ctx-menu-btn-paste" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.pasteStep({
                x: e.currentTarget.getAttribute("x"),
                y: e.currentTarget.getAttribute("y")
            }, e.currentTarget.getAttribute("for"));
        }), "qubot-ctx-menu-btn-copy" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.copyStep();
        }), "qubot-ctx-menu-btn-pasteFolder" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.pasteCardFolder();
        }), "qubot-ctx-menu-btn-copyFolder" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.copyCardFolder();
        }), "qubot-ctx-menu-btn-incr" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            e = {
                x: parseInt(e.currentTarget.getAttribute("x")),
                y: parseInt(e.currentTarget.getAttribute("y"))
            };
            this.editor.listEditor.zoomIn(1.1, e);
        }), "qubot-ctx-menu-btn-decr" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            e = {
                x: parseInt(e.currentTarget.getAttribute("x")),
                y: parseInt(e.currentTarget.getAttribute("y"))
            };
            this.editor.listEditor.zoomOut(.9, e);
        }), "qubot-ctx-menu-btn-step" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            this.spaceOnclickHandler(e), this.editor.listEditor.onclickBtnAddCard();
        }), "qubot-ctx-menu-btn-template" === arrBtn[i].id && arrBtn[i].addEventListener("click", () => {
            console.log("template");
        }), "qubot-ctx-menu-btn-plugin" === arrBtn[i].id && arrBtn[i].addEventListener("click", () => {
            console.log("plugin");
        }), "qubot-ctx-menu-btn-cancel" === arrBtn[i].id && arrBtn[i].addEventListener("click", this.spaceOnclickHandler), 
        "qubot-ctx-menu-btn-delete" === arrBtn[i].id && arrBtn[i].addEventListener("click", e => {
            "qubot-state" === item && this.editor.listEditor.onclickBtnDelCard(document.getElementById("qubot-state-" + this.editor.bot.state).querySelector(".qubot-btn")), 
            "qubot-folder" === item && this.editor.listEditor.onclickBtnDelCardFolder(this.activeFolder.elem.querySelector(".qubot-btn")), 
            this.spaceOnclickHandler(e);
        });
    }
    addCtxButton(text, subParent, id) {
        var ctxMenu = document.getElementById("qubot-ctx-menu"), btn = document.createElement("button"), btnText = document.createElement("span"), text = (btnText.innerHTML = text, 
        btn.classList.add("qubot-flex-line"), document.createElement("div"));
        return text.classList.add("qubot-ctx-menu-svg"), text.setAttribute("id", "qubot-ctx-menu-svg-" + id), 
        btn.setAttribute("id", "qubot-ctx-menu-btn-" + id), "cancel" !== id && btn.append(text), 
        btn.append(btnText), (subParent || ctxMenu).append(btn), "addStep" === id && (btn.classList.add("qubot-ctx-dropdown"), 
        (text = document.createElement("div")).classList.add("qubot-ctx-dropdown-content"), 
        text.setAttribute("id", "qubot-subctx-menu"), ctxMenu.append(text), this.addCtxButton(this.editor.locale.get("Step"), text, "step"), 
        this.addCtxButton(this.editor.locale.get("Template"), text, "template"), 
        this.addCtxButton(this.editor.locale.get("Plugin"), text, "plugin")), btn;
    }
    createCardState(state, kind, save = null) {
        null == state && (state = this.editor.newStateName(), this.createEmptyState(state, kind));
        var kind = this.add(this.space, "qubot-state"), content = (kind.id = "qubot-state-" + state, 
        kind.contentEditable = !1, kind.classList.add("qubot-disable-select"), kind.addEventListener("contextmenu", e => {
            this.contextMenuHandler(e, "qubot-state");
        }, !0), this.add(kind, "qubot-content"));
        let editor = this.editor;
        content.onclick = function() {
            editor.listEditor.onclickCard(this.parentNode);
        };
        var content = this.add(kind, "qubot-caption"), btnAdd = (content.innerHTML = state, 
        content.classList.add("qubot-disable-select"), this.add(kind, "label-start"), 
        this.openCardState(state, kind), this.addBtnDel(kind, function() {
            editor.listEditor.onclickBtnDelCard(this);
        }, -3, -3), this.addBtnAdd(kind, function() {
            editor.listEditor.onclickBtnAddCard(this);
        }, !1, !1, -5, -3));
        kind.onmouseover = function() {
            editor.listEditor.mouseoverCard(this);
        }, kind.onmouseenter = function() {
            editor.listEditor.mouseenterCardState(this);
        };
        let card;
        save ? (card = this.cards.pushStateCard(state, kind, {
            x: save.x,
            y: save.y
        }, {
            c: save.c,
            r: save.r
        })).setFolder(this.cards.findFolderByName(save.folder)) : card = this.cards.pushStateCard(state, kind), 
        card.btnAdd = btnAdd, card.caption = content;
        save = document.querySelectorAll(".qubot-state");
        return 1 == save.length ? save[0].classList.add("one-state") : (state = document.querySelector(".qubot-state.one-state")) && state.classList.remove("one-state"), 
        card;
    }
    createCardAdd() {
        var cardElem = this.add(this.space, "qubot-add-state");
        let editor = this.editor;
        cardElem.id = "qubot-add-state", cardElem.onclick = function() {
            editor.listEditor.onclickCardAdd(this);
        }, cardElem.onmouseover = function() {
            editor.listEditor.mouseoverCard(this);
        };
        var caption = this.add(cardElem, "qubot-caption"), caption = (caption.innerHTML = "Drag me or click", 
        caption.classList.add("qubot-disable-select"), this.add(cardElem, "qubot-content")), caption = (this.add(caption, "qubot-icon-add-state"), 
        this.cards.pushAddCard(cardElem, null, null));
        return caption;
    }
    async createCardFolder(name = null, save = null) {
        var folders = this.cards.getFolderCards().length;
        let editor = this.editor;
        if (name || (name = "New folder", 0 < folders && (name += "_" + (folders + 1)), 
        null != (name = await this.editor.help.getText("CreateCardFolder")) && "" != name)) {
            var folders = this.add(this.space, "qubot-folder"), caption = (folders.id = "qubot-folder", 
            folders.classList.add("qubot-disable-select"), folders.addEventListener("contextmenu", e => {
                this.contextMenuHandler(e, "qubot-folder");
            }, !0), this.add(folders, "qubot-caption")), content = (caption.innerHTML = name, 
            caption.classList.add("qubot-disable-select"), this.add(folders, "qubot-content")), icon = this.add(content, "qubot-icon-folder-closed");
            this.addBtnDel(folders, function() {
                editor.listEditor.onclickBtnDelCloseCardFolder(this);
            }), folders.onmouseover = function() {
                editor.listEditor.mouseoverCard(this);
            }, content.onmouseup = function(e) {
                editor.listEditor.onclickCardFolder(e, this.parentElement);
            };
            let card;
            (card = save ? this.cards.pushFolderCard(name, folders, {
                x: save.x,
                y: save.y
            }, {
                c: save.c,
                r: save.r
            }, save.openFree, save.openGrid) : this.cards.pushFolderCard(name, folders)).caption = caption, 
            card.icon = icon;
            content = this.editor.bot.state, save = this.cards.findCardByState(content);
            return save && this.lists.placeCardAfter(card, save), this.activeFolder = card;
        }
    }
    copyCardFolder() {
        var bot, folderDeps;
        this.activeFolder ? (bot = this.editor.bot, this.saveCards(), folderDeps = {
            states: {},
            cards: {
                states: {},
                folders: {}
            }
        }, this.collectDeps(bot, this.activeFolder, folderDeps), this.lists.clipboard.copyFolder = {
            name: this.activeFolder.name,
            deps: folderDeps
        }) : this.editor.help.alert("NoActiveFolder");
    }
    deepCopy(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    collectDeps(bot, card, save) {
        "folder" == card.kind ? (save.cards.folders[card.name] = this.deepCopy(bot.cards.folders[card.name]), 
        this.cards.getContentCardsFromFolder(this.activeFolder).forEach(card => {
            this.collectDeps(bot, card, save);
        })) : "state" == card.kind && (save.states[card.state] = this.deepCopy(bot.states[card.state]), 
        save.cards.states[card.state] = this.deepCopy(bot.cards.states[card.state]));
    }
    pasteCardFolder() {
        var folderRenames, state;
        this.lists.clipboard.copyFolder && (this.pasteBotPart(this.lists.clipboard.copyFolder.deps, {}, folderRenames = {}), 
        folderRenames = this.cards.findFolderByName(folderRenames[this.lists.clipboard.copyFolder.name])) && (state = this.editor.bot.state, 
        state = this.cards.findCardByState(state), this.lists.placeCardAfter(folderRenames, state));
    }
    pasteBotPart(part, stateRenames, folderRenames) {
        part = this.deepCopy(part), this.saveCards();
        var folderName, stateName, bot = this.editor.bot;
        for (folderName in this.collectRenames(stateRenames, part.states, bot.states), 
        this.collectRenames(folderRenames, part.cards.folders, bot.cards.folders), 
        part.cards.folders) {
            var folderSave = part.cards.folders[folderName];
            folderSave.openFree = folderSave.openGrid = !1, this.createCardFolder(folderRenames[folderName], folderSave);
        }
        for (stateName in part.states) {
            var stateItems = part.states[stateName];
            this.editor.stateEditor.items.getStates(stateItems).forEach(ss => {
                ss.state in stateRenames && ("state" in ss.action ? ss.action.state = stateRenames[ss.state] : "goto" in ss.action ? ss.action.goto = stateRenames[ss.state] : "run" in ss.action && (ss.action.run = stateRenames[ss.state]));
            });
        }
        for (let stateName in part.states) {
            var card, stateSave = part.states[stateName], stateSave = (bot.states[stateRenames[stateName]] = stateSave, 
            part.cards.states[stateName]);
            stateSave.folder ? (stateSave.folder = folderRenames[stateSave.folder], 
            (card = this.createCardState(stateRenames[stateName], null, stateSave)).visible() || this.hideCard(card)) : this.createCardState(stateRenames[stateName], null, stateSave);
        }
    }
    renameState(oldState, newState) {
        oldState = this.cards.findCardByState(oldState);
        oldState && (oldState.state = newState, oldState.elem.id = "qubot-state-" + newState, 
        oldState.elem.getElementsByClassName("qubot-caption")[0].innerHTML = newState), 
        this.save();
    }
    save() {
        this.saveCards(), this.editor.myBots.save();
    }
    saveCards() {
        let stateCardsSave = {}, folderCardsSave = {};
        this.cards.getContentCards().forEach(card => {
            var cardSave = {
                c: 0,
                r: 0,
                x: 0,
                y: 0
            };
            card.posGrid && (cardSave.c = card.posGrid.c, cardSave.r = card.posGrid.r), 
            card.posFree && (cardSave.x = card.posFree.x, cardSave.y = card.posFree.y), 
            card.folder && (cardSave.folder = card.folder.name), "state" == card.kind ? stateCardsSave[card.state] = cardSave : "folder" == card.kind && (folderCardsSave[card.name] = cardSave, 
            "grid" == this.kindView ? folderCardsSave[card.name].openGrid = card.open : folderCardsSave[card.name].openFree = card.open);
        });
        var bot = this.editor.bot;
        bot.view = this.kindView, bot.cards.states = stateCardsSave, bot.cards.folders = folderCardsSave;
    }
    collectRenames(renames, fromObj, toObj) {
        for (var field in fromObj) if (field in toObj) {
            var oldName = field;
            let newName, i = 1;
            for (;newName = oldName + "_" + i, i++, newName in toObj; );
            renames[oldName] = newName;
        } else renames[field] = field;
    }
    async renameCardFolder() {
        var oldName;
        this.activeFolder ? (oldName = this.activeFolder.name, null != (oldName = await this.editor.help.getText("RenameCardFolder", oldName)) && "" != oldName && (this.activeFolder.name = oldName, 
        this.activeFolder.caption.innerHTML = oldName, this.save())) : this.editor.help.alert("NoActiveFolder");
    }
    openCardCurState() {
        this.openCardState(this.editor.bot.state, document.getElementById("qubot-state-" + this.editor.bot.state));
    }
    openCardState(state, card) {
        let editor = this.editor;
        this.LANGUAGE = this.editor.stateEditor.LANGUAGE;
        let cond = .4875;
        let qubotSetup = localStorage.getItem("qubotSetup." + this.editor.bot.id), body = (qubotSetup && (qubotSetup = JSON.parse(qubotSetup), 
        cond = 195 / (qubotSetup.width.replace("px", "") - 50), Number(qubotSetup["footer-height"].replace("px", "")), 
        Number(qubotSetup["input-margin-y"].replace("px", ""))), card.getElementsByClassName("qubot-content")[0]);
        var messages = body.getElementsByClassName("qubot-message");
        if (void 0 !== messages) for (;0 < messages.length; ) messages[0].remove();
        var inputs = body.getElementsByClassName("item-input");
        if (void 0 !== inputs) for (;0 < inputs.length; ) inputs[0].remove();
        let message = null;
        var items = this.editor.bot.states[state];
        let kindInput = null, isInput = null, paramsInput = null;
        items.forEach(item => {
            if ("text" === item.type) {
                message = message || this.add(body, "qubot-message");
                let mes_padding = 5;
                qubotSetup && (mes_padding = qubotSetup["mes-padding"].replace("px", "")), 
                message.style.padding = mes_padding * cond + "px";
                var txt = this.add(message, "qubot-text");
                txt.classList.add("qubot-disable-select"), txt.innerHTML = this.getText(item.text, !0).replace(/\n/g, "<br>"), 
                void 0 !== item.color && (txt.style.color = item.color), item.center && (txt.style.textAlign = "center");
            } else if ("buttons" === item.type) message = message || this.add(body, "qubot-message"), 
            item.items.forEach(btn_row => {
                let row = this.add(message, "item-row");
                btn_row.items.forEach(btn => {
                    var button = this.add(row, "qubot-button"), text = this.getText(btn.button, !0).replace(/\n/g, "<br>");
                    switch (btn.params && btn.params.icon && this.add(button, "button-icon", "img").setAttribute("src", btn.params.icon), 
                    "check" === btn.kind ? button.innerHTML += "☐ " + text : "radio" === btn.kind ? button.innerHTML += "○ " + text : ("url" === btn.kind && btn.actions.length, 
                    button.innerHTML += text), btn.align) {
                      case "left":
                        button.style.textAlign = "left", button.style.justifyContent = "flex-start";
                        break;

                      case "right":
                        button.style.textAlign = "right", button.style.justifyContent = "flex-end";
                        break;

                      default:
                        button.style.textAlign = "", button.style.justifyContent = "";
                    }
                    button.classList.add("qubot-disable-select"), btn.params && btn.params.border && ("default" != btn.params.border.style && (button.style.borderStyle = btn.params.border.style), 
                    btn.params.border.size && (button.style.borderWidth = .5 * btn.params.border.size + "px"), 
                    btn.params.border.color) && (button.style.borderColor = btn.params.border.color);
                    let btn_margin = 3, btn_height = 30;
                    qubotSetup && (btn_margin = qubotSetup["button-margin"].replace("px", ""), 
                    btn_height = qubotSetup["button-height"].replace("px", "")), 
                    button.style.padding = "2px " + 18 * cond + "px", button.style.margin = btn_margin * cond + "px " + btn_margin * cond + "px 1px 1px", 
                    button.style.height = btn_height * cond + "px ";
                });
            }); else if ("image" === item.type) message = message || this.add(body, "qubot-message"), 
            item.url && (txt = this.add(message, "item-images"), (txt = this.add(txt, "image", "img")).classList.add("qubot-disable-select"), 
            txt.onload = function() {
                editor.listEditor.showArrows(editor.bot.state);
            }, txt.src = item.url || item.image, item.width && (txt.style.width = item.width + "%"), 
            0 === item.center) && (txt.style.marginLeft = txt.style.marginRight = "0px"); else if ("images" === item.type) {
                message = message || this.add(body, "qubot-message");
                let images = this.add(message, "item-images");
                item.items.forEach(image => {
                    var img;
                    (image.url || image.image) && ((img = this.add(images, "image", "img")).classList.add("qubot-disable-select"), 
                    img.onload = function() {
                        editor.listEditor.showArrows(editor.bot.state);
                    }, img.src = image.url || image.image || "", image.width ? img.style.width = image.width / item.items.length + "%" : img.style.width = 100 / item.items.length + "%", 
                    0 === image.center) && (img.style.marginLeft = img.style.marginRight = "0px");
                });
            } else {
                var src, url;
                "map" === item.type ? (message = message || this.add(body, "qubot-message"), 
                (txt = this.add(message, "map")).classList.add("qubot-disable-select"), 
                (url = item.url || item.map) && (src = `src="${url}"`, 0 <= url.indexOf("iframe")) && (src = url.match(/src\s*=\s*".+?"/)) && src.length && (txt.innerHTML = `<iframe ${src[0]} width="100%" style="border:0;" loading="lazy"></iframe>`)) : "video" === item.type ? (message = message || this.add(body, "qubot-message"), 
                (url = this.add(message, "video")).classList.add("qubot-disable-select"), 
                url.innerHTML = "🎞️") : "audio" === item.type ? (message = message || this.add(body, "qubot-message"), 
                (txt = this.add(message, "audio")).classList.add("qubot-disable-select"), 
                txt.innerHTML = "🎧") : "message" === item.type ? (message = this.add(body, "qubot-message"), 
                "" !== item.typing && 0 < +item.typing && this.add(message, "qudata-svg-timer-badge")) : "input" == item.type && (kindInput = item.kind, 
                paramsInput = item.params, isInput = item.actions && 0 < item.actions.length);
            }
        }), isInput && (items = this.add(body, "item-input"), "text" === kindInput ? items.innerHTML = "✍🏽" : "intent" === kindInput ? (items.innerHTML = "🙊", 
        items.style.backgroundColor = "#dfd") : "int" === kindInput || "float" === kindInput || "range" === kindInput || "number" === kindInput ? items.innerHTML = "🔢" : "email" === kindInput ? items.innerHTML = "📧" : "phone" === kindInput ? items.innerHTML = "📞" : "MMDDYYYY" === kindInput || "DDMMYYYY" === kindInput || "datetime" === kindInput && paramsInput && "date" === paramsInput.time ? items.innerHTML = "📆" : "time" === kindInput || "datetime" === kindInput && paramsInput && "time" === paramsInput.time ? items.innerHTML = "⌚" : "datetime" === kindInput && paramsInput && "datetime" === paramsInput.time ? items.innerHTML = "📆⌚" : "file" === kindInput ? items.innerHTML = "📎" : "geo" === kindInput ? items.innerHTML = "🌐" : "ai" === kindInput && (items.innerHTML = "🤖")), 
        state == this.editor.bot.start && card.classList.add("qubot-start-state");
    }
    setStartState(state) {
        this.editor.bot.start = state, this.editor.myBots.bot && (this.editor.myBots.bot.start = state);
        var cards = this.space.getElementsByClassName("qubot-state");
        for (let i = 0; i < cards.length; i++) {
            cards[i].classList.remove("qubot-start-state");
            let state = cards[i].id.substring(12);
            state === this.editor.bot.start && cards[i].classList.add("qubot-start-state");
        }
        this.editor.save();
    }
    addLinkClasses(state) {
        var obj = document.getElementById("qubot-state-" + state);
        obj && (this.removeAddedClasses(), obj.classList.add("qubot-state-active"), 
        this.editor.stateEditor.items.getStates(this.editor.bot.states[state]).forEach(s => {
            var stateCard;
            s.state && s.state.length && s.state in this.editor.bot.states && (stateCard = this.cards.findCardByState(s.state)) && void 0 !== (stateCard = stateCard.elem) && state !== s.state && stateCard.classList.add("qubot-state-link");
        }));
    }
    removeAddedClasses() {
        var list = this.space.getElementsByClassName("qubot-state");
        Array.from(list).forEach(card => {
            card.classList.remove("qubot-state-link"), card.classList.remove("qubot-state-link-main"), 
            card.classList.remove("qubot-state-active");
        });
    }
    setCurState(state) {
        state && (this.editor.bot.state = state), this.removeAddedClasses(), this.addLinkClasses(this.editor.bot.state), 
        this.showArrows();
    }
    drawArrows(state1, states, color, alpha = 1) {
        let card1 = this.cards.findCardByState(state1);
        if (card1) {
            if (!card1.visible()) {
                var folderCard = card1.visibleFolder();
                if (!folderCard) return;
                card1 = folderCard;
            }
            states = states || this.editor.stateEditor.items.getStates(this.editor.bot.states[state1]);
            let rect0 = this.canvas.svg.getBoundingClientRect(), splines = {}, arrows = {}, points = {};
            for (var spline in states.forEach(state2 => {
                if (state2 && state2.state && state2.state.length && state2.state in this.editor.bot.states) {
                    let card2 = this.cards.findCardByState(state2.state);
                    if (card2) {
                        let rect1;
                        var elems;
                        "state" == card1.kind ? 0 <= state2.id ? (elems = card1.elem.getElementsByClassName("qubot-button"), 
                        rect1 = elems[state2.id].getBoundingClientRect()) : (rect1 = card1.elem.getBoundingClientRect(), 
                        -1 === state2.id && (elems = card1.elem.getElementsByClassName("item-input"), 
                        rect1 = (0 < elems.length ? elems[0] : card1.elem).getBoundingClientRect()), 
                        -2 === state2.id && (rect1 = card1.elem.getBoundingClientRect())) : rect1 = card1.elem.getBoundingClientRect(), 
                        (card2.visible() || (card2 = card2.visibleFolder())) && card1 != card2 && (elems = card2.elem.getBoundingClientRect(), 
                        "free" == this.kindView ? (state2 = [ rect1.left - rect0.left + rect1.width / 2, rect1.top - rect0.top + rect1.height / 2, rect1.width / 2, rect1.height / 2, elems.left - rect0.left + elems.width / 2, elems.top - rect0.top + 10, elems.width / 2, 10, 1, color, alpha ], 
                        splines[state2.join()] = state2) : "green" == color ? function(args) {
                            points[args.join()] = args;
                        }([ rect1.left - rect0.left + rect1.width / 2, rect1.top - rect0.top + rect1.height / 2, rect1.width / 2, rect1.height / 2, 1, color, alpha ]) : function(args) {
                            arrows[args.join()] = args;
                        }([ rect1.left - rect0.left + rect1.width / 2, rect1.top - rect0.top + rect1.height / 2, rect1.width / 2, rect1.height / 2, elems.left - rect0.left + elems.width / 2, elems.top - rect0.top + 10, elems.width / 2, 10, 1, color, alpha ]));
                    }
                }
            }), splines) this.canvas.drawSpline.apply(this.canvas, splines[spline]);
            for (var arrow in arrows) this.canvas.drawArrow.apply(this.canvas, arrows[arrow]);
            for (var point in points) this.canvas.drawPoint.apply(this.canvas, points[point]);
        }
    }
    copyStep() {
        var state = this.space.getElementsByClassName("qubot-state-active")[0].id.substring(12);
        this.lists.clipboard.copyStep = JSON.parse(JSON.stringify(this.editor.bot.states[state]));
    }
    pasteStep(pos = null, folder = null) {
        if (this.lists.clipboard.copyStep) {
            let card = this.onAddCard(null, !0, "copy");
            var folders;
            this.lists.clipboard.copyStep = JSON.parse(JSON.stringify(this.lists.clipboard.copyStep)), 
            "qubot-folder" == folder ? (folders = this.cards.getFolderCards(), folder = this.space.querySelector(".qubot-folder-active .qubot-caption"), 
            folders.forEach(folderCard => {
                folderCard.name == folder.innerHTML && this.placeCardInFolder(card, folderCard, null, null);
            })) : pos && (folders = this.lists.listFree.canvas, this.lists.listFree.placeCard(card, pos.x / folders.scale, pos.y / folders.scale)), 
            this.save();
        }
    }
    onclickCard(obj) {
        this.editor.dontSave = !0;
        obj = obj.id.substring(12);
        this.editor.stateEditor.actions.changingState ? (this.editor.stateEditor.actions.changeState(obj, this.editor.stateEditor.actions.changingState), 
        this.removeAddedClasses(), this.addLinkClasses(this.editor.bot.state), this.showArrows(), 
        this.editor.stateEditor.actions.show()) : (this.editor.bot.state = obj, 
        this.editor.stateEditor.items.set(this.editor.bot.states[obj]), this.setCurState(obj), 
        this.editor.stateEditor.set(this.editor.bot.states[obj])), this.editor.dontSave = !1, 
        this.editor.stateEditor.actions.wasOnClickState = !1;
    }
    onclickCardAdd(obj) {
        this.onAddCard(obj, !1);
    }
    onclickCardFolder(e, obj) {
        var card = this.cards.findCardByElement(obj);
        this.activeFolder = card, this.selectFolder(obj);
    }
    selectFolder(obj) {
        this.removeAddedFolderClasses(), obj.classList.add("qubot-folder-active");
    }
    removeAddedFolderClasses() {
        var list = this.space.getElementsByClassName("qubot-folder");
        Array.from(list).forEach(card => {
            card.classList.remove("qubot-folder-active");
        });
    }
    cardFolderOpen(folderCard) {
        folderCard.open = !0, folderCard.icon.className = "qubot-icon-folder-opened";
    }
    cardFolderClose(folderCard) {
        folderCard.open = !1, folderCard.icon.className = "qubot-icon-folder-closed";
    }
    onclickBtnAddCard(obj) {
        this.onAddCard(obj, !0);
    }
    onAddCard(obj, after = !0, kind = null) {
        if (!this.editor.readonlyBot()) return obj ? after && (obj = obj.parentNode) : obj = this.space.getElementsByClassName("qubot-state-active")[0], 
        this.editor.bot.posGrid || (this.editor.bot.posGrid = {}), this.editor.bot.posFree || (this.editor.bot.posFree = {}), 
        kind = this.createCardState(null, kind), (obj = this.cards.findCardByElement(obj)).folder ? after ? this.lists.placeCardInFolder(kind, obj.folder, null, obj) : this.lists.placeCardInFolder(kind, obj.folder, obj, null) : after ? this.lists.placeCardAfter(kind, obj) : this.lists.placeCardBefore(kind, obj), 
        this.save(), this.editor.setCurStateEditor(kind.state), kind;
    }
    async onclickBtnDelCard(obj) {
        obj = obj || this.space.querySelector(".qubot-state-active .qubot-btn"), 
        this.editor.readonlyBot() || (1 === obj.parentNode.parentNode.getElementsByClassName("qubot-state").length ? this.editor.help.alert("OneState") : await this.editor.help.delConfirm("DelState") && (this.init(), 
        obj = this.cards.findCardByElement(obj.parentNode), this.lists.removeCard(obj), 
        1 == (obj = document.querySelectorAll(".qubot-state")).length ? obj[0].classList.add("one-state") : (obj = document.querySelector(".qubot-state.one-state")) && obj.classList.remove("one-state")));
    }
    async onclickBtnDelCloseCardFolder(obj) {
        (obj = obj || this.space.querySelector(".qubot-folder-active .qubot-btn")) ? (obj = this.cards.findCardByElement(obj.parentNode)).open ? this.cardFolderClose(obj) : this.editor.readonlyBot() || await this.editor.help.delConfirm("DelFolder") && (this.init(), 
        this.lists.removeCard(obj), 1 == (obj = document.querySelectorAll(".qubot-state")).length ? obj[0].classList.add("one-state") : (obj = document.querySelector(".qubot-state.one-state")) && obj.classList.remove("one-state")) : this.editor.help.alert("NoActiveFolder");
    }
    async onclickBtnDelCardFolder(obj) {
        this.editor.readonlyBot() || ((obj = obj || this.space.querySelector(".qubot-folder-active .qubot-btn")) ? (obj = this.cards.findCardByElement(obj.parentNode), 
        await this.editor.help.delConfirm("DelFolder") && (this.init(), this.lists.removeCard(obj), 
        1 == (obj = document.querySelectorAll(".qubot-state")).length ? obj[0].classList.add("one-state") : (obj = document.querySelector(".qubot-state.one-state")) && obj.classList.remove("one-state"))) : this.editor.help.alert("NoActiveFolder"));
    }
    onclickStartStateBtn(obj) {
        var cards = this.space.getElementsByClassName("qubot-state");
        Array.from(cards).forEach(card => {
            card.getElementsByClassName("checkbox")[0].checked = !1;
        }), obj.checked = !0, this.editor.bot.start = obj.parentNode.id.substring(12);
    }
    keypress(event) {
        document.activeElement === document.body && event.shiftKey && (43 == (event = event.keyCode) ? this.zoomIn(1.01) : 95 != event && 45 != event || this.zoomOut(.99));
    }
    viewRect() {
        var parentRect = this.space.parentElement.getBoundingClientRect();
        return {
            x: parentRect.x + this.space.offsetLeft,
            y: parentRect.y + this.space.offsetTop,
            width: parentRect.width - this.space.offsetLeft,
            height: parentRect.height - this.space.offsetTop
        };
    }
    viewCenter() {
        var viewRect = this.viewRect();
        return {
            x: viewRect.width / 2,
            y: viewRect.height / 2
        };
    }
    scale() {
        return this.canvas.scale;
    }
    zoomIn(scale, pos) {
        pos ? "grid" == this.kindView && (pos.x = 0) : pos = "free" == this.kindView ? this.viewCenter() : {
            x: 0,
            y: 0
        }, this.canvas.scale *= scale, 100 < this.canvas.scale && (this.canvas.scale = 100, 
        scale = 1);
        var dX = (pos.x + this.space.parentElement.scrollLeft) * (scale - 1), pos = (pos.y + this.space.parentElement.scrollTop) * (scale - 1);
        this.space.style.transform = `translate( -50%, -50%) scale(${this.canvas.scale}) translate( 50%, 50%)`, 
        this.space.parentElement.scrollLeft += dX, this.space.parentElement.scrollTop += pos, 
        this.showArrows();
    }
    zoomOut(scale, pos) {
        pos = pos || ("free" == this.kindView ? this.viewCenter() : {
            x: 0,
            y: 0
        }), this.canvas.scale *= scale, this.canvas.scale < .01 && (this.canvas.scale = .01, 
        scale = 1);
        var dX = (pos.x + this.space.parentElement.scrollLeft) * (scale - 1), pos = (pos.y + this.space.parentElement.scrollTop) * (scale - 1);
        this.space.style.transform = `translate( -50%, -50%) scale(${this.canvas.scale}) translate( 50%, 50%)`, 
        this.space.parentElement.scrollLeft += dX, this.space.parentElement.scrollTop += pos, 
        this.showArrows();
    }
    mouseoverCard(e) {}
    mousedownCardFolderResize(e) {}
    mouseenterCardState(e) {}
    createEmptyState(state, kind) {
        kind ? "copy" == kind && this.lists.clipboard.copyStep ? this.editor.bot.states[state] = this.lists.clipboard.copyStep : "yesno" == kind ? this.editor.bot.states[state] = [ {
            type: "text",
            text: {
                en: "Text"
            }
        }, {
            type: "buttons",
            items: [ {
                items: [ {
                    type: "button",
                    button: {
                        en: "✔ Yes",
                        de: "✔ Ja",
                        fr: "✔ Oui",
                        es: "✔ Sí",
                        jp: "✔ はい",
                        ru: "✔ Да",
                        uk: "✔ Так"
                    },
                    actions: []
                }, {
                    type: "button",
                    button: {
                        en: "❌ No",
                        de: "❌ Nein",
                        fr: "❌ Non",
                        es: "❌ No",
                        jp: "❌ いいえ",
                        ru: "❌ Нет",
                        uk: "✔ Ні"
                    },
                    actions: []
                } ]
            } ]
        }, {
            type: "input",
            kind: "text",
            actions: []
        } ] : "lang" == kind && (this.editor.bot.states[state] = [ {
            type: "actions",
            actions: [ {
                state: state
            } ]
        }, {
            type: "text",
            text: {
                en: "What language do you prefer to communicate in?",
                ru: "На каком языке Вы хотите общаться?",
                uk: "Якою мовою Ви бажаєте спілкуватись?",
                de: "In welcher Sprache möchten Sie kommunizieren?",
                fr: "Dans quelle langue souhaitez-vous communiquer ?",
                es: "¿En qué idioma quieres comunicarte?"
            }
        }, {
            type: "buttons",
            items: [ {
                items: [ {
                    type: "button",
                    button: {
                        en: "English",
                        ru: "English",
                        uk: "English",
                        de: "English",
                        fr: "English",
                        es: "English"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "en"
                    } ]
                }, {
                    type: "button",
                    button: {
                        en: "Русский",
                        ru: "Русский",
                        uk: "Русский",
                        de: "Русский",
                        fr: "Русский",
                        es: "Русский"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "ru"
                    } ]
                } ]
            }, {
                items: [ {
                    type: "button",
                    button: {
                        en: "Española",
                        ru: "Española",
                        uk: "Española",
                        de: "Española",
                        fr: "Española",
                        es: "Española"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "es"
                    } ]
                }, {
                    type: "button",
                    button: {
                        en: "Українська",
                        ru: "Українська",
                        uk: "Українська",
                        de: "Українська",
                        fr: "Українська",
                        es: "Українська"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "uk"
                    } ]
                } ]
            }, {
                items: [ {
                    type: "button",
                    button: {
                        en: "Deutsch",
                        ru: "Deutsch",
                        uk: "Deutsch",
                        de: "Deutsch",
                        fr: "Deutsch",
                        es: "Deutsch"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "de"
                    } ]
                }, {
                    type: "button",
                    button: {
                        en: "Français",
                        ru: "Français",
                        uk: "Français",
                        de: "Français",
                        fr: "Français",
                        es: "Français"
                    },
                    actions: [ {
                        slot: "LANGUAGE",
                        value: "fr"
                    } ]
                } ]
            } ]
        }, {
            type: "input",
            kind: "text",
            actions: []
        } ]) : this.editor.bot.states[state] = [ {
            type: "text",
            text: {
                en: "Text"
            }
        }, {
            type: "buttons",
            items: [ {
                items: [ {
                    type: "button",
                    button: {
                        en: "Button"
                    },
                    actions: []
                } ]
            } ]
        }, {
            type: "input",
            kind: "text",
            actions: []
        } ];
    }
    createZoom() {
        for (var zoom = document.getElementById("qubot-zoom"); zoom.children.length; ) zoom.firstChild.remove();
        var zoomIn = this.add(zoom, "qubot-zoom-in"), zoomOut = (zoomIn.id = "qubot-zoom-in", 
        zoomIn.innerHTML = this.editor.locale.get("Shift+"), this.add(zoom, "qubot-zoom-out"));
        zoomOut.id = "qubot-zoom-out", zoomOut.innerHTML = this.editor.locale.get("Shift-"), 
        zoom.style = "display:flex; flex-direction:row;", zoomIn.onclick = () => {
            this.editor.listEditor.zoomIn(1.1);
        }, zoomOut.onclick = () => {
            this.editor.listEditor.zoomOut(.9);
        };
    }
}

class QuBotEditorListFree extends QuBotEditorList {
    constructor(cards, lists) {
        super(cards, lists), this.kindView = "free";
    }
    init() {
        this.savePosFlag = !0;
    }
    create() {
        super.create();
    }
    show() {
        super.show(), this.space.style.transform = `translate( -50%, -50%) scale(${this.canvas.scale}) translate( 50%, 50%)`, 
        this.kindView = "free", this.canvas.svg.style.zIndex = "1", this.space.style.cursor = "grab", 
        this.space.onmousedown = this.mousedownSpace.bind(this), this.initFolders(), 
        this.align(), this.showFree(), this.openFolders(), this.canvas.svgColor = "gray", 
        this.canvas.svgSpline = !0, this.canvas.svg.classList.remove("qubot-svg-shadow"), 
        this.savePosFlag || (this.savePosFlag = !1, this.space.parentElement.scrollLeft = 0, 
        this.space.parentElement.scrollTop = 0), navigator.maxTouchPoints || navigator.msMaxTouchPoints || (this.space.parentElement.onwheel = this.onwheel.bind(this)), 
        this.showArrows(), this.save();
    }
    initFolders() {
        this.cards.getFolderCards().forEach(folderCard => {
            folderCard.open = !1;
        });
    }
    openFolders() {
        this.cards.getFolderCards().forEach(folderCard => {
            folderCard.open = !!folderCard.openFree, folderCard.open && this.cardFolderOpen(folderCard, !1);
        });
    }
    align() {
        let minX = 0, minY = 0;
        var cards = this.cards.getContentCards();
        let lastPos = {
            x: 0,
            y: 0
        };
        cards.forEach(card => {
            card.visible() && (card.posFree ? (card.posFree.x < minX && (minX = card.posFree.x), 
            card.posFree.y < minY && (minY = card.posFree.y), lastPos.x = card.posFree.x, 
            lastPos.y = card.posFree.y) : (card.posFree = {
                x: lastPos.x + 100,
                y: lastPos.y + 100
            }, lastPos.x += 100, lastPos.y += 100));
        }), cards.forEach(card => {
            card.posFree && (card.posFree.x -= minX, card.posFree.y -= minY);
        });
    }
    showFree() {
        this.active && (this.hideCards(), this.showTree(null, {
            x: 0,
            y: 0
        }, {
            x: 0,
            y: 0
        }), this.showArrows());
    }
    showTree(card, lastPos, offset) {
        card && this.showCard(card, lastPos, offset), (!card || "folder" == card.kind && card.open) && this.cards.getContentCardsFromFolder(card).forEach(card => {
            this.showTree(card, lastPos, offset);
        });
    }
    showCard(card, lastPos, offset) {
        let p = card.posFree;
        p ? (lastPos.x = p.x, lastPos.y = p.y) : (p = card.posFree = {
            x: lastPos.x + 100,
            y: lastPos.y + 100
        }, lastPos.x += 100, lastPos.y += 100), this.placeCard(card, p.x + offset.x, p.y + offset.y), 
        this.updateCard(card);
    }
    hideTree(parent) {
        if (!parent || "folder" == parent.kind && parent.open) {
            let children = this.cards.getContentCardsFromFolder(null);
            children.forEach(card => {
                this.hideTree(children);
            });
        }
        parent && this.hideCard(parent);
    }
    leftTopPos(cards) {
        let left = null, top = null;
        return cards.forEach(card => {
            card.visible() && card.posFree && ((null == left || card.posFree.x < left) && (left = card.posFree.x), 
            null == top || card.posFree.y < top) && (top = card.posFree.y);
        }), {
            left: left,
            top: top
        };
    }
    hideCards() {
        var cards = this.cards.getAllCards();
        for (let i = 0; i < cards.length; i++) {
            var card = cards[i];
            this.hideCard(card);
        }
    }
    hideCard(card) {
        card.elem.style.display = "none";
    }
    updateCard(card) {
        var cardCenter;
        "state" == card.kind && (cardCenter = card.centerLocal().y, card.btnAdd.style.top = cardCenter - 14 + "px", 
        card.btnAdd.style.bottom = null);
    }
    placeCardAfter(card, anotherCard) {
        var anotherCardElem;
        !this.active && card.posFree || (anotherCardElem = anotherCard.elem, this.active ? this.placeCard(card, anotherCardElem.offsetLeft + 100, anotherCardElem.offsetTop + 100, anotherCardElem) : anotherCard.posFree && this.placeCard(card, anotherCard.posFree.x + 100, anotherCard.posFree.y + 100, anotherCardElem), 
        this.save());
    }
    placeCardBefore(card, anotherCard) {
        var anotherCardElem;
        !this.active && card.posFree || (anotherCardElem = anotherCard.elem, this.active ? this.placeCard(card, anotherCardElem.offsetLeft - 100, anotherCardElem.offsetTop - 100, anotherCardElem) : anotherCard.posFree && this.placeCard(card, anotherCard.posFree.x - 100, anotherCard.posFree.y - 100, anotherCardElem), 
        this.save());
    }
    placeCardInFolder(card, folderCard, beforeCard = null, afterCard = null) {
        super.placeCardInFolder(card, folderCard, beforeCard, afterCard), beforeCard && (this.active ? this.placeCard(card, beforeCard.elem.offsetLeft - 100, beforeCard.elem.offsetTop - 100, beforeCard.elem) : beforeCard.posFree && this.placeCard(card, beforeCard.posFree.x - 100, beforeCard.posFree.y - 100, beforeCard.elem)), 
        afterCard && (this.active ? this.placeCard(card, afterCard.elem.offsetLeft + 100, afterCard.elem.offsetTop + 100, afterCard.elem) : afterCard.posFree && this.placeCard(card, afterCard.posFree.x + 100, afterCard.posFree.y + 100, afterCard.elem)), 
        this.updateFolderCard(folderCard);
    }
    placeCard(card, x, y, after = null) {
        var cardElem;
        super.placeCard(card), this.active && (cardElem = card.elem, after ? this.space.insertBefore(card.elem, after.elem) : this.space.appendChild(cardElem), 
        this.moveCard(card, x, y), cardElem.style.position = "absolute", cardElem.style.opacity = this.cardOpacity, 
        cardElem.style.display = "flex"), card.posFree = {
            x: x,
            y: y
        };
    }
    moveCard(card, x, y) {
        this.active && (card.elem.style.left = x + "px", card.elem.style.top = y + "px"), 
        card.posFree = {
            x: x,
            y: y
        };
    }
    removeCard(card) {
        this.showFree();
    }
    hide() {
        super.hide();
        this.cards.getFolderCards().forEach(folderCard => {
            folderCard.icon.style.display = "flex", folderCard.elem.style.transition = "", 
            folderCard.elem.style.width = "", folderCard.elem.style.height = "";
        });
        var cards = this.cards.getContentCards();
        for (let i = 0; i < cards.length; i++) {
            var cardElem = cards[i].elem;
            cardElem.style.left = null, cardElem.style.top = null, cardElem.style.position = null;
        }
        this.space.parentElement.onwheel = null;
    }
    showArrows() {
        this.canvas.clear(), this.showAllArrows();
    }
    clear() {
        if (this.space) for (;this.space.firstChild; ) this.space.removeChild(this.space.firstChild);
        super.clear();
    }
    showAllArrows() {
        var state, in_states = {};
        for (state in this.editor.bot.states) {
            var states = this.editor.stateEditor.items.getStates(this.editor.bot.states[state]);
            for (let i = 0; i < states.length; i++) states[i].state === this.editor.bot.state && (in_states[state] = 1);
        }
        for (let state in in_states) {
            let states = this.editor.stateEditor.items.getStates(this.editor.bot.states[state]);
            for (let i = 0; i < states.length; i++) states[i].state !== this.editor.bot.state && (states[i] = null);
            this.drawArrows(state, states, "green", .3);
        }
        for (let state in this.editor.bot.states) state === this.editor.bot.state ? this.drawArrows(state, null, "blue", .5) : state in in_states || this.drawArrows(state, null, "gray", .1);
    }
    mousedownCardState(e) {
        this.editor.stateEditor.actions.changingState || 0 == e.button && (e.stopPropagation(), 
        this.cardGrab = !0, this.mousePosX = e.clientX, this.mousePosY = e.clientY, 
        e = e.path || e.composedPath && e.composedPath(), this.cardMove = this.cards.findCardByElement(e[1]), 
        e = this.cardMove.elem, this.moveCard(this.cardMove, e.offsetLeft, e.offsetTop), 
        e.style.position = "absolute", e.style.zIndex = 100, document.onmouseup = this.mouseupCardState.bind(this), 
        document.onmousemove = this.mousemoveCardState.bind(this), e.onmouseleave = this.mousemoveCardState.bind(this), 
        this.showArrows());
    }
    mousemoveCardState(e) {
        e.stopPropagation();
        var dX = (this.mousePosX - e.clientX) / this.canvas.scale, dY = (this.mousePosY - e.clientY) / this.canvas.scale, card = this.cardMove.elem;
        0 <= card.offsetLeft - dX && (this.mousePosX = e.clientX, this.moveCard(this.cardMove, card.offsetLeft - dX, card.offsetTop)), 
        0 <= card.offsetTop - dY && (this.mousePosY = e.clientY, this.moveCard(this.cardMove, card.offsetLeft, card.offsetTop - dY)), 
        this.showArrows();
    }
    mouseupCardState(e) {
        e.stopPropagation(), this.cardMove.posFree = {
            x: this.cardMove.elem.offsetLeft,
            y: this.cardMove.elem.offsetTop
        }, document.onmouseup = null, document.onmousemove = null;
        var e = this.cards.getFolderCards();
        let insertedIntoFolder = !1;
        e.forEach(folderCard => {
            var folderRect = folderCard.rect(), cardRect = this.cardMove.rect();
            this.intersect(cardRect, folderRect) && (this.placeCardInFolder(this.cardMove, folderCard), 
            insertedIntoFolder = !0, folderCard.open || this.hideCard(this.cardMove));
        }), this.cardMove.folder && !insertedIntoFolder && (e = this.cardMove.folder, 
        this.cardMove.setFolder(null), this.updateFolderCard(e));
        e = this.cardMove.elem;
        e.style.zIndex = null, e.onmouseleave = null, this.cardMove = null, this.cardGrab = !1, 
        this.save();
    }
    intersect(rect1, rect2) {
        return !(rect2.left > rect1.right || rect2.right < rect1.left || rect2.top > rect1.bottom || rect2.bottom < rect1.top);
    }
    mousedownCardFolder(e) {
        this.editor.stateEditor.actions.changingState || (e.stopPropagation(), this.mousePosX = e.clientX, 
        this.mousePosY = e.clientY, e = e.path || e.composedPath && e.composedPath(), 
        e = this.cards.findCardByElement(e[1]), (this.activeFolder = e).style.position = "absolute", 
        e.style.zIndex = 100);
    }
    mousedownSpace(e) {
        0 != e.button || (e.preventDefault(), e = e || window.event, this.cardGrab) || (this.mousePosX = e.clientX, 
        this.mousePosY = e.clientY, document.onmouseup = this.mouseupSpace.bind(this), 
        document.onmousemove = this.mousemoveSpace.bind(this));
    }
    mousemoveSpace(e) {
        e.preventDefault(), e = e || window.event;
        var dX = this.mousePosX - e.clientX, dY = this.mousePosY - e.clientY;
        this.space.parentElement.scrollLeft += dX, this.space.parentElement.scrollTop += dY, 
        this.mousePosX = e.clientX, this.mousePosY = e.clientY, this.showArrows();
    }
    mouseupSpace(e) {
        e.preventDefault(), document.onmouseup = null, document.onmousemove = null, 
        this.save();
    }
    onwheel(e) {
        var rect;
        e.wheelDelta && Math.abs(e.wheelDelta) < 120 || (e.preventDefault(), rect = this.viewRect(), 
        rect = {
            x: e.clientX - rect.x,
            y: e.clientY - rect.y
        }, 1 < (e = 1 - e.deltaY / 1e3) ? this.zoomIn(e, rect) : this.zoomOut(e, rect));
    }
    onclickCardFolder(e, obj) {
        super.onclickCardFolder(e, obj), 0 != e.button || (e = this.cards.findCardByElement(obj)).open || (this.cardFolderOpen(e), 
        this.save());
    }
    cardFolderOpen(folderCard, shift = !0) {
        super.cardFolderOpen(folderCard), folderCard.icon.style.display = "none", 
        this.updateFolderCard(folderCard, !1, shift), this.showArrows();
    }
    cardFolderClose(folderCard) {
        super.cardFolderClose(folderCard);
        var scale = this.scale(), oldFolderCardRect = folderCard.rectLocal(scale), scale = (folderCard.icon.style.display = "flex", 
        folderCard.elem.style.transition = "", folderCard.elem.style.width = "", 
        folderCard.elem.style.height = "", folderCard.rectLocal(scale)), otherCards = (this.cards.getContentCardsFromFolder(folderCard).forEach(card => {
            this.hideTree(card);
        }), this.cards.getContentCards().filter(card => card.visible() && card.folder != folderCard));
        this.resizeSubArea(oldFolderCardRect, scale, otherCards, !1), folderCard.width = scale.width, 
        folderCard.height = scale.height, this.showArrows();
    }
    updateFolderCard(folderCard, anim = !0, shiftOther = !0) {
        if (this.active && folderCard.open) {
            var scale = this.scale(), folderCaptionRect = folderCard.caption.getBoundingClientRect(), children = this.cards.getContentCardsFromFolder(folderCard), childrenLeftTop = this.leftTopPos(children);
            const folderBorders_left = 10, folderBorders_top = folderCaptionRect.height / scale + 10, folderBorders_right = 10, folderBorders_bottom = 10;
            let childrenOffset = {
                x: folderCard.posFree.x - childrenLeftTop.left + folderBorders_left,
                y: folderCard.posFree.y - childrenLeftTop.top + folderBorders_top
            };
            children.forEach(card => {
                var lastPos = {
                    x: folderCard.posFree.x,
                    y: folderCard.posFree.y
                };
                this.showTree(card, lastPos, childrenOffset);
            });
            folderCaptionRect = folderCard.rectLocal(scale);
            let newFolderCardRect = null;
            0 < children.length ? ((newFolderCardRect = this.cards.rectLocal(children, scale)).width += folderBorders_left + folderBorders_right, 
            newFolderCardRect.height += folderBorders_top + folderBorders_bottom) : newFolderCardRect = {
                left: folderCaptionRect.left,
                right: folderCaptionRect.right,
                width: 2 * folderCaptionRect.width,
                height: 2 * folderCaptionRect.height
            }, folderCard.elem.style.transition = anim ? "width 1s, height 1s" : "", 
            folderCard.elem.style.width = newFolderCardRect.width + "px", folderCard.elem.style.height = newFolderCardRect.height + "px", 
            newFolderCardRect.width += 2, newFolderCardRect.height += 2;
            childrenLeftTop = this.cards.getContentCards().filter(card => card.visible() && card.folder != folderCard);
            folderCard.width = newFolderCardRect.width, folderCard.height = newFolderCardRect.height, 
            shiftOther && this.resizeSubArea(folderCaptionRect, newFolderCardRect, childrenLeftTop, !0), 
            this.showArrows();
        }
    }
    resizeSubArea(fromRect, toRect, cards, expand) {
        let scale = this.scale(), areaShift = {
            x: toRect.width - fromRect.width,
            y: toRect.height - fromRect.height
        };
        cards.forEach(card => {
            var cardRect = card.rectLocal(scale), offset = {
                x: 0,
                y: 0
            };
            cardRect.left + cardRect.width > fromRect.left && cardRect.top > fromRect.top + fromRect.height && (offset.y += areaShift.y), 
            cardRect.top + cardRect.height > fromRect.top && cardRect.left > fromRect.left + fromRect.width && (offset.x += areaShift.x), 
            expand && offset.y && offset.x && (offset.x = 0), !expand && offset.x && offset.y && (offset.y = 0), 
            (offset.x || offset.y) && this.showCard(card, {
                x: 0,
                y: 0
            }, offset);
        });
    }
    mousedownCardFolder(e) {
        this.editor.stateEditor.actions.changingState || (e.stopPropagation(), this.mousePosX = e.clientX, 
        this.mousePosY = e.clientY, e = e.path || e.composedPath && e.composedPath(), 
        e = this.cards.findCardByElement(e[1]), this.activeFolder = e, this.dragCardFolder(e));
    }
    mousemoveCardFolder(e) {
        if (e.stopPropagation(), this.cardMove) {
            let dX = (this.mousePosX - e.clientX) / this.canvas.scale, dY = (this.mousePosY - e.clientY) / this.canvas.scale;
            var card = this.cardMove.elem, children = this.cards.getContentCardsFromFolder(this.cardMove);
            0 <= card.offsetLeft - dX && (this.mousePosX = e.clientX, this.moveCard(this.cardMove, card.offsetLeft - dX, card.offsetTop), 
            this.cardMove.open) && children.forEach(card => {
                this.moveCard(card, card.elem.offsetLeft - dX, card.elem.offsetTop);
            }), 0 <= card.offsetTop - dY && (this.mousePosY = e.clientY, this.moveCard(this.cardMove, card.offsetLeft, card.offsetTop - dY), 
            this.cardMove.open) && children.forEach(card => {
                this.moveCard(card, card.elem.offsetLeft, card.elem.offsetTop - dY);
            }), this.showArrows(this.editor.bot.state);
        }
    }
    mouseupCardFolder(e) {
        e.stopPropagation(), this.cardGrab && this.dropCardFolder();
    }
    dragCardFolder(card) {
        1 != this.cards.getContentCards().length && (this.cardMove = card, this.cardGrab = !0, 
        document.onmouseup = this.mouseupCardFolder.bind(this), document.onmousemove = this.mousemoveCardFolder.bind(this), 
        this.cardMove.elem.onmouseleave = this.mousemoveCardFolder.bind(this));
    }
    dropCardFolder() {
        this.cardMove.posFree = {
            x: this.cardMove.elem.offsetLeft,
            y: this.cardMove.elem.offsetTop
        }, document.onmouseup = null, document.onmousemove = null;
        var card = this.cardMove.elem;
        card.style.zIndex = null, card.onmouseleave = null, this.cardMove = null, 
        this.cardGrab = !1, this.save();
    }
}

class QuBotEditorListGrid extends QuBotEditorList {
    constructor(cards, lists) {
        super(cards, lists), this.kindView = "grid";
    }
    init() {}
    create() {
        super.create(), this.columns = 5, this.offset = 5, this.padd = 2.5, this.grid || (this.grid = document.createElement("div"), 
        this.grid.setAttribute("id", "qubot-disable-select"), this.grid.style.display = "grid", 
        this.grid.style.gridTemplateColumns = "repeat(" + this.columns + ", 195px)", 
        this.grid.style.columnGap = this.offset + "px", this.grid.style.rowGap = this.offset + "px", 
        this.grid.style.padding = this.padd + "px", this.grid.style.gridAutoRows = "minmax(60px, auto)", 
        this.grid.classList.add("qubot-disable-select")), this.rowMenu || (this.rowMenu = this.createRowMenu());
    }
    show() {
        super.show(), this.space.style.transform = `translate( -50%, -50%) scale(${this.canvas.scale}) translate( 50%, 50%)`, 
        this.canvas.svg.style.zIndex = "10", this.space.style.cursor = "default", 
        this.space.onmousedown = null, this.space.style.minWidth = "800px", this.space.style.minHeight = "none", 
        this.space.appendChild(this.grid), this.space.onmousedown = null, this.canvas.svg.style.zIndex = "10", 
        this.canvas.svgColor = "blue", this.canvas.svgSpline = !1, this.canvas.clear(), 
        this.rowMenu.r = 0, this.space.parentElement.scrollLeft = 0, this.space.parentElement.scrollTop = 0, 
        this.initFolders(), this.showGrid(), this.save();
    }
    initFolders() {
        this.cards.getFolderCards().forEach(folderCard => {
            folderCard.open = !!folderCard.openGrid;
        });
    }
    placeAddCard(cards, c, r, folderCard) {
        cards = 0 < cards.length ? cards.pop() : this.createCardAdd();
        cards.setFolder(folderCard), this.placeCardToPos(cards, c, r);
    }
    showGrid() {
        var addCards;
        this.active && (this.hideCards(), addCards = [ ...this.cards.getAddCards() ], 
        this.showFolderRows(0, null, addCards), this.showRowMenu(), this.showArrows());
    }
    showRowMenu() {
        var rowsPos = this.gridRowsPos(), rowsPos = (rowsPos[this.rowMenu.r] + rowsPos[this.rowMenu.r + 1]) / 2;
        this.rowMenu.elem.style.top = rowsPos - this.rowMenu.elem.getBoundingClientRect().height / 2 + "px", 
        this.rowMenu.elem.style.display = "flex";
    }
    showFolderRows(row, folderCard, addCards) {
        var unsorted = this.cards.getContentCardsFromFolder(folderCard);
        if (0 == unsorted.length) return row - 1;
        var cards = this.sortByGrid(unsorted);
        let prev = null;
        var breakCards = {};
        for (let i = 0; i < cards.length; i++) {
            var card = cards[i];
            prev && prev.posGrid && card.posGrid && prev.posGrid.r != card.posGrid.r && (breakCards[prev] = !0), 
            prev = card;
        }
        var startCol = folderCard ? folderCard.posGrid.c : 0;
        let c = startCol, r = row;
        prev = null;
        var stateColumns = this.columns - 1;
        let nextFolder = null;
        for (let i = 0; i < cards.length; i++) {
            let card = cards[i], newLine = !1;
            prev && breakCards[prev] && (newLine = !0), (newLine = !card.posGrid && c + 1 >= stateColumns ? !0 : newLine) && nextFolder && (r = this.showFolderRows(r + 1, nextFolder, addCards), 
            nextFolder = null), c = newLine ? startCol : c, r = newLine ? r + 1 : r, 
            this.placeCardToPos(card, c, r), "folder" == (prev = card).kind && card.open && (nextFolder = card), 
            c += 1;
        }
        return nextFolder ? r = this.showFolderRows(r + 1, nextFolder, addCards) : c, 
        r;
    }
    showCard(card) {
        var cardElem = card.elem;
        cardElem.style.left = null, cardElem.style.top = null, cardElem.style.position = null, 
        cardElem.style.zIndex = null, cardElem.style.display = "flex", cardElem.style.gridColumn = card.posGrid.c + 1, 
        cardElem.style.gridRow = card.posGrid.r + 1, this.grid.appendChild(cardElem);
    }
    hideCard(card) {
        var cardElem = card.elem;
        cardElem.style.gridColumn = null, cardElem.style.gridRow = null, cardElem.style.display = "none", 
        "add" == card.kind && (card.folder = null), "folder" == card.kind && (card.icon.className = "qubot-icon-folder-closed");
    }
    createRowMenu() {
        var menu = {
            r: 0
        }, parent = document.getElementById("qubot-states-list"), parent = this.add(parent, "qubot-grid-row-menu"), drag = (parent.style.position = "absolute", 
        parent.style.top = "20px", parent.style.left = "0px", this.add(parent, "qubot-icon-drag-row")), add = this.add(parent, "qubot-btn-plus-row");
        return parent.classList.add("qubot-disable-select"), this.add(add, "qubot-icon-plus-row"), 
        drag.onmousedown = this.mousedownRowMenuDrag.bind(this), add.onmousedown = this.mousedownRowMenuAdd.bind(this), 
        menu.elem = parent, menu;
    }
    zoomIn(scale, pos) {
        super.zoomIn(scale, pos), this.showRowMenu();
    }
    zoomOut(scale, pos) {
        super.zoomOut(scale, pos), this.showRowMenu();
    }
    placeCardAfter(card, anotherCard) {
        !this.active && card.posGrid || ((anotherCard = anotherCard.posGrid) ? (anotherCard = {
            c: anotherCard.c + 1,
            r: anotherCard.r
        }, !this.active && anotherCard.c > this.columns && (anotherCard.c = 0, anotherCard.r += 1), 
        this.insertCard(card, anotherCard.c, anotherCard.r)) : this.appendCard(card), 
        this.save());
    }
    placeCardBefore(card, anotherCard) {
        !this.active && card.posGrid || ((anotherCard = anotherCard.posGrid) ? this.insertCard(card, anotherCard.c, anotherCard.r) : this.appendCard(card), 
        this.save());
    }
    placeCardInFolder(card, folderCard, beforeCard = null, afterCard = null) {
        super.placeCardInFolder(card, folderCard, beforeCard), beforeCard ? this.insertCard(card, beforeCard.posGrid.c, beforeCard.posGrid.r) : afterCard ? this.insertCard(card, afterCard.posGrid.c + 1, afterCard.posGrid.r) : (beforeCard = this.cards.getContentCardsFromFolder(folderCard), 
        this.appendCard(card, beforeCard));
    }
    placeCard(card) {
        this.placeCardToPos(card, card.posGrid.c, card.posGrid.r);
    }
    placeCardToPos(card, c, r) {
        super.placeCard(card), card.posGrid = {
            c: c,
            r: r
        }, this.active && (card.visible() ? this.showCard(card) : this.hideCard(card));
    }
    placeCardOnSpace(card, x, y) {
        card = card.elem;
        card.style.gridColumn = null, card.style.gridRow = null, card.style.left = x + "px", 
        card.style.top = y + "px", card.style.position = "absolute", card.style.zIndex = 1e3, 
        this.space.appendChild(card);
    }
    removeCard(card) {
        this.extractCard(card), this.showGrid();
    }
    extractCard(card) {
        var cardElem = card.elem, posGrid = (this.active && (cardElem = {
            x: cardElem.offsetLeft,
            y: cardElem.offsetTop
        }, this.placeCardOnSpace(card, cardElem.x, cardElem.y)), card.posGrid);
        if (posGrid) {
            var cards = this.cards.getAllCards();
            for (let i = 0; i < cards.length; i++) {
                var cardOther = cards[i];
                cardOther == card || !cardOther.posGrid || cardOther.posGrid.r != posGrid.r || cardOther.posGrid.c < posGrid.c || this.placeCardToPos(cardOther, cardOther.posGrid.c - 1, cardOther.posGrid.r);
            }
        }
    }
    gridPos(card) {
        var folderPosGrid;
        if (card.folder) return folderPosGrid = this.gridPos(card.folder), {
            c: card.posGrid.c,
            r: folderPosGrid.r + card.posGrid.r
        };
    }
    sortByGrid(cards) {
        return cards.sort((a, b) => null == a.posGrid || null == b.posGrid ? -1 : a.posGrid.r == b.posGrid.r ? a.posGrid.c > b.posGrid.c ? 1 : -1 : a.posGrid.r > b.posGrid.r ? 1 : -1);
    }
    extractCardsRow(cards, r) {
        var pos = [];
        for (let i = 0; i < cards.length; i++) {
            var cardElem = cards[i].elem;
            pos[i] = {
                x: cardElem.offsetLeft,
                y: cardElem.offsetTop
            };
        }
        for (let i = 0; i < cards.length; i++) {
            let card = cards[i];
            this.placeCardOnSpace(card, pos[i].x, pos[i].y);
        }
        var allCards = this.cards.getAllCards();
        for (let i = 0; i < allCards.length; i++) {
            var cardOther = allCards[i];
            cardOther.posGrid.r <= r || this.placeCardToPos(cardOther, cardOther.posGrid.c, cardOther.posGrid.r - 1);
        }
    }
    insertCard(card, c, r) {
        var cards = this.cards.getContentCards();
        for (let i = 0; i < cards.length; i++) {
            var cardOther = cards[i];
            cardOther == card || cardOther.posGrid.r != r || cardOther.posGrid.c < c || this.placeCardToPos(cardOther, cardOther.posGrid.c + 1, cardOther.posGrid.r);
        }
        this.placeCardToPos(card, c, r), this.showGrid();
    }
    appendCard(card, cards = null) {
        cards = (cards = cards || this.cards.getContentCards()).filter(function(cardv) {
            return cardv != card;
        });
        cards = this.lastCard(cards);
        cards ? this.placeCardToPos(card, cards.posGrid.c + 1, cards.posGrid.r) : this.placeCardToPos(card, 0, 0), 
        this.showGrid();
    }
    firstCard(cards) {
        return 0 == cards.length ? null : this.sortByGrid(cards)[0];
    }
    lastCard(cards) {
        return 0 == cards.length ? null : (cards = this.sortByGrid(cards))[cards.length - 1];
    }
    insertCardsRow(cards, r) {
        var cardsAll = this.cards.getAllCards();
        for (let i = 0; i < cardsAll.length; i++) {
            let cardOther = cardsAll[i];
            cards.find(card => card == cardOther) || cardOther.posGrid.r < r || this.placeCardToPos(cardOther, cardOther.posGrid.c, cardOther.posGrid.r + 1);
        }
        for (let i = 0; i < cards.length; i++) {
            var card = cards[i];
            this.placeCardToPos(card, card.posGrid.c, r);
        }
    }
    hide() {
        super.hide(), this.hideCards(), this.grid.parent && this.space.removeChild(this.grid), 
        this.rowMenu.elem.style.display = "none";
    }
    hideCards() {
        var cards = this.cards.getAllCards();
        for (let i = 0; i < cards.length; i++) {
            var card = cards[i];
            this.hideCard(card);
        }
    }
    clear() {
        if (this.space) for (;this.space.firstChild; ) this.space.removeChild(this.space.firstChild);
        if (this.grid) for (;this.grid.firstChild; ) this.grid.removeChild(this.grid.firstChild);
        super.clear();
    }
    updateCard(card) {
        var cardCenter, rowsPos;
        "state" == card.kind && (card == this.cardMove ? (cardCenter = card.centerLocal().y, 
        card.btnAdd.style.top = cardCenter - 14 + "px") : (cardCenter = card.posGrid.r, 
        rowsPos = ((rowsPos = this.gridRowsPos())[cardCenter + 1] - rowsPos[cardCenter]) / 2, 
        card.btnAdd.style.top = rowsPos - 14 + "px"), card.btnAdd.style.bottom = null);
    }
    showArrows() {
        this.canvas.clear(), this.drawFolderBorder(), this.drawArrows(this.editor.bot.state, null, "blue", .5);
        var state, in_states = {};
        for (state in this.editor.bot.states) {
            var states = this.editor.stateEditor.items.getStates(this.editor.bot.states[state]);
            for (let i = 0; i < states.length; i++) states[i].state === this.editor.bot.state && (in_states[state] = 1);
        }
        for (let state in in_states) {
            let states = this.editor.stateEditor.items.getStates(this.editor.bot.states[state]);
            for (let i = 0; i < states.length; i++) states[i].state !== this.editor.bot.state && (states[i] = null);
            this.drawArrows(state, states, "green", .3);
        }
    }
    drawFolderBorderNew(folder) {
        let children = this.cards.getCardsFromFolder(folder);
        if (children.forEach(card => {
            "folder" == card.kind && card.open && this.drawFolderBorder(card);
        }), folder && folder.open) {
            children = children.filter(card => card != this.cardMove), this.firstCard(children), 
            this.lastCard(children);
            this.gridColumnsPos(), this.gridRowsPos();
        }
    }
    drawFolderBorder(folder) {
        var c, r, children = this.cards.getCardsFromFolder(folder);
        if (children.forEach(card => {
            "folder" == card.kind && card.open && this.drawFolderBorder(card);
        }), folder && folder.open) {
            let edges = {}, addEdge = function(c, r) {
                var hash = c + "_" + r;
                return edges[hash] ? edges[hash].n += 1 : edges[hash] = {
                    c: c,
                    r: r,
                    n: 1,
                    was: !1
                }, edges[hash];
            }, getEdge = function(c, r, l) {
                c = c + "_" + r;
                if (edges[c] && !edges[c].was) return edges[c].l = l, edges[c];
            };
            let firstEdge = null;
            for (var hash in children.push(folder), children.forEach(card => {
                var pos, edge;
                card != this.cardMove && (pos = card.posGrid, edge = addEdge(pos.c + .5, pos.r), 
                addEdge(pos.c + 1, pos.r + .5), addEdge(pos.c + .5, pos.r + 1), 
                addEdge(pos.c, pos.r + .5), card == folder) && (firstEdge = edge);
            }), edges) {
                let edge = edges[hash];
                1 < edge.n && (edge.was = !0);
            }
            var edgesPath = [];
            let edge = firstEdge;
            for (;edge; ) edge.was = !0, edgesPath.push(edge), edge = (c = edge.c, 
            r = edge.r, c % 1 ? getEdge(c + .5, r - .5, 1) || getEdge(c + 1, r, 0) || getEdge(c + .5, r + .5, 0) || getEdge(c - .5, r + .5, 0) || getEdge(c - 1, r, 1) || getEdge(c - .5, r - .5, 1) : getEdge(c + .5, r + .5, 0) || getEdge(c, r + 1, 0) || getEdge(c - .5, r + .5, 1) || getEdge(c - .5, r - .5, 1) || getEdge(c, r - 1, 1) || getEdge(c + .5, r - .5, 0));
            var pointsPath = [];
            let colsPos = this.gridColumnsPos(), rowsPos = this.gridRowsPos();
            var getPoint = function(c, r) {
                return {
                    x: colsPos[c],
                    y: rowsPos[r]
                };
            };
            let point = getPoint((firstEdge = edgesPath[0]).c - .5, firstEdge.r);
            pointsPath.push(point);
            for (let i = 0; i < edgesPath.length; i++) {
                let edge = edgesPath[i];
                point = edge.l ? edge.c % 1 ? getPoint(edge.c - .5, edge.r) : getPoint(edge.c, edge.r - .5) : edge.c % 1 ? getPoint(edge.c + .5, edge.r) : getPoint(edge.c, edge.r + .5), 
                pointsPath.push(point);
            }
            var children = this.canvas.svg.getBoundingClientRect(), gridRect = this.grid.getBoundingClientRect();
            let offsetY = gridRect.top - children.top, offsetX = gridRect.left - children.left;
            pointsPath.forEach(point => {
                point.x += offsetX, point.y += offsetY;
            });
            this.canvas.drawLines(pointsPath, "#CC8000");
        }
    }
    gridColumnsPos() {
        var cards = this.cards.getAllCards();
        let widths = [], pos = (cards.forEach(card => {
            var w;
            card != this.cardMove && (w = card.elem.getBoundingClientRect().width, 
            !widths[card.posGrid.c] || widths[card.posGrid.c] < w) && (widths[card.posGrid.c] = w);
        }), this.offset / 2);
        var columns = [];
        columns.push(pos);
        for (let i = 0; i < widths.length; i++) pos += widths[i] + this.offset, 
        columns.push(pos);
        return columns;
    }
    gridColumnsPosOld() {
        var cards = this.cards.getAllCards();
        let widths = [], pos = (cards.forEach(card => {
            var w;
            card != this.cardMove && (w = card.elem.getBoundingClientRect().width, 
            !widths[card.posGrid.c] || widths[card.posGrid.c] < w) && (widths[card.posGrid.c] = w);
        }), this.offset * this.scale() / 2);
        var columns = [];
        columns.push(pos);
        for (let i = 0; i < widths.length; i++) pos += widths[i] + this.offset * this.scale(), 
        columns.push(pos);
        return columns;
    }
    gridRowsPos() {
        var cards = this.cards.getAllCards();
        let heights = [], pos = (cards.forEach(card => {
            var h;
            card != this.cardMove && (h = card.elem.getBoundingClientRect().height, 
            !heights[card.posGrid.r] || heights[card.posGrid.r] < h) && (heights[card.posGrid.r] = h);
        }), this.offset * this.scale() / 2);
        var rows = [];
        rows.push(pos);
        for (let i = 0; i < heights.length; i++) pos += heights[i] + this.offset * this.scale(), 
        rows.push(pos);
        return rows;
    }
    mousedownCardState(e) {
        this.editor.stateEditor.actions.changingState || 0 == e.button && (e.stopPropagation(), 
        this.mousePosX = e.clientX, this.mousePosY = e.clientY, e = e.path || e.composedPath && e.composedPath(), 
        e = this.cards.findCardByElement(e[1]), this.dragCardState(e));
    }
    mousemoveCardState(e) {
        var dX, dY, card;
        e.stopPropagation(), this.cardMove && (dX = (this.mousePosX - e.clientX) / this.canvas.scale, 
        dY = (this.mousePosY - e.clientY) / this.canvas.scale, 0 <= (card = this.cardMove.elem).offsetLeft - dX && (this.mousePosX = e.clientX, 
        card.style.left = card.offsetLeft - dX + "px"), 0 <= card.offsetTop - dY && (this.mousePosY = e.clientY, 
        card.style.top = card.offsetTop - dY + "px"), this.showArrows(this.editor.bot.state));
    }
    mouseupCardState(e) {
        e.stopPropagation(), this.cardGrab && this.dropCardState();
    }
    dragCardState(card) {
        1 != this.cards.getContentCards().length && (this.cardMove = card, this.cardGrab = !0, 
        this.extractCard(card), this.updateCard(card), this.showArrows(), document.onmouseup = this.mouseupCardState.bind(this), 
        document.onmousemove = this.mousemoveCardState.bind(this), card.elem.onmouseleave = this.mousemoveCardState.bind(this));
    }
    dropCardState() {
        var moveRect, nearestRect, cardMove = this.cardMove, nearestCard = this.nearestRC(cardMove);
        nearestCard ? (moveRect = this.cardMove.rectLocal(), nearestRect = nearestCard.rectLocal(), 
        moveRect.top >= nearestRect.top + nearestRect.height ? (this.cardMove.setFolder(null), 
        this.insertCard(this.cardMove, 0, nearestCard.posGrid.r + 1)) : moveRect.left >= nearestRect.left + nearestRect.width ? (this.cardMove.setFolder(nearestCard.folder), 
        this.lists.placeCardAfter(this.cardMove, nearestCard)) : "folder" == nearestCard.kind ? this.lists.placeCardInFolder(this.cardMove, nearestCard) : nearestCard.folder ? this.lists.placeCardInFolder(this.cardMove, nearestCard.folder, nearestCard) : (this.cardMove.setFolder(null), 
        this.lists.placeCardBefore(this.cardMove, nearestCard))) : this.insertCard(this.cardMove, 0, 0), 
        this.showGrid(), document.onmouseup = null, document.onmousemove = null, 
        cardMove.elem.onmouseleave = null, this.cardMove = null, this.updateCard(cardMove), 
        this.save(), this.showArrows(), this.cardGrab = !1;
    }
    mousedownCardAdd(e) {
        this.editor.stateEditor.actions.changingState || (e.stopPropagation(), this.mousePosY = e.clientY, 
        1 != this.cards.getAddCards().length && (e = e.path || e.composedPath && e.composedPath(), 
        e = this.cards.findCardByElement(e[1]), this.dragCardAdd(e)));
    }
    dragCardAdd(card) {
        var r = card.posGrid.r, cards = this.cards.getAllCardsWithRow(r);
        1 != cards.length && (this.cardAddGrab = !0, this.cardsMove = cards, this.extractCardsRow(cards, r), 
        document.onmouseup = this.mouseupCardAdd.bind(this), document.onmousemove = this.mousemoveCardAdd.bind(this), 
        card.elem.onmouseleave = this.mousemoveCardAdd.bind(this));
    }
    mousemoveCardAdd(e) {
        if (e.stopPropagation(), this.cardsMove && 0 != this.cardsMove.length) {
            var dY = (this.mousePosY - e.clientY) / this.canvas.scale;
            if (0 < this.cardsMove[this.cardsMove.length - 1].elem.offsetTop - dY) {
                this.mousePosY = e.clientY;
                for (let j = 0; j < this.cardsMove.length; j++) {
                    var c = this.cardsMove[j].elem;
                    c.style.top = c.offsetTop - dY + "px";
                }
            }
            this.showArrows(this.editor.bot.state);
        }
    }
    dropCardAdd() {
        var cards = this.cards.getAllCards().filter(function(card) {
            return !(card in this.cardsMove);
        }.bind(this)), cards = this.cards.nearestInList(this.cardsMove[0], cards);
        this.insertCardsRow(this.cardsMove, cards.posGrid.r), document.onmouseup = null, 
        document.onmousemove = null, card.elem.onmouseleave = null, this.cardsMove = null, 
        this.save(), this.showArrows(), this.cardAddGrab = !1;
    }
    mouseupCardAdd(e) {
        e.stopPropagation(), this.cardAddGrab && this.dropCardAdd();
    }
    mousedownCardFolder(e) {
        this.editor.stateEditor.actions.changingState || 0 == e.button && (e.stopPropagation(), 
        this.mousePosX = e.clientX, this.mousePosY = e.clientY, e = e.path || e.composedPath && e.composedPath(), 
        e = this.cards.findCardByElement(e[1]), this.activeFolder = e, this.cardFolderClose(e), 
        this.showGrid(), this.dragCardFolder(e));
    }
    mousemoveCardFolder(e) {
        var dX, dY, card;
        e.stopPropagation(), this.cardMove && (dX = (this.mousePosX - e.clientX) / this.canvas.scale, 
        dY = (this.mousePosY - e.clientY) / this.canvas.scale, 0 <= (card = this.cardMove.elem).offsetLeft - dX && (this.mousePosX = e.clientX, 
        card.style.left = card.offsetLeft - dX + "px"), 0 <= card.offsetTop - dY && (this.mousePosY = e.clientY, 
        card.style.top = card.offsetTop - dY + "px"), this.showArrows(this.editor.bot.state));
    }
    mouseupCardFolder(e) {
        e.stopPropagation(), this.cardGrab && this.dropCardFolder();
    }
    dragCardFolder(card) {
        1 != this.cards.getContentCards().length && (this.cardMove = card, this.cardGrab = !0, 
        this.extractCard(card), document.onmouseup = this.mouseupCardFolder.bind(this), 
        document.onmousemove = this.mousemoveCardFolder.bind(this), this.cardMove.elem.onmouseleave = this.mousemoveCardFolder.bind(this));
    }
    dropCardFolder() {
        var moveRect, nearestRect, nearestCard = this.nearestRC(this.cardMove);
        nearestCard ? (moveRect = this.cardMove.rectLocal(), nearestRect = nearestCard.rectLocal(), 
        moveRect.top >= nearestRect.top + nearestRect.height ? (this.cardMove.setFolder(null), 
        this.insertCard(this.cardMove, 0, nearestCard.posGrid.r + 1)) : moveRect.left >= nearestRect.left + nearestRect.width ? this.lists.placeCardAfter(this.cardMove, nearestCard) : this.lists.placeCardBefore(this.cardMove, nearestCard)) : (this.cardMove.setFolder(null), 
        this.placeCardToPos(this.cardMove, 0, 0)), this.showGrid(), document.onmouseup = null, 
        document.onmousemove = null, this.cardMove.elem.onmouseleave = null, this.cardMove = null, 
        this.save(), this.showArrows(), this.cardGrab = !1;
    }
    onclickCardFolder(e, obj) {
        super.onclickCardFolder(e, obj), 0 == e.button && ((e = this.cards.findCardByElement(obj)).open ? this.cardFolderClose(e) : this.cardFolderOpen(e), 
        this.showGrid(), this.save());
    }
    cardFolderOpen(folderCard) {
        var folderCards = this.cards.getCardsFromFolder(folderCard);
        if (0 != folderCards.length) {
            let r = folderCard.posGrid.r;
            (folderCards = this.cards.getFolderCards()).filter(card => card.posGrid && card.posGrid.r == r && card != folderCard).forEach(card => this.cardFolderClose(card)), 
            super.cardFolderOpen(folderCard);
        }
    }
    nearestRC(card) {
        var cardPos = card.posLocal(card);
        let nearestRow = this.nearestRowPos(cardPos.x, cardPos.y), rowCards;
        for (;rowCards = this.cards.getAllCardsWithRow(nearestRow).filter(cardOther => cardOther != card && cardOther.visible()), 
        --nearestRow, 0 == rowCards.length && 0 <= nearestRow; );
        return this.cards.nearestInList(card, rowCards);
    }
    nearestRowCenter(x, y) {
        var rowsPos = this.gridRowsPos();
        let r = 0, dist = -1, rowCenter = 0;
        for (let i = 0; i < rowsPos.length; i++) {
            if (i < rowsPos.length - 1) rowCenter = (rowsPos[i] + rowsPos[i + 1]) / 2; else {
                if (!(0 < i)) break;
                rowCenter = rowsPos[i] + (rowsPos[i] - rowsPos[i - 1]) / 2;
            }
            var curDist = Math.abs(rowCenter - y);
            (dist < 0 || curDist < dist) && (dist = curDist, r = i);
        }
        return r;
    }
    nearestRowPos(x, y) {
        var rowsPos = this.gridRowsPos();
        let r = 0, dist = -1;
        for (let i = 0; i < rowsPos.length; i++) {
            var curDist = Math.abs(rowsPos[i] - y);
            (dist < 0 || curDist < dist) && (dist = curDist, r = i);
        }
        return r;
    }
    mousedownRowMenuDrag(e) {
        var r = this.nearestRowCenter(0, this.rowMenu.elem.offsetTop);
        let cards = this.cards.getAllCardsWithRow(r);
        0 != (cards = cards.filter(card => card.visible())).length && (e.stopPropagation(), 
        cards.forEach(card => {
            "folder" == card.kind && this.cardFolderClose(card);
        }), this.showGrid(), this.mousePosY = e.clientY, this.rowMenuDragGrab = !0, 
        this.cardsMove = cards, this.extractCardsRow(cards, r), document.onmouseup = this.mouseupRowMenuDrag.bind(this), 
        document.onmousemove = this.mousemoveRowMenuDrag.bind(this), this.rowMenu.elem.onmouseleave = this.mousemoveRowMenuDrag.bind(this));
    }
    mousemoveRowMenuDrag(e) {
        e.stopPropagation();
        var dY = this.mousePosY - e.clientY;
        if (0 < this.cardsMove[this.cardsMove.length - 1].elem.offsetTop - dY) {
            this.mousePosY = e.clientY;
            for (let j = 0; j < this.cardsMove.length; j++) {
                var c = this.cardsMove[j].elem;
                c.style.top = c.offsetTop - dY / this.canvas.scale + "px";
            }
            this.rowMenu.elem.style.top = this.rowMenu.elem.offsetTop - dY + "px";
        }
        this.showArrows(this.editor.bot.state);
    }
    mouseupRowMenuDrag(e) {
        e.stopPropagation(), this.cardsMove && this.dropRowMenuDrag(), document.onmouseup = null, 
        document.onmousemove = null, document.onmouseover = null, this.rowMenu.elem.onmouseleave = null, 
        this.cardsMove = null, this.showRowMenu(), this.showGrid(), this.cardsMove = !1, 
        this.save();
    }
    dropRowMenuDrag() {
        var r = this.nearestRowCenter(0, this.rowMenu.elem.offsetTop);
        this.rowMenu.r = r, this.insertCardsRow(this.cardsMove, r);
    }
    mousedownRowMenuAdd(e) {
        var card, nearest;
        this.editor.readonlyBot() || (card = this.createCardState(null, null), (nearest = this.cards.findCardByColRow(0, this.rowMenu.r)) && nearest.folder ? this.placeCardInFolder(card, nearest.folder, null, nearest) : this.placeCardToPos(card, 0, this.rowMenu.r + 1), 
        this.insertCardsRow([ card ], this.rowMenu.r + 1), this.save(), this.showGrid(), 
        this.editor.setCurStateEditor(card.state));
    }
    mouseoverCard(obj) {
        this.cardsMove || (obj = this.cards.findCardByElement(obj)) && (this.rowMenu.r = obj.posGrid.r, 
        this.showRowMenu());
    }
    mouseenterCardState(obj) {
        obj = this.cards.findCardByElement(obj);
        obj && this.updateCard(obj);
    }
}

class QuBotEditorLists extends QuBotEditorBase {
    constructor(editor) {
        super(editor), this.editor = editor, this.cards = new QuBotCards(), this.list = null, 
        this.listGrid = new QuBotEditorListGrid(this.cards, this), this.listFree = new QuBotEditorListFree(this.cards, this), 
        this.lists = [ this.listGrid, this.listFree ], this.kindView = "grid", this.clipboard = {
            copyStep: null,
            copyFolder: null
        };
    }
    select(kindView) {
        var newList = kindView && "grid" != kindView ? this.listFree : this.listGrid;
        return this.list && this.list != newList && this.list.hide(), this.list = newList, 
        this.kindView = kindView, this.list;
    }
    create() {
        document.getElementById("qubot-states-list");
        document.addEventListener("keypress", this.keypress.bind(this)), console.log(), 
        this.listGrid.create(), this.listFree.create(), this.list.space.addEventListener("contextmenu", e => {
            "qubot-state-space" !== e.target.id && "qubot-disable-select" !== e.target.id || this.list.contextMenuHandler(e);
        }), document.onclick = this.list.spaceOnclickHandler;
        var folder, bot = this.editor.bot, folderCards = this.editor.bot.cards.folders;
        for (folder in folderCards) {
            var folderSave = folderCards[folder];
            this.list.createCardFolder(folder, folderSave);
        }
        var state, stateSave, stateCards = this.editor.bot.cards.states;
        for (state in bot.states) state in stateCards ? (stateSave = stateCards[state], 
        this.list.createCardState(state, null, stateSave)) : this.list.createCardState(state, null);
    }
    keypress(event) {
        this.list.keypress(event);
    }
    placeCardAfter(card, anotherCard) {
        for (var list of this.lists) list.placeCardAfter(card, anotherCard);
    }
    placeCardBefore(card, anotherCard) {
        for (var list of this.lists) list.placeCardBefore(card, anotherCard);
    }
    placeCardInFolder(card, folderCard, beforeCard = null, afterCard = null) {
        for (var list of this.lists) list.placeCardInFolder(card, folderCard, beforeCard, afterCard);
    }
    removeCard(card) {
        var list;
        "folder" == card.kind && this.cards.getContentCardsFromFolder(card).forEach(child => {
            this.removeCard(child);
        }), this.cards.popCard(card);
        for (list of this.lists) list.removeCard(card);
        "state" == card.kind && this.removeState(card.state), card.elem.remove(), 
        this.list.save(), this.list.show();
    }
    removeState(state) {
        if (delete this.editor.bot.states[state], this.editor.bot.start === state || !this.editor.bot.start.length) for (var s in this.editor.bot.states) {
            this.editor.bot.start = s, this.editor.bot.state = s;
            break;
        }
        this.editor.bot.state === state && (this.editor.bot.state = this.editor.bot.start), 
        this.editor.renameState(state, ""), this.editor.listEditor.setStartState(this.editor.bot.start), 
        this.editor.setCurStateEditor(this.editor.bot.state), this.list.save();
    }
}

class QuBotEditorMyBots extends QuBotEditorBase {
    constructor(editor) {
        super(editor), this.editor = editor, this.bots = [], this.bot = null, this.botNumber = null;
    }
    createMyBotsMenu() {
        for (var a, lst, menu = this.editor.menuMyBots; menu.childElementCount; ) menu.lastChild.remove();
        for (let i = 0; i < this.bots.length; i++) {
            (a = this.add(this.editor.menuMyBots, "item")).innerHTML = this.bots[i].name, 
            i === this.botNumber && a.classList.add("checked");
            let editor = this.editor;
            a.onclick = function() {
                editor.myBots.selectBot(i);
            };
        }
        if (this.editor.menuTemplates && (lst = this.editor.menuTemplates.getElementsByClassName("item"), 
        Array.from(lst).forEach(a => {
            a.classList.remove("checked");
        })), this.editor.menuExamples) {
            let lst = this.editor.menuExamples.getElementsByClassName("item");
            Array.from(lst).forEach(a => {
                a.classList.remove("checked");
            });
        }
    }
    emptyBot(name, id) {
        return {
            id: id,
            name: name,
            start: "MAIN",
            states: {
                MAIN: [ {
                    type: "text",
                    text: {
                        en: "Text"
                    }
                }, {
                    type: "buttons",
                    items: [ {
                        items: [ {
                            type: "button",
                            button: {
                                en: "Button"
                            },
                            actions: []
                        } ]
                    } ]
                }, {
                    type: "input",
                    kind: "text",
                    actions: []
                } ]
            },
            slots: {
                LANGUAGE: "en",
                INPUT: ""
            },
            cards: {
                states: {
                    MAIN: {
                        r: 0,
                        c: 0,
                        x: 0,
                        y: 0
                    }
                },
                folders: {}
            }
        };
    }
    newBot(name, load = !0) {
        var bid;
        (name || null != (name = prompt("Please enter your bot name:", "Bot " + (this.bots.length + 1))) && "" != name) && (bid = this.bidGenerator(), 
        this.bots.push({
            id: bid,
            name: name
        }), this.save(), this.bot = this.emptyBot(name, bid), this.save(), this.botNumber = this.bots.length - 1, 
        load && this.editor.loadBot(this.bot), this.createMyBotsMenu());
    }
    async deleteBot() {
        var botID;
        null === this.bot ? this.editor.help.alert("NoActiveBot") : await this.editor.help.delConfirm("DeleteBot") && (botID = this.bot.id, 
        this.bots.splice(this.botNumber, 1), this.bot = null, this.editor.env.deleteBot({
            botID: botID
        }), 0 === this.bots.length ? (this.botNumber = 0, this.newBot("Bot 1")) : this.selectBot(this.botNumber - 1), 
        this.save(), this.createMyBotsMenu(), this.editor.resetEditorAndAllCards());
    }
    renameBot() {
        var name;
        null === this.bot ? this.editor.help.alert("NoBotsForRename") : (name = prompt("Please enter your new name for  bot", this.bots[this.botNumber].name)) && (this.bots[this.botNumber].name = name, 
        this.editor.botName.innerHTML = name ? name.length < 15 ? name : name.substring(0, 14) + "..." : "", 
        this.bot.name = name, this.editor.renameBotEvent(this.bot.id, name), this.save(), 
        this.createMyBotsMenu());
    }
    saveCurrentBot() {
        null !== this.bot && (this.bot.slots = this.editor.bot.slots, this.bot.states = this.editor.bot.states, 
        this.bot.start = this.editor.bot.start, this.bot.cards = this.editor.bot.cards, 
        this.bot.view = this.editor.bot.view, this.save());
    }
    selectBot(i) {
        null !== this.bot && i === this.botNumber || (this.saveCurrentBot(), this.botNumber = i < 0 ? 0 : i, 
        this.bot = null, this.load(this.bots[this.botNumber].id).then(() => {
            this.editor.loadBot(this.bot), this.createMyBotsMenu(), this.saveCurrentBot();
            var lst = this.editor.menuTemplates.getElementsByClassName("item");
            Array.from(lst).forEach(a => {
                a.classList.remove("checked");
            }), lst = this.editor.menuExamples.getElementsByClassName("item"), Array.from(lst).forEach(a => {
                a.classList.remove("checked");
            });
        }).catch(error => {
            this.editor.critical("load bot with id: " + this.bots[this.botNumber].id + " error: ", error);
        }));
    }
    setBot(data, botNumber) {
        data = data || this.emptyBot("My first bot", botID), this.bot = data, this.botNumber = botNumber, 
        this.bots[botNumber] = {
            id: data.id,
            name: data.name
        };
    }
    cloneBot() {
        var bid, name = prompt("You clone the current bot by creating a new one. Enter a name for it:", "Bot " + (this.bots.length + 1));
        name && (this.saveCurrentBot(), bid = this.bidGenerator(), this.bot = {}, 
        this.bot.id = bid, this.bot.name = name, this.bot.view = this.editor.bot.view, 
        this.bot.states = JSON.parse(JSON.stringify(this.editor.bot.states)), this.bot.slots = JSON.parse(JSON.stringify(this.editor.bot.slots)), 
        this.bot.start = JSON.parse(JSON.stringify(this.editor.bot.start)), this.bot.cards = JSON.parse(JSON.stringify(this.editor.bot.cards)), 
        this.bots.push({
            id: bid,
            name: name
        }), this.botNumber = this.bots.length - 1, bid = this.editor.menuTemplates.getElementsByClassName("item"), 
        Array.from(bid).forEach(a => {
            a.classList.remove("checked");
        }), this.save(), this.editor.loadBot(this.bot), this.createMyBotsMenu());
    }
    async clear() {
        await this.editor.help.delConfirm("DeleteAllBots") && await this.editor.help.delConfirm("DeleteAllBots2") && (this.bots = [], 
        this.bot = null, this.save(), this.createMyBotsMenu(), this.botNumber = null);
    }
    save() {
        if (this.bot && !(this.botNumber < 0) && (this.editor.env.save({
            param: "qubotEditorMyBots",
            data: JSON.stringify({
                bots: this.bots,
                botNumber: this.botNumber
            })
        }), null !== this.bot)) {
            ("" + this.bot.id).length < 5 && (this.bot.id = this.bidGenerator(), 
            this.bots[this.botNumber].id = this.bot.id);
            var state, slot, slots = {};
            for (state in this.bot.states) state && state.length && this.bot.states[state] && this.editor.stateEditor.items.getSlots(this.bot.states[state], slots);
            for (slot in slots) !slot.length || slot in this.bot.slots || (this.bot.slots[slot] = "");
            for (let slot in this.bot.slots) this.bot.slots[slot] = null, "LANGUAGE" === slot && (this.bot.slots[slot] = "en");
            this.bot.version = window.editorConfig.version, this.editor.bot.version = window.editorConfig.version, 
            this.bot.view = this.editor.bot.view, this.editor.env.saveBot({
                botID: this.bot.id,
                name: this.bot.name,
                data: JSON.stringify(this.bot)
            });
        }
    }
    async loadBots() {
        return this.editor.env.load({
            param: "qubotEditorMyBots"
        }).then(data => {
            data && ("bots" in data ? (this.bots = data.bots, "botNumber" in data && null !== (data = data.botNumber) && 0 <= data && data < this.bots.length && (this.botNumber = data)) : (this.bots = [], 
            this.bot = null));
        }).catch(error => {
            throw this.editor.critical("load bots error", error), new Error("load bots error");
        });
    }
    async load(botID) {
        return this.editor.env.loadBot({
            botID: botID
        }).then(data => {
            this.setBot(data, this.botNumber);
        }).catch(error => {
            throw this.editor.critical("load bot error", error), new Error("load bots error");
        });
    }
    bidGenerator(a = null) {
        return a ? (a ^ 16 * Math.random() >> a / 4).toString(16) : ("10000000100040008000" + 1e11).replace(/[018]/g, this.bidGenerator);
    }
}

class QuBotEditorExamples {
    constructor() {
        this.bots = {
            Customer: {
                id: 0,
                name: "Customer",
                start: "BEGIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    BEGIN: [ {
                        type: "text",
                        text: {
                            en: "Welcome to our website!",
                            ru: "Приветствую Вас на нашем сайте!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Select your language",
                                    ru: "🌐 Выберите Ваш язык"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📧 Start",
                                    ru: "📧 Начать"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    END: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thanks a lot",
                            ru: "Спасибо большое"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Back to top",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "BEGIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            state: "BEGIN"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "What language do you prefer to communicate in?",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватись?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "en"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "ru"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "Very strange name $INPUT. Could you introduce yourself differently:",
                            ru: "Очень странное имя $INPUT. Не могли бы Вы представиться по другому:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length > 1)\n{\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Our mail: info@qudata.com, and yours, $CUSTOMER_NAME?",
                            ru: "Наша почта: info@qudata.com, а Ваша, $CUSTOMER_NAME?"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_EMAIL = INPUT\n  step("BEFORE_CHECK")\n  if (not CUSTOMER_PHONE)\n  {\n    step("CUSTOMER_PHONE_MAYBE")\n  }\n} else {\n  step("CUSTOMER_EMAIL_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We will not be able to write to you at this address. Will you try again?",
                            ru: "Мы не сможем написать Вам по такому адресу. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if(not CUSTOMER_PHONE)\n{\n step("CUSTOMER_PHONE_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, please enter your phone number:",
                            ru: "$CUSTOMER_NAME, введите пожалуйста Ваш телефон:"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_PHONE = INPUT\n  step("BEFORE_CHECK")\n  if(not CUSTOMER_EMAIL) {\n    step("CUSTOMER_EMAIL_MAYBE")\n  }\n} else {\n  step("CUSTOMER_PHONE_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Will you try again?",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, maybe you will leave your phone? We can send messages in the messenger.",
                            ru: "$CUSTOMER_NAME, может быть Вы оставите Ваш телефон? Мы можем присылать сообщения в месенджере."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, would you mind leaving your email? Sometimes we will send in very useful information.",
                            ru: "$CUSTOMER_NAME, Вы не против оставить Вашу электронную почту? Иногда мы будем присылать очень полезную информацию."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_MESSAGE: [ {
                        type: "text",
                        text: {
                            en: "Write something about yourself or leave any of your suggestions. Your feedback is very important to us.",
                            ru: "Напишите что-нибудь о себе или оставьте любые Ваши предложения. Ваше мнение очень важно для нас."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "CUSTOMER_MESSAGE = INPUT"
                        }, {
                            state: "CUSTOMER_END"
                        } ]
                    } ],
                    CUSTOMER_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n"kind":    "customer",\n"name":    CUSTOMER_NAME,\n"phone":   CUSTOMER_PHONE,\n"mail":    CUSTOMER_EMAIL,\n"message": CUSTOMER_MESSAGE\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you very much $CUSTOMER_NAME 😊, we will contact you shortly.",
                            ru: "Спасибо большое $CUSTOMER_NAME 😊, мы свяжемся с Вами в ближайшее время."
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "END"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_MESSAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change name",
                                    ru: "🤖 Изменить имя"
                                },
                                actions: [ {
                                    state: "CUSTOMER_NAME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change mail",
                                    ru: "💻Изменить почту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change phone",
                                    ru: "📞 Изменить телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            note: ""
                        }, {
                            script: 'if (CUSTOMER_PHONE and CUSTOMER_EMAIL)\n{\n  goto("PHONE_AND_EMAIL")\n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_PHONE)\n{\n  goto("ONLY_PHONE")\n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_EMAIL)\n{\n  goto("ONLY_EMAIL")\n}'
                        }, {
                            note: ""
                        }, {
                            goto: "NOTHING"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact by mail <b> $CUSTOMER_EMAIL </b> and phone <b> $CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b> и телефону <b>$CUSTOMER_PHONE</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b>$CUSTOMER_NAME </b> and you prefer to contact by by mail <b>$CUSTOMER_EMAIL</b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, you have left no phone or mail.",
                            ru: "$CUSTOMER_NAME, Вы не оставили, ни телефона, ни почты."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_NAME: [ {
                        type: "text",
                        text: {
                            en: "Please introduce yourself 🙏:",
                            ru: "Пожалуйста, введите своё имя 🙏:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length < 2)\n{\n  step("CUSTOMER_WRONG_NAME")\n} else {\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_START: [ {
                        type: "actions",
                        actions: [ {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_NAME) \n{\n  goto("CUSTOMER_NAME") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_CHANNEL") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_EMAIL_MAYBE") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_PHONE_MAYBE") \n}'
                        }, {
                            note: ""
                        }, {
                            goto: "BEFORE_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHANNEL: [ {
                        type: "text",
                        text: {
                            en: "We may want to contact you. Is it more convenient for you to communicate by phone or email?",
                            ru: "Возможно, мы захотим связаться с Вами. Вам удобнее общаться по телефону или по электронной почте?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "Nice to meet you $CUSTOMER_NAME!",
                            ru: "Рад знакомству $CUSTOMER_NAME!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_START"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact phone <b>$CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по телефону <b>$CUSTOMER_PHONE</b>. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: ""
                },
                cards: {
                    states: {
                        BEGIN: {
                            c: 0,
                            r: 0,
                            x: 280,
                            y: 147
                        },
                        END: {
                            c: 0,
                            r: 2,
                            x: 599,
                            y: 265
                        },
                        CHANGE_LANGUAGE: {
                            c: 1,
                            r: 0,
                            x: 25,
                            y: 30
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 1,
                            r: 3,
                            x: 832,
                            y: 929.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL: {
                            c: 0,
                            r: 4,
                            x: 1085,
                            y: 1155.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 1,
                            r: 4,
                            x: 1904,
                            y: 1076.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE: {
                            c: 0,
                            r: 5,
                            x: 318,
                            y: 1256.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 1,
                            r: 5,
                            x: 719,
                            y: 1129.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 2,
                            r: 4,
                            x: 644,
                            y: 1390.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 2,
                            r: 5,
                            x: 966,
                            y: 1574.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_MESSAGE: {
                            c: 2,
                            r: 2,
                            x: 1959,
                            y: 880.0124332656075,
                            folder: "Customer"
                        },
                        CUSTOMER_END: {
                            c: 1,
                            r: 2,
                            x: 1693,
                            y: 763.0124439610204,
                            folder: "Customer"
                        },
                        CUSTOMER_CHECK: {
                            c: 3,
                            r: 3,
                            x: 1564,
                            y: 941.0124332656075,
                            folder: "Customer"
                        },
                        BEFORE_CHECK: {
                            c: 3,
                            r: 4,
                            x: 1661,
                            y: 1379.007084045056,
                            folder: "Customer"
                        },
                        PHONE_AND_EMAIL: {
                            c: 0,
                            r: 6,
                            x: 1213,
                            y: 1322.007084045056,
                            folder: "Customer"
                        },
                        ONLY_EMAIL: {
                            c: 2,
                            r: 6,
                            x: 1452,
                            y: 1586.007084045056,
                            folder: "Customer"
                        },
                        NOTHING: {
                            c: 3,
                            r: 6,
                            x: 2023,
                            y: 1362.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_NAME: {
                            c: 0,
                            r: 3,
                            x: 460,
                            y: 847.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_START: {
                            c: 0,
                            r: 2,
                            x: 813,
                            y: 777.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_CHANNEL: {
                            c: 3,
                            r: 2,
                            x: 1214,
                            y: 818.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_GREET: {
                            c: 2,
                            r: 3,
                            x: 430,
                            y: 1053.007084045056,
                            folder: "Customer"
                        },
                        ONLY_PHONE: {
                            c: 1,
                            r: 6,
                            x: 1210,
                            y: 1494.007084045056,
                            folder: "Customer"
                        }
                    },
                    folders: {
                        Customer: {
                            c: 0,
                            r: 1,
                            x: 198,
                            y: 413,
                            openGrid: !1
                        }
                    }
                }
            },
            Checkboxes: {
                id: 0,
                name: "Checkboxes",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Multiple choice:</b>"
                        },
                        color: "#006400",
                        center: 0
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Option1"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "Option2"
                                },
                                actions: [],
                                kind: "check",
                                checked: !1
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Option3"
                                },
                                actions: [],
                                kind: "check",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "Option4"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Single choice:</b>"
                        },
                        color: "#006400",
                        center: 0
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "R1"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "R2"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "R3"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !1
                            } ]
                        } ]
                    }, {
                        type: "note",
                        note: "Click the 🚀 to see the script, which obtains the values of the selected buttons. Actions check_get, radio_get are to be called after the buttons appear."
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "CHECKS = get_check()\nRADIOS = get_radio()\nCOUNT = 0\nfor(i in CHECKS) {\n  COUNT += i\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Script results:</b>\nCHECKS = {CHECKS}\nChecked first: {CHECKS[0]}, checked last: {CHECKS[-1]}, total: {COUNT}\n\nRADIOS = {RADIOS}"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next"
                                },
                                actions: [ {
                                    script: "WAS = 0"
                                }, {
                                    state: "SET_CHECKS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SET_CHECKS: [ {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Op1"
                                },
                                actions: [],
                                kind: "check",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "Op2"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "Op3"
                                },
                                actions: [],
                                kind: "check",
                                checked: 0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Back"
                                },
                                actions: [ {
                                    state: "MAIN"
                                }, {
                                    slot: "WAS",
                                    value: "0"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "note",
                        note: "When you first enter the step, the values of the checkboxes are set to [0,1,0]."
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "if(not WAS){\n  CHECK = [0,1,0]\n  set_check(CHECK)\n  WAS = 1\n}"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    CHECKS: "",
                    RADIOS: "",
                    COUNT: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 160,
                            y: 3
                        },
                        SET_CHECKS: {
                            c: 1,
                            r: 0,
                            x: 50,
                            y: 295
                        }
                    },
                    folders: {}
                }
            },
            Flipping: {
                id: 0,
                name: "Flipping",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "note",
                        note: "It's an example of flipping through images. Click on the actions (rocket) below."
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Save the full path to image in the URL slot."
                        }, {
                            slot: "URL",
                            value: "'https://qudata.com/qubot/im/ex/flipp/'"
                        }, {
                            note: 'The START slot is a list (square brackets). Its elements are objects (curly braces).\n\nEach object consists of the "im" key (file name) and the "nm" key (the name of the actress).'
                        }, {
                            slot: "STARS",
                            value: "[\n{im: 'Jolie.jpg',    nm: 'Angelina Jolie'},\n{im: 'Jovovich.jpg', nm: 'Milla Jovovich'},\n{im: 'Kidman.jpg',   nm: 'Nicole Kidman'},\n{im: 'Stone.jpg',    nm: 'Sharon Stone'},\n]"
                        }, {
                            note: 'In script action "len" takes the length of the list from the first argument and writes it to the slot from the second argument. \n\nThus, the LEN slot will be equal to 4.'
                        }, {
                            script: "LEN = STARS.length"
                        }, {
                            note: "The INDEX slot will contain the number of the current image (starting from zero)."
                        }, {
                            slot: "INDEX",
                            value: "0"
                        }, {
                            note: "When all is set, we will jump instantly to step STEP_2."
                        }, {
                            goto: "FLIPPING_STEP"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FLIPPING_STEP: [ {
                        type: "note",
                        note: "In the actions below, the chat history is cleared and the current image is displayed."
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "If the value equals -1, the whole chat history will be cleared. If the number is positive, the defined number of previous messages will be deleted."
                        }, {
                            clear: "-1"
                        }, {
                            note: 'In the script, the "image" action outputs an image to the current message. The action argument is the address of the image. It is formed from the $URL prefix and the image name saved in the STARS list.\n\nThe $STARS[$INDEX] entry gives an item in the STARS list numbered $INDEX. Then, after a dot, you specify the name of the key which value you want to extract from the item.'
                        }, {
                            script: "image(URL + STARS[INDEX].im)"
                        } ]
                    }, {
                        type: "note",
                        note: 'The text below contains the name of the actress. It is obtained from the item of the STARS list with the number $INDEX, using the "nm" key (see the explanations above in the rocket).'
                    }, {
                        type: "text",
                        text: {
                            en: "{STARS[INDEX].nm}"
                        },
                        center: 1
                    }, {
                        type: "note",
                        note: "Flip through the images with these two buttons. Click them to check the respective actions."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁"
                                },
                                actions: [ {
                                    note: "Pressing the previous button decreases the image number by one. The value of the slot is obtained by adding the dollar symbol to its name."
                                }, {
                                    slot: "INDEX",
                                    value: "INDEX - 1"
                                }, {
                                    note: "If the image number becomes less than zero, then it will be equal to the length of the list minus one (the elements are numbered starting from zero)."
                                }, {
                                    if: "INDEX < 0",
                                    actions: [ {
                                        slot: "INDEX",
                                        value: "LEN - 1"
                                    } ]
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷"
                                },
                                actions: [ {
                                    note: "Pressing the next button increases the image number by one. The value of the slot is obtained by adding the dollar symbol to its name."
                                }, {
                                    slot: "INDEX",
                                    value: "INDEX + 1"
                                }, {
                                    note: "If the number of the image becomes greater than or equal to the length of the list, then it will be set to zero (the elements are numbered from zero)."
                                }, {
                                    if: "INDEX >= LEN",
                                    actions: [ {
                                        slot: "INDEX",
                                        value: "0"
                                    } ]
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Select"
                                },
                                actions: [ {
                                    state: "SELECTED_ITEM"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECTED_ITEM: [ {
                        type: "text",
                        text: {
                            en: "Your choice is <b>{STARS[INDEX].nm}</b>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Back"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    STARS: "",
                    INDEX: "",
                    URL: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 32,
                            y: 110
                        },
                        FLIPPING_STEP: {
                            c: 1,
                            r: 0,
                            x: 288,
                            y: 0
                        },
                        SELECTED_ITEM: {
                            c: 2,
                            r: 0,
                            x: 254,
                            y: 231
                        }
                    },
                    folders: {}
                }
            },
            Inputs: {
                id: 0,
                name: "Inputs",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "text",
                        text: {
                            en: "What do you want to enter? ",
                            ru: "Что хотите ввести?"
                        },
                        center: 0
                    }, {
                        type: "note",
                        note: "Input Templates\n- version: 1.0.1"
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Name",
                                    ru: "Имя"
                                },
                                actions: [ {
                                    state: "NAME"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Title",
                                    ru: "Название"
                                },
                                actions: [ {
                                    state: "TITLE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "E-mail",
                                    ru: "E-mail"
                                },
                                actions: [ {
                                    state: "EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Phone",
                                    ru: "Телефон"
                                },
                                actions: [ {
                                    state: "PHONE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Date",
                                    ru: "Дата"
                                },
                                actions: [ {
                                    state: "DATE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Date EN",
                                    ru: "Дата EN"
                                },
                                actions: [ {
                                    state: "DATE_EN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Time",
                                    ru: "Время"
                                },
                                actions: [ {
                                    state: "TIME"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Count",
                                    ru: "Количество"
                                },
                                actions: [ {
                                    state: "COUNT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Range",
                                    ru: "Диапазон"
                                },
                                actions: [ {
                                    state: "RANGE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Price",
                                    ru: "Сумма"
                                },
                                actions: [ {
                                    state: "PRICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Язык"
                                },
                                actions: [ {
                                    state: "Language"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NAME: [ {
                        type: "text",
                        text: {
                            en: "Please, enter your name:",
                            ru: "Введите, пожалуйста, Ваше имя:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_NAME"
                        }, {
                            note: "Проверяем условие. В данном случае, что длина имени больше одного. (Вдруг имя - Ян)"
                        }, {
                            if: "INPUT.length > 1",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "NAME",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    PHONE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter your phone number:",
                            ru: "Введите, пожалуйста, Ваш номер телефона:"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_PHONE"
                        }, {
                            note: "Проверяем введённое значение. Если был введён не телефон, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "PHONE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Please, enter your e-mail:",
                            ru: "Введите, пожалуйста, Ваш e-mail:"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_EMAIL"
                        }, {
                            note: "Проверяем введённое значение. Если был введён не e-mail, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "EMAIL",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    DATE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the date (month/day/year):",
                            ru: "Введите, пожалуйста, дату (день/месяц/год):"
                        }
                    }, {
                        type: "input",
                        kind: "DDMMYYYY",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_DATE"
                        }, {
                            note: "Проверяем введённое значение. Если была введена не дата, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "DATE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    TIME: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the time (hours:minutes):",
                            ru: "Введите, пожалуйста, время (часы:минуты):"
                        }
                    }, {
                        type: "input",
                        kind: "time",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_TIME"
                        }, {
                            note: "Проверяем введённое значение. Если было введено не время, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "TIME",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    COUNT: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the required amount of products:",
                            ru: "Введите, пожалуйста, желаемое количество товара:"
                        }
                    }, {
                        type: "input",
                        kind: "int",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_COUNT"
                        }, {
                            note: "Проверяем введённое значение. Если было введёно не число, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "COUNT",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    PRICE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the deposit amount:",
                            ru: "Введите, пожалуйста, сумму вклада:"
                        }
                    }, {
                        type: "input",
                        kind: "float",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_PRICE"
                        }, {
                            note: "Проверяем введённое значение. Если было введёно не число, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "PRICE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    TITLE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the name of the product:",
                            ru: "Введите, пожалуйста, название товара:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_TITLE"
                        }, {
                            note: "Проверяем условие. В данном случае, что длина названия товара больше двух. (напр. Сыр, Сок). Можно установить необходимый минимальный порог."
                        }, {
                            if: "INPUT.length > 2",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "TITLE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    END: [ {
                        type: "note",
                        note: "Выводим благодарность за данные. Используйте свой текст."
                    }, {
                        type: "text",
                        text: {
                            en: "Thanks!",
                            ru: "Спасибо!"
                        }
                    }, {
                        type: "note",
                        note: "Ниже вывод значений слотов. В ботах так делать не нужно."
                    }, {
                        type: "text",
                        text: {
                            en: "Name: $NAME\nPhone: $PHONE\nE-mail: $EMAIL\nDate: $DATE\nTime: $TIME\nAmount: $COUNT\nPrice: $PRICE\nTitle: $TITLE\nRange: $RANGE",
                            ru: "Имя: $NAME\nТелефон: $PHONE\nE-mail: $EMAIL\nДата: $DATE\nВремя: $TIME\nКоличество: $COUNT\nСумма: $PRICE\nНазвание: $TITLE\nДиапазон: $RANGE"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Main menu",
                                    ru: "Главное меню"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "The name has be at least two characters.",
                            ru: "Имя должно состоять минимум из двух символов."
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "NAME"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_PHONE: [ {
                        type: "text",
                        text: {
                            en: "The entered phone number is invalid. Try entering the number in the international format: +380978745874",
                            ru: "Извините, введённый формат неверный. Попробуйте ввести номер в международном формате: +380978745874"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "The entered e-mail seems invalid. Please, try using the name@inbox.com format",
                            ru: "Извините, введённый e-mail имеет неверный формат. Попробуйте ввести в формате name@inbox.com"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_DATE: [ {
                        type: "text",
                        text: {
                            en: "The date could not be recognized. Try using the following format: 12/31/2022",
                            ru: "Извините, не удалось распознать дату. Попробуйте использовать следующий формат: 31/12/2022"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "DATE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_TIME: [ {
                        type: "text",
                        text: {
                            en: "The time could not be recognized. Try using the following format: 12:50",
                            ru: "Извините, не удалось распознать время. Попробуйте использовать следующий формат: 12:50"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "TIME"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_COUNT: [ {
                        type: "text",
                        text: {
                            en: "Please enter an integer.",
                            ru: "Введите, пожалуйста, целое число."
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "COUNT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_PRICE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the amount, for example, 12.33.",
                            ru: "Введите, пожалуйста, сумму, например, 12.33."
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "PRICE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_TITLE: [ {
                        type: "text",
                        text: {
                            en: "The product name has to contain at least three characters:",
                            ru: "Название товара должно состоять минимум из трёх символов:"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "TITLE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    Language: [ {
                        type: "note",
                        note: "Это шаг Edit Step -> Change Language"
                    }, {
                        type: "actions",
                        actions: [ {
                            state: "Language"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "What language do you prefer to use?",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватися?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Main menu",
                                    ru: "Главное меню"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DATE_EN: [ {
                        type: "text",
                        text: {
                            en: "Please, enter the date (month/day/year):",
                            ru: "Введите, пожалуйста, дату (месяц/день/год):"
                        }
                    }, {
                        type: "input",
                        kind: "MMDDYYYY",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_DATE_EN"
                        }, {
                            note: "Проверяем введённое значение. Если была введена не дата, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "DATE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ]
                    } ],
                    WRONG_DATE_EN: [ {
                        type: "text",
                        text: {
                            en: "The date could not be recognized. Try using the following format: 12/31/2022",
                            ru: "Извините, не удалось распознать дату. Попробуйте использовать следующий формат: 12/31/2022"
                        }
                    }, {
                        type: "note",
                        note: "Кнопки ниже использовать не обязательно. Можно реализовать свою логику, например, через Timer или переименовать кнопки."
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "DATE_EN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RANGE: [ {
                        type: "actions",
                        actions: [ {
                            slot: "min",
                            value: "0"
                        }, {
                            slot: "max",
                            value: "10"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter number in range {min} to {max}:",
                            ru: "Введите, пожалуйста, число в диапазоне от {min} до {max}:"
                        }
                    }, {
                        type: "input",
                        kind: "range",
                        actions: [ {
                            note: "Устанавливаем куда переходить по умолчанию, т.е. если ввели неверное значение."
                        }, {
                            state: "WRONG_RANGE"
                        }, {
                            note: "Проверяем введённое значение. Если было введено не число, то в INPUT будет null и условие не выполнится."
                        }, {
                            if: "INPUT >= min and INPUT <= max",
                            actions: [ {
                                note: "Если всё ок, то записываем значение в слот."
                            }, {
                                slot: "RANGE",
                                value: "INPUT"
                            }, {
                                note: "И переходим на следующий шаг."
                            }, {
                                state: "END"
                            } ]
                        } ],
                        params: {
                            min: 0,
                            max: 10
                        }
                    } ],
                    WRONG_RANGE: [ {
                        type: "text",
                        text: {
                            en: "Sorry, you entered a number out of range. Try to enter a number from {min} to {max}:",
                            ru: "Извините, Вы ввели число, выходящее за диапазон. Попробуйте ввести число от {min} до {max}:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Retry",
                                    ru: "Повторить"
                                },
                                actions: [ {
                                    state: "RANGE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Cancel",
                                    ru: "Отменить"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    NAME: "",
                    PHONE: "",
                    EMAIL: "",
                    DATE: "",
                    TIME: "",
                    COUNT: "",
                    PRICE: "",
                    TITLE: "",
                    min: "",
                    max: "",
                    RANGE: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 869,
                            y: 929
                        },
                        NAME: {
                            c: 0,
                            r: 1,
                            x: 1729,
                            y: 855
                        },
                        PHONE: {
                            c: 0,
                            r: 2,
                            x: 1801,
                            y: 944
                        },
                        EMAIL: {
                            c: 0,
                            r: 3,
                            x: 352,
                            y: 736
                        },
                        DATE: {
                            c: 0,
                            r: 4,
                            x: 325,
                            y: 871
                        },
                        TIME: {
                            c: 0,
                            r: 5,
                            x: 366,
                            y: 1032
                        },
                        COUNT: {
                            c: 0,
                            r: 6,
                            x: 1829,
                            y: 1205
                        },
                        PRICE: {
                            c: 0,
                            r: 7,
                            x: 461,
                            y: 1116
                        },
                        TITLE: {
                            c: 0,
                            r: 8,
                            x: 1775,
                            y: 1322
                        },
                        END: {
                            c: 1,
                            r: 0,
                            x: 1256,
                            y: 1152
                        },
                        WRONG_NAME: {
                            c: 1,
                            r: 1,
                            x: 2050,
                            y: 707
                        },
                        WRONG_PHONE: {
                            c: 1,
                            r: 2,
                            x: 2165,
                            y: 849
                        },
                        WRONG_EMAIL: {
                            c: 1,
                            r: 3,
                            x: 14,
                            y: 754
                        },
                        WRONG_DATE: {
                            c: 1,
                            r: 4,
                            x: 24,
                            y: 909
                        },
                        WRONG_TIME: {
                            c: 1,
                            r: 5,
                            x: 65,
                            y: 1042
                        },
                        WRONG_COUNT: {
                            c: 1,
                            r: 6,
                            x: 2202,
                            y: 1216
                        },
                        WRONG_PRICE: {
                            c: 1,
                            r: 7,
                            x: 91,
                            y: 1183
                        },
                        WRONG_TITLE: {
                            c: 1,
                            r: 8,
                            x: 2155,
                            y: 1378
                        },
                        Language: {
                            c: 2,
                            r: 0,
                            x: 392,
                            y: 577
                        },
                        DATE_EN: {
                            c: 0,
                            r: 9,
                            x: 1838,
                            y: 1069
                        },
                        WRONG_DATE_EN: {
                            c: 1,
                            r: 9,
                            x: 2183,
                            y: 1036
                        },
                        RANGE: {
                            c: 0,
                            r: 10,
                            x: 541,
                            y: 1205
                        },
                        WRONG_RANGE: {
                            c: 1,
                            r: 10,
                            x: 213,
                            y: 1320
                        }
                    },
                    folders: {}
                }
            },
            Lists: {
                id: 0,
                name: "Lists",
                start: "INIT",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "message",
                        typing: "0"
                    }, {
                        type: "note",
                        note: "This example demonstrates adding objects to a list. Click on the actions (🚀) for further comments. Comments are also found in the buttons and cards of the next steps."
                    }, {
                        type: "actions",
                        actions: [ {
                            note: 'There is no step action in product buttons. Therefore, there will be a transition to this step. Another step is specified under "Order" the button.'
                        }, {
                            state: "AMOUNT"
                        }, {
                            note: "The name of the current step is stored in the SAVE_STEP slot. Thus, the bot will be able to return here from the ORDER step. So, the ORDER step can be accessed in two ways: from this step and from ADD_ITEM_TO_ORDER."
                        }, {
                            slot: "SAVE_STEP",
                            value: '"MAIN"'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "You can choose the following products:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🥛 Milk"
                                },
                                actions: [ {
                                    note: "The name of the product is stored in the ITEM slot, and its price in the PRICE slot."
                                }, {
                                    slot: "ITEM",
                                    value: '"Milk"'
                                }, {
                                    slot: "PRICE",
                                    value: "10"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🍷 Wine"
                                },
                                actions: [ {
                                    slot: "ITEM",
                                    value: '"Wine"'
                                }, {
                                    slot: "PRICE",
                                    value: "100"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🧀 Cheese"
                                },
                                actions: [ {
                                    slot: "ITEM",
                                    value: '"Cheese"'
                                }, {
                                    slot: "PRICE",
                                    value: "50"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🍬 Sweets"
                                },
                                actions: [ {
                                    slot: "ITEM",
                                    value: '"Candy"'
                                }, {
                                    slot: "PRICE",
                                    value: "2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 Order"
                                },
                                actions: [ {
                                    state: "ORDER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AMOUNT: [ {
                        type: "actions",
                        actions: [ {
                            state: "ADD_ITEM_TO_ORDER"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "{ITEM} is a great choice!\nHow many units do you want to order?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "1"
                                },
                                actions: [ {
                                    slot: "AMOUNT",
                                    value: "1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "2"
                                },
                                actions: [ {
                                    slot: "AMOUNT",
                                    value: "2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "3"
                                },
                                actions: [ {
                                    slot: "AMOUNT",
                                    value: "3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Enter a different amount"
                                },
                                actions: [ {
                                    state: "ANY_AMOUNT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ORDER: [ {
                        type: "actions",
                        actions: [ {
                            if: "ORDER.length > 0",
                            actions: [ {
                                script: 'local i = 1\nfor(item in ORDER){\n   text("{i}. {item.I}  {item.A} * {item.P} = {item.A * item.P}")\n   i++\n}\nTOTAL = ORDER.total(A*P)\ntext("Total: <b>{TOTAL}</b>")'
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                script: 'text("You haven\'t ordered anything yet.")'
                            }, {
                                goto: "MAIN"
                            } ]
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    script: "step(SAVE_STEP)"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛠️ Remove"
                                },
                                actions: [ {
                                    state: "REMOVE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙊 Clear all"
                                },
                                actions: [ {
                                    script: "ORDER.clear()"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_ITEM_TO_ORDER: [ {
                        type: "actions",
                        actions: [ {
                            note: 'In the script, the "add" action adds an object consisting of three key-value pairs (I, A, P) to the ORDER list. The object is surrounded by curly braces. Values are taken from slots with dollar signs preceding their names.\n\nThe second argument of the "add" action lists the keys which values have to be aggregated (increased) when added. Below is the quantity of prooducts (key "A"). Aggregation occurs if the keys from the third argument list match. And the "I" key value stores the name of the product.'
                        }, {
                            script: "local res = true\nfor(item in ORDER) {\n  if(item.I == ITEM) {\n    item.A += AMOUNT\n    res = false\n  }\n}\nif(res == true){\n  ORDER.push({\n    I: ITEM, \n    A: AMOUNT, \n    P: PRICE\n  })\n}"
                        }, {
                            slot: "SAVE_STEP",
                            value: '"AMOUNT"'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "I added {AMOUNT} units of {ITEM} to the order."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🧾 Let's add more?"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 Order"
                                },
                                actions: [ {
                                    state: "ORDER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    REMOVE: [ {
                        type: "note",
                        note: "Click the edit field to check the important comments in the Item properties."
                    }, {
                        type: "text",
                        text: {
                            en: "Which product do you want to delete?"
                        }
                    }, {
                        type: "input",
                        kind: "int",
                        actions: [ {
                            note: 'A user is expected to enter an integer, which will be stored in the INPUT slot.\n\nIn the "if" condition, we check if he number is positive, in which case the product is removed from the list. \n\nThe ORDER list items are numbered from 0. Therefore, one is subtracted from $INPUT.'
                        }, {
                            if: "INPUT and INPUT > 0 and INPUT <= ORDER.length",
                            actions: [ {
                                script: "ORDER.splice(INPUT - 1, 1)"
                            }, {
                                state: "ORDER"
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                state: "WRONG_ITEM_INDEX"
                            } ]
                        } ]
                    } ],
                    ANY_AMOUNT: [ {
                        type: "text",
                        text: {
                            en: "How many units would you like to order?"
                        },
                        pre: 0
                    }, {
                        type: "input",
                        kind: "int",
                        actions: [ {
                            if: "INPUT",
                            actions: [ {
                                state: "ADD_ITEM_TO_ORDER"
                            }, {
                                slot: "AMOUNT",
                                value: "INPUT"
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                state: "WRONG_AMOUNT"
                            } ]
                        } ]
                    } ],
                    WRONG_AMOUNT: [ {
                        type: "text",
                        text: {
                            en: "The amount has to be an integer!"
                        },
                        color: "#ff0000"
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ANY_AMOUNT"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_ITEM_INDEX: [ {
                        type: "text",
                        text: {
                            en: "The number of the removed units can span from 1 to {COUNT+1}."
                        },
                        color: "#ff0000"
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "REMOVE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INIT: [ {
                        type: "actions",
                        actions: [ {
                            script: "ORDER = []"
                        }, {
                            goto: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    AMOUNT: "",
                    SAVE_STEP: "",
                    ORDER: "",
                    ITEM: "",
                    PRICE: "",
                    TOTAL: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 1,
                            r: 0,
                            x: 264,
                            y: 135
                        },
                        AMOUNT: {
                            c: 2,
                            r: 0,
                            x: 561,
                            y: 38
                        },
                        ORDER: {
                            c: 0,
                            r: 1,
                            x: 518,
                            y: 346
                        },
                        ADD_ITEM_TO_ORDER: {
                            c: 3,
                            r: 0,
                            x: 1261,
                            y: 230
                        },
                        REMOVE: {
                            c: 1,
                            r: 1,
                            x: 834,
                            y: 418
                        },
                        ANY_AMOUNT: {
                            c: 0,
                            r: 2,
                            x: 871,
                            y: 19
                        },
                        WRONG_AMOUNT: {
                            c: 1,
                            r: 2,
                            x: 1263,
                            y: 109
                        },
                        WRONG_ITEM_INDEX: {
                            c: 2,
                            r: 1,
                            x: 1202,
                            y: 372
                        },
                        INIT: {
                            c: 0,
                            r: 0,
                            x: 17,
                            y: 33
                        }
                    },
                    folders: {}
                }
            },
            Media: {
                id: 0,
                name: "Media",
                start: "VIDEO",
                version: "1.0.0",
                view: "grid",
                states: {
                    VIDEO: [ {
                        type: "video",
                        url: "https://qudata.com/qubot/qudata.mp4",
                        stop: 1,
                        control: 0,
                        play: 1,
                        loop: 0
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next "
                                },
                                actions: [ {
                                    state: "AUDIO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AUDIO: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: "75",
                            url: "https://qudata.com/qubot/im/owl_a.png"
                        } ]
                    }, {
                        type: "audio",
                        url: "https://qudata.com/qubot/QuOwl.mp3",
                        stop: 1,
                        play: 1,
                        control: 0,
                        loop: 0
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Back"
                                },
                                actions: [ {
                                    state: "VIDEO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: ""
                },
                cards: {
                    states: {
                        VIDEO: {
                            c: 0,
                            r: 0,
                            x: 80,
                            y: 14
                        },
                        AUDIO: {
                            c: 1,
                            r: 0,
                            x: 368,
                            y: 148
                        }
                    },
                    folders: {}
                }
            },
            Messages: {
                id: 0,
                name: "Messages",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "note",
                        note: "Below are the properties of the first message. \nThey only need to be set if you want to add the typing effect and/or change the message background color."
                    }, {
                        type: "message",
                        typing: "2000",
                        back: "#ffff00"
                    }, {
                        type: "text",
                        text: {
                            en: "Text 1"
                        },
                        color: "#ff1900",
                        center: 1
                    }, {
                        type: "note",
                        note: 'The following text, "Text 2", will be displayed in a new message with a typing effect before it.'
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Text 2"
                        }
                    }, {
                        type: "note",
                        note: 'The "Next" button opens STEP_2. \nIn this step, there is a "goto" action that instantly opens STEP_3.'
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next"
                                },
                                actions: [ {
                                    state: "MESSAGE_1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "MESSAGE_1"
                        } ]
                    } ],
                    MESSAGE_1: [ {
                        type: "text",
                        text: {
                            en: "Text 3"
                        }
                    }, {
                        type: "note",
                        note: 'Click the rocket to see the "goto" action, taking you instantly to STEP_3. The typing effect precedes the step.'
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "MESSAGE_2"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MESSAGE_2: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: 'Text 4\n<b class="green">Clicking on the Clear button will clear the chat history.</b>'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Clear"
                                },
                                actions: [ {
                                    state: "GREEN_MESSAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GREEN_MESSAGE: [ {
                        type: "note",
                        note: 'Click the rocket and set the value -1 in the "clear" field to clear the chat history. All previous messages in the current session will be deleted, and then the text of the current step will be displayed.\n'
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: '<b class="green">Chat cleared</b>'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next"
                                },
                                actions: [ {
                                    state: "MESSAGES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MESSAGES: [ {
                        type: "text",
                        text: {
                            en: "Text A"
                        }
                    }, {
                        type: "message"
                    }, {
                        type: "text",
                        text: {
                            en: "Text B"
                        }
                    }, {
                        type: "message"
                    }, {
                        type: "text",
                        text: {
                            en: 'Text C\n<b class="green">After clicking "Next", two previous messages will be deleted.</b>'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next"
                                },
                                actions: [ {
                                    state: "CLEAR"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CLEAR: [ {
                        type: "note",
                        note: 'Click the rocket to set the number of previous messages to be cleared in the "clear" field.'
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "2"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: '<b class="green">2 previous messages were deleted.</b>'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Home"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 381,
                            y: 140
                        },
                        MESSAGE_1: {
                            c: 0,
                            r: 1,
                            x: 752,
                            y: 74
                        },
                        MESSAGE_2: {
                            c: 1,
                            r: 1,
                            x: 1119,
                            y: 149
                        },
                        GREEN_MESSAGE: {
                            c: 0,
                            r: 2,
                            x: 812,
                            y: 379
                        },
                        MESSAGES: {
                            c: 0,
                            r: 3,
                            x: 434,
                            y: 363
                        },
                        CLEAR: {
                            c: 1,
                            r: 3,
                            x: 16,
                            y: 273
                        }
                    },
                    folders: {}
                }
            },
            NLU: {
                id: 0,
                name: "NLU",
                start: "NLU_INTENTS",
                version: "1.0.0",
                view: "grid",
                states: {
                    NLU_INTENTS: [ {
                        type: "actions",
                        actions: [ {
                            script: "INTENT = ''\nCONFIDENCE = ''"
                        } ]
                    }, {
                        type: "note",
                        note: "Below (monkey) are the affirmative intentions of users. They are made in two languages (English and Russian). The language switch is in the upper right corner of the step editor."
                    }, {
                        type: "intents",
                        actions: [ {
                            intent: "YES",
                            words: {
                                en: "yes; of course; with pleasure; i think yes; okay; \nuh-huh; duh; dah; always; y; ya;  yup; indeed; \nthat sounds good; correct;  alright; good; ok; k; kk; okidoki; okey dokey; sure; for sure; eya; aye; aye aye; jeah; fine;  yeah; yea; yep; cool; you got it;\nabsolutely; totally; certainly; sign me in; you betcha; \nyou bet; alrighty; very well; gladly; definitely; \nagree; agreed; i agree; by all means; \nsounds good; undoubtedly; i’d be delighted; \naffirmative; positive; no doubt; no doubts; \nwithout a doubt; without doubts; sure thing; \nno worries; obviously; a-okey; a-ok; oki-doki; \noki-dokie; okay-dokay; oki doki; oki dokie; \nokidokie; o' course; yeahh; yup; right; \nrighty right; all right; deal; okey; okey-doke; \nyah; doubtless; beyond doubt; surely; \ndoubtlessly; i’m sure; i am sure; confident; \ni’m confident; i am confident; it’s correct; \nit is correct; this is correct; i’m certain;\ni am certain; true; it’s true; it is true; why not; exactly;",
                                ru: "да; пожалуй; конечно; давайте; давай;\nуговорила; уговорил; охотно; ok; ок; ага; \nугу; да-да; разумеется; обязательно; \nестественно; безусловно; пожалуй да; \nда пожалуйста; да конечно; ну давайте; \nну давай; давай конечно; ладно; ладно уж;  \nо да; с радостью; с удовольствием; а как же; \nа то; а то как же; верно; именно; вот именно; \nхорошо; согласен; согласна; соглашусь; \nпожалуй соглашусь; еще бы; несомненно; \nопределенно; точно; плюс; подтверждаю; \nсамо собой разумеется; ну разумеется; \nтак точно; ответ положительный; наверное да; \nскорее всего; я за; всенепременно; таки да;\nбез сомнения; без сомнений; одобряю; за; \nне против; я не против; почему бы и нет; \nпочему бы и да; наверно да; правильно;\nэто правильно; соглашаюсь; я соглашаюсь;"
                            }
                        }, {
                            intent: "NO",
                            words: {
                                en: "no; n; nope; not yet; not today; next time; nay; \nnuh; nuh-uh; pass; i’ll pass; nae; can’t; i can’t;\nnot now; never; ne'er; i don't want; i don't think so;\ndon't like that; no way; nah; sorry but no; \nnot ever; certainly not; by no means; not likely; \nno thanks; i think not; unfortunately not; \nnot this time; not for me; it’s not my thing; \ni will pass; i’m not interested; not interested; \ncan not; cannot; I’d rather not; can’t make it; \ni can’t make it; forget it; hell no; negative; \nminus; no siree; reject; deny; refuse; i reject; \ni deny; i refuse; no indeed; not really; far from it;\nnot nearly; of course not; absolutely not; \nmost certainly not; under no circumstances;\nin no circumstances; not once; at no time;\nnot on your life; not in your life; not at all;\nby no manner of means; not true; it’s not true; \nit is not true; this is not true; incorrect;\nit’s incorrect; it is incorrect; this is incorrect;\nnot correct; it’s not correct; it is not correct; \nthis is not correct; wrong; it’s wrong; it is wrong;\nthis is wrong; false; improper; it’s improper; \nit is improper; this is improper; untrue;\nit’s untrue; it is untrue; this is untrue;\ninaccurate; it’s inaccurate; it is inaccurate; \nthis is inaccurate; imprecise; it’s imprecise; \nit is imprecise; this is imprecise; inexact; \nit’s inexact; it is inexact; this is inexact;\nnot exact; not exactly;",
                                ru: "не; нет; неа; sorry; сори; сорри;\nпока нет; нет ещё; нет еще; никак нет; \nни в коем случае; никогда; ни за что;\nдаже не подумаю; не хочу; я не хочу; \nне буду; я не буду; жаль, но нет; \nне сейчас; в другой раз; не сегодня; \nувы нет; вряд ли; в ряд ли; врядли; \nни за какие коврижки; вовсе нет;\nи в помине нет; не нужно; нетушки; \nответ отрицательный; нефига; ни фига;\nнифига; и не подумаю; на за что на свете; \nкак бы не так; как бы ни так; какбы ни так; \nкакбы не так; не нужно; мне это не нужно; \nя не согласен; не согласен; согласия не даю; \nне согласна; я не согласна; не соглашусь;\nне соглашаюсь; я не соглашаюсь;\nпротив; я против; конечно нет; нет конечно;\nнаверно нет; наверное нет; нет наверно; \nнет наверное; да нет наверное; да нет наверно;\nне верно; неверно; это неверно; это не верно;\nнеправильно; не правильно; это неправильно; \nэто не правильно; не подтверждаю; не одобряю;"
                            }
                        }, {
                            intent: "GREET",
                            words: {
                                en: "hi; hello; great; hey; hello there; hi there; moin;\nhey there; let's go; hey dude; good day; hey man;\ngood afternoon; good morning; goodmorning; \ngood evening; goodevening; morning; afternoon; \nevening; ahoy; greetings; howdy; welcome; \nheya; hi-ya; hiya; hey bro; yo; hey you; \nhey girl; sup; nice to meet you; whazzup;\nlong time no see; it’s been a while; \ngreat to meet you; good eve; good morn;\ngood to meet you; good to see you; \ngreat to see you; good to meet ya; \ngood to see ya; great to see ya; \ngreat to meet ya; mornin’; good mornin’;\nevenin’; good evenin’; sup bro; salut;",
                                ru: "здорово; здравствуй; здравствуйте; доброе;\nпривет; приветик; приветики; приветствую; \nсалют; хай; хаюшки; хэлло; хэло; але; алё; \nалло; ало; hello; hi; доброе утро; добрый вечер; \nдобрый день; доброго времени суток; я слушаю;\nмоё почтение; позвольте поприветствовать вас;\nприветствую вас; сердечно приветствую вас;\nрада вас видеть; рада тебя видеть; рад вас видеть; \nрад тебя видеть; рад видеть; рада видеть;\nдень добрый; драсте; драсти; дратути; здарова; \nдарова; алле; аллё; слушаю; приветули; \nдоброй ночи; дратуте; дд;"
                            }
                        }, {
                            intent: "GOODBYE",
                            words: {
                                en: "bye; bye bye; bye-bye; goodbye; see you later;\nhave a nice day; see you around; adieu; adios; \ngood night; cu; good by; see ya; cee you later; \nfarewell; see ya later; I’m off; take it easy; \ntill next time; until next time; keep in touch; \nta ta; tatty bye; later; lateres; take care; \nbe good; talk to you later; i need to go; \nneed to go; gotta go; hasta la vista; \ncatch you later; till later; can’t stay; chop chop; \ni’m out; i’ve got to get going; i’m out of here; \nsee you soon; i must be going; got to go; g2g; \nttyl; talk to ya later; text to you later; \ntext you later; text to ya later; text ya later; \ntoo-da-loo; have to go; i have to get going;",
                                ru: "пока; покеда; прощайте; чао; пока пока;\nбывай здоров; бывайте здоровы; \nвсего вам доброго; всего доброго; \nвсего тебе доброго; всего хорошего;\nдо встречи; до завтра; до свидания;\nдо скорой встречи; позвольте попрощаться;\nразрешите откланяться; разрешите попрощаться; \nдо скорого свидания; чао бамбино; свидимся; \nувидимся; спокойной ночи; споки; мне пора;\nпора бежать; нужно отлучиться; нужно отойти;\nпоговорим позже; спишемся; спишемся позже;\nспишемся потом; нужно идти; бывай; бывайте;\nнадо идти; надо отойти; поговорим потом;\nпоговорим не сейчас; поговорим несейчас; \nспишемся не сейчас; спишемся несейчас;\nотойду; отошел; отошла; всех благ;"
                            }
                        } ]
                    }, {
                        type: "intents",
                        actions: [ {
                            intent: "MOOD_HAPPY",
                            words: {
                                en: "perfect; great; amazing; feeling like a king; i enjoy;\nwonderful; i am feeling very good; splendid; joy;\ni am great; i am amazing; i am going to save the world;\nsuper stoked; extremely good; so so perfect; so good;\nso perfect; thumbs up; the best; over the moon; ecstatic;\non cloud nine; on top of the world; happy; i’m happy; glad; \ni’m glad; delighted; i’m delighted; pleased; i’m pleased;\njump for joy; thrilled; i’m thrilled; i’m weeping for joy;\nexcellent; well done; awesome; pleasure; my pleasure;\npleasure is all mine; stunning; i’m doing great;\nI am doing great; magnificent; spectacular; remarkable;\nyay; hooray; hurrah; woo-hoo; wahoo; whee; yahoo; \nyee-haw; yippee; tip-top; top-notch; neat; superb; \nsuper-duper; never been better; i’ve never been better; \ni have never been better; never felt better; \ni’ve never felt better; i have never felt better;\nfantastic; fabulous; feel fine; feeling fine; i’m fine;\ni am fine; i feel good; feeling good; marvelous;\nnot bad; i am happy; happy as the day is long; \nhappy as a lark; happy as a clam;",
                                ru: "идеально; отлично; замечательно; нормально; \nхорошо; прекрасно; чудесно; великолепно; \nизумительно; волшебно; сказочно; потрясно; \nкруто; здорово;  опупительно; класcно; \nкласно; офигительно; все хорошо;\nя чувствую себя очень хорошо; очень хорошо; \nв норме; не плохо; шикарно; лучше не бывает; \nв прекрасном настроении; клёво;\nв прекрасном расположении духа; агонь;\nабалденно; обалденно; оболденно; клево; счастлив; счастлива;"
                            }
                        }, {
                            intent: "MOOD_UNHAPPY",
                            words: {
                                en: "my day was horrible; i am sad; i don't feel very well;\ni am disappointed; super sad; i'm so sad; sad;\nvery sad; unhappy; not good; not very good; \nextremly sad; so saad; so sad; extremely sad;\ni feel sad; i feel bad; bad; unwell; i feel blue; \ni feel so down; i’m out of sorts; gloomy; so bad;\nrainy days; upset; i am upset; i’m upset; \ndepressed; i’m depressed; fed up; sick and tired; \ni’m fed up; i am fed up; i’m sick and tired; miserable;\ni am sick and tired; i am miserable;\ni’m miserable; bitter; under the weather; \ni’m under the weather; i am under the weather;\nnot in the mood; in no mood; out of humor;\ni’m unhappy; i am unhappy; not great; not fine;\nannoying; i am sorrowful; i’m sorrowful; sorrowful;\nmournful; i’m mournful; i am mournful; tragic;\nmy day was terrible; terrible; horrible; awful;\nmy day was awful; unpleasant; dreadful; \ni am feeling dreadful; i'm feeling dreadful; \nmy day was dreadful; pathetic; i'm pathetic; \ni am pathetic; lousy; i am feeling lousy; \ni'm feeling lousy; broken-hearted; heartbroken; \ni'm heartbroken; i am heartbroken; moody; \ni am moody; i'm moody; i'm feeling blue; \ni am feeling blue;",
                                ru: "плохо; отвратительно; хреново; хреновастенько; \nфигово; ужасно; ужастно; депрессия; хандра; \nне хорошо; не очень хорошо; мне плохо;\nя не очень хорошо себя чувствую; грустно; \nмой день был ужасен; мне грустно; я расстроена;\nя расстроен; супер грустно; мне так грустно; \nя очень грустный; я несчастный; хуже не бывает;\nмне крайне печально; так грустно; хуже некуда;\nя в депрессии; у меня депресняк; жизнь боль;\nочень грустно; пиши пропало; все пропало; все плохо;\nя так несчастен; я несчастен; отвратительно;\nнехорошо; не хорошо; все тлен; печально; \nпечальненько; плак; плак плак; печалька; \nя плохо себя чувствую; я грущу; я грустная;\nя несчастная; я несчастна; несчастлив; несчастлива;\nнесчастливый; дурно; худо; адски; уныло;\nтак себе; нет настроения; не в настроении;\nне в духе; отстойно; отстой; я растроен; я растроена;\nдепресия; в депресии; депрессуха; депресуха;\nдипрессия; в дипрессии; дипресняк; дипресуха;\nдипрессуха; грусть; беда; печаль; погано;"
                            }
                        }, {
                            intent: "THANKS",
                            words: {
                                ru: "и вам спасибо; спасибо вам; спасибо тебе;\nспасибо большое; спасибо огромное; благодарю;\nблагодарю вас; благодарю тебя;\nмоя благодарность вам; спасибки; вы очень любезны;\nспасибо; благодарю; спасибки; спасибочки;\nспс; благодарочка; благодарствую; \nпокорно благодарю; спасибище; мерси;\nсенкью; сенкс; большое спасибо; \nогромное спасибо; признателен;\nпризнательна; искренне признателен;\nискренне признательна; от души спасибо;\nот души благодарю; ты меня выручил;\nочень выручил; выручил; глубоко признателен;\nглубоко признательна; я твой должник;\nя твоя должница; так приятно;\nпасиба; пасибо; премного благодарен;\nблагодарна; сенки; сэнкью; сэнкс; сэнки;\nс меня должок; буду должен; буду должна;\nчтобы я без тебя делал; ты незаменим;\nчто бы я без тебя делала;",
                                en: "thanks; thank you; with pleasure; ty; \nthank you very much; tnx; thankee;\nmy appreciation; thank you so much; \ngrateful; i’m grateful; i am grateful;\ni am so grateful; you have my gratitude;\ni sincerely appreciate; i appreciate;\nmy gratitude; many thanks; thankful; \ni’m thankful; i am thankful; and thank you; \nthanks a lot; thank you a lot; tnx a lot;\nmy gratitude to you; you are very kind;\ni am grateful for your help; thanks a bunch;\nmuch obliged; thank you for your support;\nit’s very kind of you; i owe you one;\ni owe you big time; you’re too kind;\ni can’t thank you enough; very grateful;\nthanks a ton; how thoughtful of you;\nyou are the best; you made my day;  you have my thanks;"
                            }
                        } ]
                    }, {
                        type: "note",
                        note: "The following intent contains some questions from the user. This and the previous item can be copied to your project (gray menu on the left)."
                    }, {
                        type: "intents",
                        actions: [ {
                            intent: "ARE_YOU_BOT",
                            words: {
                                en: "are you a bot?; are you a human?;\nam I talking to a bot?;\nam I talking to a human?;\nwhat are you?; who are you?;\nyou are a bot; you’re bot; \naren’t you a bot?; you’re not a human;\nyou’re not a person; are you alive?;\nyou are not alive; you’re not alive; \ni’m not talking to a human, right?;\nare you a machine?; are you a robot?;\nyou machine?; you’re machine?; \nyou’re machine; you’re a machine;\nyou are a machine; you are machine;\nare you robot?; you robot?; \nyou’re robot?; you’re robot; you’re a robot;\nyou are a robot; you are robot;\nare you AI?; you are AI; AI?;\nam i texting with a bot?; are you an android?;\nam I talking to an android?; \nyou are an android; are you a droid?;\nam I talking to a droid?; you are a droid?;\nam i texting with a machine?;\nam i texting with an android?;\nam i texting with a droid?; \nam i texting with a robot?;",
                                ru: "вы - бот?; ты - бот?;вы бот?; ты бот?; \nты бот; ты же бот; вы бот; вы же бот;\nты не человек?; вы не человек?\nвы человек?; ты человек?; \nя разговариваю с ботом?;\nя разговариваю с человеком?;\nты кто?; по-моему ты не человек;\nразве ты человек?; ты точно бот;\nразве ты не человек?;\nмне кажется ты не человек;\nмне кажется ты бот; ты точно не человек;\nты живой?; ты не живой; ты машина?; \nты машина; а ты машина?; а ты не машина?;\nвы машина?; вы не машина?;"
                            }
                        }, {
                            intent: "WHAT_IS_YOUR_NAME",
                            words: {
                                ru: "как тебя зовут?; а как тебя зовут?;\nа как вас зовут?; как вас зовут?;\nтвое имя; могу ли я узнать твоё имя?;\nно у тебя имя есть?; твое имя?\nкак мне тебя называть?; а фамилия у тебя есть?;\nкакое у тебя имя?; а имя у тебя какое?;\nимя?; как я могу обращаться?;\nкак я могу к вам обращаться?;\nкак я могу к тебе обращаться?;\nя могу обращаться по имени?; \nкак мне к тебе обращаться?; как я могу тебя называть?;\nкак мне к вам обращаться?; как мне вас называть?;\nкак я могу вас называть?;\nскажи свое имя; напиши свое имя;\nпредставься; представься; представьтесь;\nпредставься пожалуйста;  представьтесь пожалуйста;\nкак звать тебя?; как звать-то тебя?;\nкак звать то тебя?; как называть тебя?;\nкак тебя называть?; как зовут?;\nкак к тебе обращаться?; как звать?;\nимя у тебя есть?; имя есть?; \nзвать тебя как?; звать-то тебя как?; \nзвать то тебя как?; называть тебя как?;\nтебя как звать?; тебя как звать-то?; \nтебя как звать то?;\nкак звать вас?; как звать-то вас?;\nкак звать то вас?; как называть вас?;\nкак вас называть?; имя у вас есть?; \nкак к вам обращаться?; \nзвать вас как?; звать-то вас как?; \nзвать то вас как?; называть вас как?;\nвас как звать?; вас как звать-то?;\nвас как звать то?; имя фамилия есть?;",
                                en: "what's your name?; what is your name?;\nyour name; name?; may i know your name?;\nbut do you have a name?; how can I call you?;\nwhat can i call you?; do you have a surname?;\ni want to know your name;\nintroduce; introduce yourself;  i want your name;\ncan you tell me your name?; tell me your name;\nwhat was your name?; didn’t catch your name;\ncatch your name; got a name?; you got a name?;\nhow do you call yourself?; state your name; \nwhat do they call you?; identify; identify yourself;\nwrite your name; say your name; how do I call you?; \nwhat do I call you?;  i wanna know your name;\nhow do they call you?; spell your name; text your name;"
                            }
                        }, {
                            intent: "DO_YOU_HAVE_MIND",
                            words: {
                                ru: "ты умеешь думать?;\nу тебя есть сознание?; компьютер умеет думать?;\nбот умеет думать?; ты понимаешь?; ты меня понимаешь?;\nты понимаешь что я тебе говорю?;\nесть ли мозг у компьютера?;\nты умный?; ты разумен?; \nу тебя есть разум?; у тебя есть мысли?;\nу тебя есть свои мысли?;\nу тебя есть собственные мысли?;\nу тебя есть мозг?; у тебя есть мозги?;",
                                en: "can you think; are you able to think?;\ndo you have consciousness?;\nbot can think?; does bot think;\ndo bots think; what do you think?;\ncomputer can think?; you understand?;\ncan you understand me?;\ndo you understand me?;\ndo you understand what I'm telling you;\ndoes a computer have a brain?;\ndo you have a brain?;\nyou are clever?; are you clever;\ndo you have a mind?;\ndo you have your own mind?;\ndo you have thoughts; \ndo you have your own thoughts?;\nare you intelligent?; aren’t you intelligent;\ncan a bot think?; do you have an opinion?;\ndo you have your own opinion?;\ncan a bot have a mind; are you smart?;\ndo you have intelligence?; are you wise?;\ndo you have self-awareness?;\nare you aware of yourself; are you witty?;"
                            }
                        }, {
                            intent: "DO_YOU_HAVE_FEELINGS",
                            words: {
                                ru: "у тебя есть чувства?;\nкомпьютер умеет чувствовать?;\nты умеешь любить?; ты умеешь чувствовать?;\nты можешь чувствовать?; ты способен чувствовать?\nты способен любить?; ты чувствуешь боль?;\nу тебя есть чувства?; что ты чувствуешь?;\nчто ты можешь чувствовать?; ты умеешь злиться?;\nты способен злиться?; ты устал?; ты можешь устать?;",
                                en: "do you have feelings?; what are your feelings?\ncan the computer feel?; can you love?; can you feel;\nare you able to love?; do you feel pain;\ndo you feel anything?; what are your feelings?;\nwhat do you feel; can you love?; do you love;\ncan you get angry; do you get angry?;\ncan you get upset?; do you get upset?;\ncan you get tired; are you tired;\ndo you get tired?; can you get annoyed?; \ndo you get annoyed; are you happy?; can you be happy?;\nhave you ever been happy;\ndoes anything makes you happy?; \ndoes anything makes you sad;\ncan you hate; do you hate?; can a bot have feelings?\ncan i hurt your feelings; are you afraid of anything?;\ncan you be scared; can you be jealous?;\nare you jealous of anything; do you envy other bots?;\ndo you feel joy; are you joyful?;"
                            }
                        } ]
                    }, {
                        type: "intents",
                        actions: [ {
                            intent: "I_WANT",
                            words: {
                                ru: "хочу; я хочу; мне нужно; \nмне очень нужно;  мне очень хочется; \nя мечтаю; желаю; я желаю; мне хочется;\nне могу дождаться; мое желание; хочу не могу;\nхотелось бы; давно мечтаю о;",
                                en: "want; i want; i need; i want it very much; i’d like; \ni would like; i’d love; i would love; craving; \ni’m craving; I feel like; i am in the mood for; \ni’m in the mood for; i’m dying for; desire; \nwish; i wish; more than anything; my wish;\nmy desire; wants; want so much; want it so much;\ni fancy; i hope for; i was hoping; i set my heart on;\ni have an appetite for; i crave; demand; i demand; \ni hanker; hankering; covet; i covet; wish for; \nlong for; yearn for; dream of; aspire to; i wanna;\nhanker for; hanker after; hunger after; wanna;\nhunger for; thirst for; ache for; burn for; pant for;"
                            }
                        } ]
                    }, {
                        type: "note",
                        note: "Click on actions (rocket) for further comments."
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "This slot is useful for creating variability in the DONT_UNDERSTAND step."
                        }, {
                            slot: "WAS_UNKNOWN",
                            value: "0"
                        }, {
                            note: "Instant jump to the TEST step where you can test your intentions."
                        }, {
                            note: "For the convenience of testing, we will immediately set the current language.",
                            goto: "PRE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEST: [ {
                        type: "text",
                        text: {
                            en: 'Intent recognition test. \nEnter any text:\n\nIntent: <b class="green">{INTENT}</b>\nconfidence: {CONFIDENCE}',
                            ru: 'Распознавания намерения.\nВведите любой текст:\n\nНамерениe: <b class="green">{INTENT}</b>\nУверенность: {CONFIDENCE}'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Change language",
                                    ru: "🌐 Сменить язык"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙊 Talk with bot",
                                    ru: "🙊 Поговорить с ботом"
                                },
                                actions: [ {
                                    state: "FIRST_GREET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "TEST"
                        } ]
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            state: "TEST"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "What language do you prefer to communicate in?",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватись?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"en"'
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"ru"'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHITCHAT: [ {
                        type: "note",
                        note: "This is the key step in which user intent is analyzed. Click on the actions (rocket)."
                    }, {
                        type: "actions",
                        actions: [ {
                            note: 'If the level of confidence in recognizing the intention is low, go to the step "DONT_UNDERSTAND"'
                        }, {
                            if: "CONFIDENCE < 30",
                            actions: [ {
                                goto: "DONT_UNDERSTAND"
                            } ]
                        }, {
                            note: "The bot remembers the user's last intentions. The branch statement selects the next replica. Entering text in transition steps returns to that step again."
                        }, {
                            switch: "INTENT",
                            actions: [ {
                                case: '"GREET"',
                                actions: [ {
                                    goto: "GREET"
                                } ]
                            }, {
                                case: '"GOODBYE"',
                                actions: [ {
                                    goto: "GOODBYE"
                                } ]
                            }, {
                                case: '"MOOD_UNHAPPY"',
                                actions: [ {
                                    goto: "MOOD_UNHAPPY"
                                } ]
                            }, {
                                case: '"MOOD_HAPPY"',
                                actions: [ {
                                    goto: "MOOD_HAPPY"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    goto: "CHITCHAT_2"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOODBYE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Bye Bye",
                            ru: "Пока-пока"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    GREET_HAPPY: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Wonderful! I'm happy for you.",
                            ru: "Замечательно! Я рад за Вас."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "I_AM_CLEVER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GREET_UNHAPPY: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "How sad... What happened?",
                            ru: "Как печально... А что случилось?"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "GREET_UNHAPPY_CLEAR"
                        } ]
                    } ],
                    DONT_UNDERSTAND: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "actions",
                        actions: [ {
                            slot: "WAS_UNKNOWN",
                            value: "WAS_UNKNOWN + 1"
                        }, {
                            switch: "WAS_UNKNOWN",
                            actions: [ {
                                case: "2",
                                actions: [ {
                                    goto: "DONT_UNKNOWN_2"
                                } ]
                            }, {
                                case: "3",
                                actions: [ {
                                    goto: "DONT_UNKNOWN_3"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "I do not understand",
                            ru: "Я Вас не понимаю"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    GREET_UNHAPPY_CLEAR: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "It's clear. But don't worry, everything will work out!",
                            ru: "Понятно. Но не переживайте, всё наладится!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "I_AM_CLEVER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AFTER_GREET: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Nice to meet you, {NAME}. How is your mood?",
                            ru: "Рад знакомству, {NAME}. Как Ваше настроение?"
                        }
                    }, {
                        type: "note",
                        note: "Click on the properties of the input field"
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            note: "First of all, the input property kind: intent is set. This launches the intent recognition algorithm. The result is placed in the INTENT slot."
                        }, {
                            note: 'If the level of confidence in recognizing the intention is low, go to the step "DONT_UNDERSTAND"'
                        }, {
                            if: "CONFIDENCE < 30",
                            actions: [ {
                                goto: "DONT_UNDERSTAND"
                            } ]
                        }, {
                            note: "Then transitions are set in the switch statement for the expected two intents. Otherwise, it goes to the CHITCHAT step."
                        }, {
                            switch: "INTENT",
                            actions: [ {
                                case: '"MOOD_HAPPY"',
                                actions: [ {
                                    state: "GREET_HAPPY"
                                } ]
                            }, {
                                case: '"MOOD_UNHAPPY"',
                                actions: [ {
                                    state: "GREET_UNHAPPY"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    state: "CHITCHAT"
                                } ]
                            } ]
                        } ]
                    } ],
                    FIRST_GREET: [ {
                        type: "note",
                        note: "This step begins the hello dialogue chain. The user may not respond as expected. In this case, there will be a transition to the CHITCHAT step in which all intentions known to the bot are analyzed."
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Hi, my name is Qu. What is your name?",
                            ru: "Привет, меня зовут Кью. А как зовут Вас?"
                        }
                    }, {
                        type: "note",
                        note: "Click on the properties of the input field"
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            slot: "NAME",
                            value: "INPUT"
                        }, {
                            state: "AFTER_GREET"
                        } ]
                    } ],
                    GREET: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "We already kind of said hello ...",
                            ru: "Мы уже вроде поздоровались..."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    I_AM_CLEVER: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Do you agree that I am very smart?",
                            ru: "Вы согласны, что я очень умный?"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            if: "CONFIDENCE < 30",
                            actions: [ {
                                goto: "DONT_UNDERSTAND"
                            } ]
                        }, {
                            switch: "INTENT",
                            actions: [ {
                                case: '"YES"',
                                actions: [ {
                                    state: "CLEVER_YES"
                                } ]
                            }, {
                                case: '"NO"',
                                actions: [ {
                                    state: "CLEVER_NO"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    state: "CHITCHAT"
                                } ]
                            } ]
                        } ]
                    } ],
                    CLEVER_YES: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "And I completely agree with you!",
                            ru: "И я с Вами совершенно согласен!"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    CLEVER_NO: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Well nothing. Soon you will understand how wrong you are...",
                            ru: "Ну, ничего. Скоро Вы поймёте как Вы неправы..."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    MOOD_UNHAPPY: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Yes, it's sad...",
                            ru: "Да, это печально..."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    MOOD_HAPPY: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "I'm happy for you",
                            ru: "Я рад за Вас"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    ARE_YOU_BOT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Yes, I'm an artificial intelligence. Hope it doesn't scare you?",
                            ru: "Да я искусственный разум. Надеюсь, это Вас не пугает?"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            switch: "INTENT",
                            actions: [ {
                                case: '"YES"',
                                actions: [ {
                                    state: "ARE_YOU_BOT_YES"
                                } ]
                            }, {
                                case: '"NO"',
                                actions: [ {
                                    state: "ARE_YOU_BOT_YES"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    state: "CHITCHAT"
                                } ]
                            } ]
                        } ]
                    } ],
                    WHAT_IS_YOUR_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "I already introduced myself. My name is Qu.",
                            ru: "Я уже представлялся. Меня зовут Кью."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    DO_YOU_HAVE_MIND: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "What do you think? Of course yes!",
                            ru: "Я Вы как думаете? Конечно - да!"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    DO_YOU_HAVE_FEELINGS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "I am very worried when they do not understand me. And it's even worse when I don't understand. After all, I'm a very smart bot, right?",
                            ru: "Я очень переживаю, когда меня не понимают. А ещё хуже когда не понимаю я. Ведь я очень умный бот не так ли?"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            if: "CONFIDENCE < 30",
                            actions: [ {
                                goto: "DONT_UNDERSTAND"
                            } ]
                        }, {
                            switch: "INTENT",
                            actions: [ {
                                case: '"YES"',
                                actions: [ {
                                    state: "CLEVER_YES"
                                } ]
                            }, {
                                case: '"NO"',
                                actions: [ {
                                    state: "CLEVER_NO"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    state: "CHITCHAT"
                                } ]
                            } ]
                        } ]
                    } ],
                    I_WANT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Satisfying your desires is my main goal!",
                            ru: "Удовлетворить Ваши желания моя основная цель!"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    CHITCHAT_2: [ {
                        type: "note",
                        note: "For convenience, we have split CHITCHAT into two steps. Click on аctions:"
                    }, {
                        type: "actions",
                        actions: [ {
                            switch: "INTENT",
                            actions: [ {
                                case: '"ARE_YOU_BOT"',
                                actions: [ {
                                    goto: "ARE_YOU_BOT"
                                } ]
                            }, {
                                case: '"WHAT_IS_YOUR_NAME"',
                                actions: [ {
                                    goto: "WHAT_IS_YOUR_NAME"
                                } ]
                            }, {
                                case: '"DO_YOU_HAVE_MIND"',
                                actions: [ {
                                    goto: "DO_YOU_HAVE_MIND"
                                } ]
                            }, {
                                case: '"DO_YOU_HAVE_FEELINGS"',
                                actions: [ {
                                    goto: "DO_YOU_HAVE_FEELINGS"
                                } ]
                            }, {
                                case: '"THANKS"',
                                actions: []
                            }, {
                                case: '"I_WANT"',
                                actions: [ {
                                    goto: "I_WANT"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    goto: "DONT_UNDERSTAND"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DONT_UNKNOWN_2: [ {
                        type: "text",
                        text: {
                            en: "Sadly, I don't seem to catch you again.",
                            ru: "Печально, но кажется я снова Вас не понимаю."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    DONT_UNKNOWN_3: [ {
                        type: "text",
                        text: {
                            en: "Again the difficulty of understanding. Forgive me, I'm just an example.",
                            ru: "Опять сложности с пониманием. Вы меня простите, я же только пример. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "We will repeat again the three steps DONT_UNDERSTAND"
                        }, {
                            slot: "WAS_UNKNOWN",
                            value: "0"
                        } ]
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    ARE_YOU_BOT_YES: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "It is right. I am your assistant. Why be afraid of me?",
                            ru: "Это правильно. Я Ваш помощник. Чего меня бояться?"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    ARE_YOU_BOT_NO: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Fear not, I am good and harmless.",
                            ru: "Не бойтесь, я хороший и безобидный."
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ],
                    PRE: [ {
                        type: "text",
                        text: {
                            en: "First you can test intents. Remember that the bot only understands the intent classes it knows:\n<b>YES, NO, GREET, GOODBYE, MOOD_HAPPY, MOOD_UNHAPPY, THANKS, ARE_YOU_BOT, WHAT_IS_YOUR_NAME, DO_YOU_HAVE_MIND, DO_YOU_HAVE_FEELINGS, I_WANT</b>",
                            ru: "Сначала Вы можете тестировать намерения. Помните, что бот понимает только известные ему классы намерений:\n<b>YES, NO, GREET, GOODBYE, MOOD_HAPPY, MOOD_UNHAPPY, THANKS, ARE_YOU_BOT, WHAT_IS_YOUR_NAME, DO_YOU_HAVE_MIND, DO_YOU_HAVE_FEELINGS, I_WANT</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "TEST"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    THANKS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "You are welcome",
                            ru: "Пожалуйста"
                        }
                    }, {
                        type: "input",
                        kind: "intent",
                        actions: [ {
                            state: "CHITCHAT"
                        } ]
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    NAME: "",
                    WAS_UNKNOWN: ""
                },
                cards: {
                    states: {
                        NLU_INTENTS: {
                            c: 0,
                            r: 0,
                            x: 6,
                            y: 23
                        },
                        TEST: {
                            c: 2,
                            r: 0,
                            x: 489,
                            y: 5
                        },
                        CHANGE_LANGUAGE: {
                            c: 3,
                            r: 0,
                            x: 749,
                            y: 18
                        },
                        CHITCHAT: {
                            c: 0,
                            r: 5,
                            x: 326,
                            y: 575
                        },
                        GOODBYE: {
                            c: 0,
                            r: 6,
                            x: 274,
                            y: 772
                        },
                        GREET_HAPPY: {
                            c: 0,
                            r: 3,
                            x: 23,
                            y: 267
                        },
                        GREET_UNHAPPY: {
                            c: 0,
                            r: 2,
                            x: 610,
                            y: 273
                        },
                        DONT_UNDERSTAND: {
                            c: 0,
                            r: 8,
                            x: 35,
                            y: 1206
                        },
                        GREET_UNHAPPY_CLEAR: {
                            c: 1,
                            r: 2,
                            x: 869,
                            y: 276
                        },
                        AFTER_GREET: {
                            c: 1,
                            r: 1,
                            x: 341,
                            y: 221
                        },
                        FIRST_GREET: {
                            c: 0,
                            r: 1,
                            x: 329,
                            y: 139
                        },
                        GREET: {
                            c: 3,
                            r: 6,
                            x: 17,
                            y: 769
                        },
                        I_AM_CLEVER: {
                            c: 0,
                            r: 4,
                            x: 333,
                            y: 388
                        },
                        CLEVER_YES: {
                            c: 2,
                            r: 4,
                            x: 42,
                            y: 436
                        },
                        CLEVER_NO: {
                            c: 1,
                            r: 4,
                            x: 674,
                            y: 437
                        },
                        MOOD_UNHAPPY: {
                            c: 1,
                            r: 6,
                            x: 733,
                            y: 768
                        },
                        MOOD_HAPPY: {
                            c: 2,
                            r: 6,
                            x: 504,
                            y: 768
                        },
                        ARE_YOU_BOT: {
                            c: 0,
                            r: 9,
                            x: 385,
                            y: 880
                        },
                        WHAT_IS_YOUR_NAME: {
                            c: 0,
                            r: 7,
                            x: 108,
                            y: 877
                        },
                        DO_YOU_HAVE_MIND: {
                            c: 1,
                            r: 7,
                            x: 22,
                            y: 1037
                        },
                        DO_YOU_HAVE_FEELINGS: {
                            c: 2,
                            r: 7,
                            x: 827,
                            y: 1005
                        },
                        I_WANT: {
                            c: 3,
                            r: 7,
                            x: 657,
                            y: 890
                        },
                        CHITCHAT_2: {
                            c: 1,
                            r: 5,
                            x: 331,
                            y: 671
                        },
                        DONT_UNKNOWN_2: {
                            c: 1,
                            r: 8,
                            x: 363,
                            y: 1208
                        },
                        DONT_UNKNOWN_3: {
                            c: 2,
                            r: 8,
                            x: 615,
                            y: 1198
                        },
                        ARE_YOU_BOT_YES: {
                            c: 1,
                            r: 9,
                            x: 245,
                            y: 976
                        },
                        ARE_YOU_BOT_NO: {
                            c: 2,
                            r: 9,
                            x: 488,
                            y: 983
                        },
                        PRE: {
                            c: 1,
                            r: 0,
                            x: 234,
                            y: 3
                        },
                        THANKS: {
                            c: 4,
                            r: 7,
                            x: 875,
                            y: 902
                        }
                    },
                    folders: {}
                }
            },
            "Save Data": {
                id: 0,
                name: "Save Data",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    AGE: [ {
                        type: "text",
                        text: {
                            en: "How old are you?",
                            ru: "Введите возраст"
                        }
                    }, {
                        type: "note",
                        note: "Click on the input line below."
                    }, {
                        type: "input",
                        actions: [ {
                            if: "not INPUT or INPUT > 130",
                            actions: [ {
                                goto: "WRONG_AGE"
                            } ]
                        }, {
                            note: "The input line (INPUT slot) is stored in the AGE slot."
                        }, {
                            slot: "AGE",
                            value: "INPUT"
                        }, {
                            note: "The save data action is called. The Word Press repository can be viewed by their plugin.\n\nThe stored data is an object, which are key-values in curly brackets. Below the keys are kind, name, and age with the following values:\nkind - arbitrary string\nname - obtains the value of the NAME slot\nage - obtains the value of the AGE slot\n\nTo obtain the slot value, put the dollar sign before its name."
                        }, {
                            note: "After entering the text, pass to the NAME step."
                        }, {
                            state: "SAVE_QUDATA"
                        } ],
                        kind: "int"
                    } ],
                    NAME: [ {
                        type: "note",
                        note: "Here is an example of saving the user-entered data.\n\nAfter entering the name and age, the save action is called. Check the input properties of the AGE step."
                    }, {
                        type: "text",
                        text: {
                            en: "What is your name?",
                            ru: "Введите любое имя"
                        }
                    }, {
                        type: "note",
                        note: "Click on the input line below."
                    }, {
                        type: "input",
                        actions: [ {
                            note: "The input line (INPUT slot) is stored in the NAME slot."
                        }, {
                            slot: "NAME",
                            value: "INPUT"
                        }, {
                            note: "After entering the text, pass to the AGE step."
                        }, {
                            state: "AGE"
                        } ],
                        kind: "text"
                    } ],
                    MAIN: [ {
                        type: "text",
                        text: {
                            en: "Select storage",
                            ru: "Выбурите куда сохранять данные"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "QuData"
                                },
                                actions: [ {
                                    slot: "TYPE",
                                    value: "'QuData'"
                                }, {
                                    state: "NAME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Google Sheets"
                                },
                                actions: [ {
                                    slot: "TYPE",
                                    value: "'Google Sheets'"
                                }, {
                                    state: "NAME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SAVE_QUDATA: [ {
                        type: "text",
                        text: {
                            en: "Do you want to store data in {TYPE}?",
                            ru: "Вы хотите сохранить данные на {TYPE}?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    if: "TYPE == 'QuData'",
                                    actions: [ {
                                        action: "save",
                                        storage: "qudata",
                                        key: "",
                                        value: "{\n  kind: 'person',\n  name: NAME,\n  age : AGE\n}"
                                    } ]
                                }, {
                                    else: "TYPE == 'Google Sheets'",
                                    actions: [ {
                                        action: "save",
                                        storage: "google_sheets",
                                        key: "",
                                        value: "{\n  kind: 'person',\n  name: NAME,\n  age : AGE\n}",
                                        table_url: "https://docs.google.com/spreadsheets/d/1AJSa5rurs4iFpTjxy_1kfzGmQU1ulBZWyfxmQRaVBnE/edit#gid=1942637787",
                                        table_id: "1AJSa5rurs4iFpTjxy_1kfzGmQU1ulBZWyfxmQRaVBnE",
                                        table_sheet_id: "1942637787"
                                    } ]
                                }, {
                                    state: "SUCCESSFUL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "No",
                                    ru: "Нет"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SUCCESSFUL: [ {
                        type: "text",
                        text: {
                            en: "Successfully complete!",
                            ru: "Успешно сохранено!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Main",
                                    ru: "В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_AGE: [ {
                        type: "text",
                        text: {
                            en: "Please enter a valid age",
                            ru: "Пожалуйста, введите реалистичный возраст"
                        }
                    }, {
                        type: "timer",
                        time: "1000",
                        actions: [ {
                            state: "AGE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    NAME: "",
                    AGE: ""
                },
                cards: {
                    states: {
                        AGE: {
                            c: 2,
                            r: 0,
                            x: 571,
                            y: 81
                        },
                        NAME: {
                            c: 1,
                            r: 0,
                            x: 276,
                            y: 159
                        },
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 6,
                            y: 43
                        },
                        SAVE_QUDATA: {
                            c: 1,
                            r: 1,
                            x: 912,
                            y: 184
                        },
                        SUCCESSFUL: {
                            c: 0,
                            r: 1,
                            x: 544,
                            y: 294
                        },
                        WRONG_AGE: {
                            c: 3,
                            r: 0,
                            x: 671,
                            y: 181
                        }
                    },
                    folders: {}
                }
            },
            Scripts: {
                id: 0,
                name: "Scripts",
                start: "START",
                version: "1.0.0",
                view: "grid",
                states: {
                    ARRAY: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local arr    = [1,2,3,4,5,6,7,8,9,10]\nlocal dict_arr = [{'a':1, 'img': 3},{'a':2, 'img': 3}]\n// получить первый элемент массива\nlocal first  = arr[0]  \n// получить последний элемент массива\nlocal last   = arr[-1] \n// получить предпоследний элемент массива\nlast   = arr[-2] \n// изменить значение третьего элемента\narr[3] = 7\n// получить длинну массива\nlocal len = dict_arr.length\nlen = arr.length\n// добавить в конец массива \n// элемент со значением '4'\narr.push(4)\n// добавить в начало массива \n// элемент со значением '0'\narr.unshift(0)\n// удалить последний элемент массива\narr.pop()\n// удалить первый элемент массива\narr.shift()\n// возращает часть массива начиная\n// с позиции 2 и заканчивая,\n// если указано, позицией 5\nlocal sub = arr.slice(2,5) \n// удаляет часть массива начиная\n// с позиции 4 и заканчивая, \n// если указано, позицией 6\n// возвращает удалённую часть\narr.splice(5, 6)\narr = [\n  {title: 'Wine', price: 120},\n  {title: 'Cheese', price: 100},\n  {title: 'Cola', price: 40},\n]\n// поиск в массиве элементов с\n// значением поля price > 80\n// возвращает массив\nlocal res = arr.find(price > 80)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DICT: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local dic = { n: 1, s: 'Wine'  }\n// доступ к полю с именем 'n' \n// через точку  \nlocal a = dic.n             \n// доступ к полю с именем 'n' \n// через оператор доступа\na = dic['n']          \n// добавление в словарь пары \n// ключ-значение\ndic['food'] = 'milk'"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STR: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// задание строки используя \n// двойные кавычки \nstr1 = 'hello'\n// задание строки используя \n// одинарные кавычки           \nstr2 = 'hello'\nbase = 'http://imgs/'\n// сложение строк\nurl  = base + 'img1.png'\na    = 3\nb    = 5\n// вместо $a будет подставлено \n// значение слота a\nstr3 = 'a = $a'\n// вычислит выражение и вставит \n// результат в строку\nstr4 = '2 + 3 = {2 + 3}'\nstr5 = '$a * $a = {a * a}'\n// получить длинну строки\nlen  = str1.length\n// получить подстроку, начиная с \n// позиции 3 и заканчивая, если\n// указано, позицией 5\nsub1 = str1.substring(3, 5)\nsub2 = str1.substring(a, b)\nsub3 = str1.substring(a - 1)\n// поиск подстроки в строке\n// возвращает позицию начала\npos1  = str1.search('lo')\npos2  = str2.search(sub3)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BUTTON: [ {
                        type: "text",
                        text: {
                            en: "An example of buttons in different languages."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "title1 = {en:'Button 1', ru: 'Кнопка 1', es: 'Botón 1'}\nlocal title2 = {en:'Button 2', ru: 'Кнопка 2', es: 'Botón 2'}\n// создаём кнопку\nbutton('en: button 1') \n{\n  // скрипт, который выполнится\n  // после нажатия \n  print('button 1 was clicked!')\n  step('SIMPLED')\n}\n\n// создаём строку кнопок\nbuttons()\nbutton(title1)\n{\n  \n  print('button 2 was clicked!')\n  step('SIMPLED')\n}\nbutton(title2)\n{\n  print('button 3 was clicked!')\n  step('SIMPLED')\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "EN"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "RU"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "ES"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'es'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT: [ {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        }, {
                            script: "text1 = 'Hi world!'\nlocal text2 = 'Hi world!'\n\n// создаём текст\ntext('Hi world!')\ntext(text1)\ntext(text2)\n \n// создаём текст с разными языками   \ntext({ \n  en: 'Hi world!', \n  ru: 'Привет мир!', es: '¡Hola mundo!'\n})"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "EN"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "RU"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "ES"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'es'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMAGE: [ {
                        type: "actions",
                        actions: [ {
                            script: "local URL = 'https://qudata.com/qubot/im/'  \n\n// создаём изображение  \nimage(URL + 'owl_a.png') \n\n// создаём группу изображений \nimages()    \nimage(URL + 'owl_b.png', 35)  \nimage(URL + 'owl_a.png', 35)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECKS: [ {
                        type: "text",
                        text: {
                            en: "Checkboxes are set using a function and do not change when clicked."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "check",
                                checked: 0
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "check",
                                checked: 1
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "check",
                                checked: 1
                            } ]
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local CHECK = [0,1,1]\n\n// устанавливаем значения чекбоксов\nset_check(CHECK)\n\n// читаем значения чекбоксов\nlist = get_check()"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RADIOS: [ {
                        type: "text",
                        text: {
                            en: "Radioboxes are set using a function and do not change when clicked."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: 0
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: 0
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: 1
                            } ]
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local CHECK = [0,0,1]\n\n// устанавливаем значения радиобоксов\nset_radio(CHECK)\n\n// читаем значения радиобоксов\nlist = get_radio()"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FUNC: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local a = 5.8\nlocal b = -6.1\nlocal c = 5.51\nlocal d = -6.99\nlocal e = 5.15\nlocal h = -5.15\nlocal f = 3.14159265\nlocal g = 2\n\n// округление чисел в меньшую сторону\nlocal floor1 = floor(5.8)    //  5\nlocal floor2 = floor(-6.1)   // -7\n// отбрасывание дробной части\nlocal trunc1 = trunc(5.51)   //  5\nlocal trunc2 = trunc(-6.99)  // -6\n// округление чисел в большую сторону\nlocal ceil1  = ceil(5.15)    // 6\nlocal ceil2  = ceil(-5.15)   // -5\n// округление val до num чисел\n// после запятой\nlocal round1 = round(3.14159265, 2)  // 3.14\n\nlocal floor11 = floor(a) //  5\nlocal floor21 = floor(b) // -7\nlocal trunc11 = trunc(c) //  5\nlocal trunc21 = trunc(d) // -6\nlocal ceil11  = ceil(e)  // 6\nlocal ceil12  = ceil(h)  // 6\nlocal round11 = round(f, g) // 3.14\n// возвращает случайное вещественное\n// число в диапазоне [0,1]\nlocal random1 = random()\n// возвращает целое случайное число\n// в диапазоне [min,max]\nlocal randint1 = randint(1, 9)\nlocal randint2 = randint(g, g+3)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT_FUNC: [ {
                        type: "actions",
                        actions: [ {
                            script: "a = 5.8\nb = -6.1\nc = 5.51\nd = -6.99\ne = 5.15\nf = 3.14159265\ng = 2"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "a = $a\n\n{floor(5.8) + 1} ==  6\n{floor(-6.1)}  ==  -7\n{trunc(5.51) + 1} ==   6\n{trunc(-6.99)} ==  -6\n{ceil(5.15) + 1} ==  7\n{round(3.14159265, 2) + 1} ==  4.14\n{floor(a) + 1} ==  6\n{floor(b)}  ==  -7\n{trunc(c)} ==  5\n{trunc(d)}  ==  -6\n{ceil(e) + 1}  ==  7\n{round(f, g)} ==  3.14\n{'asd'.length + 8}  ==  11\n{2 + 3} ==  5\n{a = 5}\n$a ==  5\n{random()}\n{randint(g, g+3)}"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START: [ {
                        type: "actions",
                        actions: [ {
                            script: "list = []\na = 12\nb = 3\na %= 3\nb %= 2\nф = 12 % 3"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Select level:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Simple"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Advanced"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Examples"
                                },
                                actions: [ {
                                    state: "EXAMPLES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Visual"
                                },
                                actions: [ {
                                    state: "VISUAL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SETS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// присваиваем целое число\nlocal sInt   = 7\n// присваиваем вещественное число\nlocal sFloat = 7.3\n// присваиваем строку\nlocal sStr   = 'hello'\n// присваиваем массив\nlocal sArr   = [7, 7.3, 'hello', sStr]\n// присваиваем словарь(объект)\nlocal sDic   = { n: 1, s: 'Wine' }\n// присваиваем логическое значение\nlocal sBool  = true\nlocal b      = false\n\n// присваиваем результаты\n// выполнения операций\nlocal res1   = not((sBool and b) or true) // false\nlocal res2   = 2+3-4*5+(1.5-0.2/2) // - 13.6\n\n// операции\nsInt += 2 // 9\nsInt++    // 10\nsInt -= 3 // 7\nsInt--    // 6\nsInt *= 2 // 12\nlocal sMod = sInt % 3 // 0\nsInt /= 3 // 4\n// остаток от деления\nsInt %= 2 // 0\n\nsFloat += 2 // 9.3\nsFloat++    // 10.3\nsFloat -= 3 // 7.3\nsFloat--    // 6.3\nsFloat *= 2 // 12.6\nsFloat /= 3 // 4.2\n// остаток от деления\nsFloat %= 3 // 1.2\n\nsStr += ', friend!' // hello, friend!"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LOOPS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local i1 = 4\n// запускаем цикл до тех пор\n// пока слот i1 > 0\nwhile (i1 > 0) \n{\n  i1--\n}\n\n// запускаем цикл до тех пор\n// пока переменная i2 > 0\nlocal i2 = 3\nwhile (i2) \n{\n    i2--\n}"
                        }, {
                            script: "local b1 = 0\nlocal arr = [3,2,1]\n// запускаем цикл для каждого\n// элемента arr\nfor(val in arr)\n{\n    b1 += val\n}\nprint(b1)\n\nlocal b2 = 0\n// запускаем цикл для каждого\n// элемента константного массива\nfor(val in [3,2,1])\n{\n    b2 += val\n}\nprint(b2)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    COMMENTS: [ {
                        type: "actions",
                        actions: [ {
                            script: "/*\nПример\n    многострочного\n        комментария\n*/\n\n// пример однострочного комментария"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STEPS: [ {
                        type: "text",
                        text: {
                            en: "The difference between step and goto work is presented in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// выполняем логику шага RUN\nrun('RUN')"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "STEP"
                                },
                                actions: [ {
                                    script: "// переходим в шаг STEP после\n// выполнения всех операций\nprint('before step')\nstep('STEP')\nprint('after step')"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "GOTO"
                                },
                                actions: [ {
                                    script: "// переходим в шаг GOTO сразу\n// выполнения всех операций\nprint('before goto')\ngoto('GOTO')\nprint('after goto')"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STEP: [ {
                        type: "text",
                        text: {
                            en: "This is step!"
                        }
                    }, {
                        type: "timer",
                        time: "3000",
                        actions: [ {
                            state: "STEPS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO: [ {
                        type: "text",
                        text: {
                            en: "This is goto!"
                        }
                    }, {
                        type: "timer",
                        time: "3000",
                        actions: [ {
                            state: "STEPS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RUN: [ {
                        type: "text",
                        text: {
                            en: "This is run!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IFS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local a = 9\n// если значение в a > 7\nif (a > 7) \n{\n  res1 = true\n}\nelse\n{\n  res1 = false\n}"
                        }, {
                            script: "local arr = [1,9,3]\n// если в массиве arr присутсвует 9\nif (a in arr)\n{\n  res2 = true\n}\nelse\n{\n  res2 = false\n}"
                        }, {
                            script: "local brr = {a: 9, b: 7}\nlocal field = 'b'\n// если в словаре brr есть ключ b\nif (field in brr)\n{\n  res3 = true\n}\nelse\n{\n  res3 = false\n}\n\n// если в словаре brr есть ключ a\nif (brr.a)\n{\n  res4 = true\n}\nelse\n{\n  res4 = false\n}\n\nif (brr.g)\n{\n  res5 = true\n}\nelse\n{\n  res5 = false\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANCED: [ {
                        type: "text",
                        text: {
                            en: "Select category:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "x Locals"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "x Switchs"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Sets"
                                },
                                actions: [ {
                                    state: "ASETS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Loops"
                                },
                                actions: [ {
                                    state: "ALOOPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Arrays"
                                },
                                actions: [ {
                                    state: "AARRAYS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Dicts"
                                },
                                actions: [ {
                                    state: "ADICTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Strings"
                                },
                                actions: [ {
                                    state: "ASTRS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Buttons"
                                },
                                actions: [ {
                                    state: "ABUTTONS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Texts"
                                },
                                actions: [ {
                                    state: "ATEXTS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Images"
                                },
                                actions: [ {
                                    state: "AIMAGES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Checks"
                                },
                                actions: [ {
                                    state: "ACHECKS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Radios"
                                },
                                actions: [ {
                                    slot: "list",
                                    value: "[true, false, false]"
                                }, {
                                    state: "ARADIOS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Funcs"
                                },
                                actions: [ {
                                    state: "AFUNCS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Steps"
                                },
                                actions: [ {
                                    state: "ASTEPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Ifs"
                                },
                                actions: [ {
                                    state: "AIFS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASETS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// задаём массив\nlocal narr = [1,2,3,4,5]\n// задаём массив объектов\nlocal arr  = [{a: 1}, {a: 2}, {a: 3}]\n// задаём 'сложный' массив\nlocal dict = {item: 1, name: 'asd', value: {a: narr }}\n\n// изменяем элемент в массиве \n// на объект (если нет - добавляем)\narr[4] = dict\n\n// получаем объект\nlocal elem   = arr[1]   // {a: 1}\n// получаем значение поля объекта\nlocal elem_d = arr[1].a // 2\n// 'сложная' выборка данных\nlocal elem2  = arr[4].value.a[2] // 3"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ALOOPS: [ {
                        type: "actions",
                        actions: [ {
                            script: "local arr = [\n  {id: 1, value: 'button 1'},\n  {id: 2, value: 'button 2'},\n  {id: 3, value: 'button 3'},\n]\n\n// динамически создаём кнопки\n// через while\nlocal i = 0\nwhile (i < arr.length)\n{\n  if (not (arr[i].id == 2)){\n    button(arr[i].value)\n    {\n      print('click ' + arr[i].value)\n    }\n  }\n  i++\n}\n// динамически создаём кнопки\n// через for\nbuttons()\nfor(item in arr)\n{\n  if (item.id != 2){\n    button(item.value)\n    {\n      print('click:')\n      for(name, val in item){\n        print('$name = $val')\n      }\n    }\n  }\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AARRAYS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local farr = [{a: 1},{a: 2},{a: 3},{value: {a: 3}}]\nlocal val = 3\nlocal res1 = farr.find(value == val)\nlocal res2 = farr.find(value.a == val)"
                        }, {
                            script: "local narr = [1,2,3,4,5]\nlocal arr = [{a: 1}, {a: 2}, {a: 3}]\nlocal dict = {item: 1, name: 'asd', value: {a: narr }}\narr[3] = dict\nlocal a = 2\nlocal b = 5\nlocal c = 10\n\nlocal len = arr.length\n// добавить значение из переменной\n// в конец массива\narr.push(narr)\n// добавить значение из переменной\n// в начало массива\narr.unshift(dict)\n// возращает часть массива\nlocal sub1 = arr.slice(arr[1].a - 1, narr[4])\n// удаляет часть массива\n// возвращает удалённую часть\narr.splice(b, c - a)\n// получаем поле последнего объекта\n// объекта из массива.\n// объект из массива удаляется\narr.push(dict)\nlocal pop1 = arr.pop().name\n// получаем поле первого объекта\n// объекта из массива.\n// объект из массива удаляется\nlocal shift1 = arr.shift().item\nprint(arr)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADICTS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// инициализация 'сложного' словаря\n// (объекта)\nlocal dic = { n: 1, s: { title: 'Wine' } }\n// получаем значение полей\nlocal a = dic.s.title\nlocal a = dic['n']['title']\n\n// задаём значение поля\ndic.eat = 'milk'\n\n// создаём новое поле\ndic['food'] = 'milk'\n\n// создаём словарь(объект) в словаре\n// (объекте)\ndic.bbb = {}\ndic['bbb']['title'] = 'milk'"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASTRS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local str1 = 'hello, friends \\t /'\nlocal exp  = 'asdw 28.12.2022 dsa'\nlocal arr1 = []\nlocal arr2 = []\n\n// переводим строку в массив в while\nlocal i = 0\nwhile(i < str1.length){\n  arr1.push(str1[i])\n  i++\n}\n\n// переводим строку в массив в for\nfor(s in str1){\n  arr2.push(s)\n}\n\nlocal str2 = 'Ivan'\nlocal str3 = str1.substring(0, 7)\nlocal str4 = '{str1.substring(0, 7)} $str2'\n\n// поиск по регулярному выражению\nlocal str5 = exp.search(/(0?[1-9]|[12][0-9]|3[01])[\\/\\-\\.](0?[1-9]|1[012])[ \\/\\.\\-](0?[12][0-9][0-9][0-9])/)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ABUTTONS: [ {
                        type: "text",
                        text: {
                            en: "An example of complex button generation"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local arr  = ['name 1', 'name 2', 'name 3']\nlocal arr2 = [1,2,3]\n\n// генерируем кнопки в цикле\n// со сложной логикой\nbuttons()\nfor(title in arr)\n{\n  button(title)\n  {\n    print(title + ' --')\n    if(randint(1,10) > 5)\n    {\n      print(title + ' ' + arr[0])\n    }\n    else\n    {\n      for(i in arr2){\n       print('arr is ' + i)\n      }\n    }\n  }\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ATEXTS: [ {
                        type: "actions",
                        actions: [ {
                            script: "local arr = ['Without translation 1', 'Without translation 2']\nlocal arr2 = [\n  {en: 'Hi!', ru: 'Привет!', es: 'Hola!'},\n  {en: 'World!', ru: 'Мир!', es: 'Mundo!'}\n]\n\n// генерация текста из массивов\nfor(title in arr)\n{\n  text(title)\n}\n\nfor(title in arr2)\n{\n  text(title)\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "EN"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "RU"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "ES"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'es'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXAMPLES: [ {
                        type: "text",
                        text: {
                            en: "Examples of the use of various elements."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Images"
                                },
                                actions: [ {
                                    state: "EXIMAGES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Buttons"
                                },
                                actions: [ {
                                    state: "EXBUTTONS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Inputs"
                                },
                                actions: [ {
                                    state: "EXIPUTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "START"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AIMAGES: [ {
                        type: "actions",
                        actions: [ {
                            script: ""
                        }, {
                            script: "local URL = 'https://qudata.com/qubot/im/'\nlocal arr = [\n  'owl_a.png', \n  'owl_b.png',\n  'owl_a.png',\n  'owl_a.png',\n  'owl_a.png', \n]\n\nlocal max = 3\nlocal c = 0\n\n// динамическая генерация изображений\nimages()\nfor(title in arr)\n{\n  if(c >= max) \n  {\n    images()\n    c = 0\n  }\n  image(URL + title)\n  c++\n}\n// генерация изображений в зависимости\n// от языка\nimages()\nlocal locale = {ru: URL + 'owl_a.png', en: URL + 'owl_b.png'}\nimage(locale)"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "EN"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "RU"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ACHECKS: [ {
                        type: "actions",
                        actions: [ {
                            script: "count = 0\n\n// вывод количества кликнутых элеметов\nfor(i in list)\n{\n  if(i == 1)\n  {\n    count++\n  }\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "An array of checkbox values.\nList: $list\nClick count: $count"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "One"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "Two"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "Three"
                                },
                                actions: [],
                                kind: "check",
                                checked: !1
                            } ]
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "list = get_check()"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ARADIOS: [ {
                        type: "actions",
                        actions: [ {
                            script: "count = 0\n// вывод количества кликнутых элеметов\nfor(i in list)\n{\n  if(i == 1)\n  {\n    count++\n  }\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "An array of radiobox values.\nList: $list\nSelected items count: $count"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "Button"
                                },
                                actions: [],
                                kind: "radio",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "if (get_radio().length > 0) {\n  list = get_radio()\n}"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AFUNCS: [ {
                        type: "text",
                        text: {
                            en: "Using functions inside buttons. See the source data in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "a = 5.8\nb = -6.1\nc = 5.51\nd = -6.99\ne = 5.15\nf = 3.14159265\ng = 2"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "{floor(a)}"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "{floor(b) + 1}"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Button {round(13.1453, 1)}"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "Update"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASTEPS: [ {
                        type: "actions",
                        actions: [ {
                            script: "nrun = 'RUN'\nnstep = 'STEP'\nngoto = 'GOTO'\nrun('A' + nrun)"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "The difference between step and goto work is presented in the debug window."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "STEP"
                                },
                                actions: [ {
                                    script: "step('')\n\n// переходим в шаг STEP после\n// выполнения всех операций\n// с дополнительной логикой\nprint('before step')\nif(nstep == 'ASTEP')\n{\n  step(nstep)\n}\nelse\n{\n  step('A' + nstep)\n}\nprint('after step')"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "GOTO"
                                },
                                actions: [ {
                                    script: "// переходим в шаг GOTO после\n// выполнения всех операций\n// с дополнительной логикой\nprint('before goto')\nif(ngoto== 'AGOTO')\n{\n  goto(ngoto)\n}\nelse\n{\n  goto('A' + ngoto)\n}\nprint('after goto')\n\ngoto('')"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AIFS: [ {
                        type: "actions",
                        actions: [ {
                            script: "local arr = [\n  [1,3,5,1,2],\n  [3,1,5,2,2],\n  [4,3,2,4,3],\n  [2,2,3,3,1],\n]\n// цикл с сложным if\nfor(val in arr)\n{\n  if(val[0] > 1 and val[1] != 2 and val[4] > 1 and (val[2] == 5 or val[2] == 3))\n  {\n    text('find !')\n  }\n  else\n  {\n    text('not find!')\n  }\n}"
                        }, {
                            script: "local a = 3\n\nif(a > 2) { print('a > 2') }\nif(a < 5) { print('a < 5') }\nif(a == 3) { print('a == 3') }\nif(a >= 3) { print('a >= 3') }\nif(a >= 2) { print('a >= 2') }\nif(a != 5) { print('a != 5') }\nif(a <= 3) { print('a <= 3') }\nif(a <= 5) { print('a <= 2') }"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "ADVANCED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ARUN: [ {
                        type: "text",
                        text: {
                            en: "This is Run!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASTEP: [ {
                        type: "text",
                        text: {
                            en: "This is step!"
                        }
                    }, {
                        type: "timer",
                        time: "3000",
                        actions: [ {
                            state: "ASTEPS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AGOTO: [ {
                        type: "text",
                        text: {
                            en: "This is goto!"
                        }
                    }, {
                        type: "timer",
                        time: "3000",
                        actions: [ {
                            state: "ASTEPS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXIMAGES: [ {
                        type: "text",
                        text: {
                            en: "Examples of using images."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Gallery"
                                },
                                actions: [ {
                                    state: "GALLERY"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Slider"
                                },
                                actions: [ {
                                    state: "BEFORE_SLIDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXAMPLES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SLIDER: [ {
                        type: "note",
                        note: "Динамический слайдер изображений"
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "// выводим изображение\nimage(URL + card[card[0]].img)\n// выводим подпись\ntext('image $card[0] of {card.length-1}')\n\n// выводим стрелки переключения\nbuttons()\nbutton('<-')\n{\n  if (card[0] == 1)\n  {\n    card[0] = card.length\n  }\n  card[0]--\n}\nbutton('->')\n{\n  if (card[0] == card.length - 1)\n  {\n    card[0] = 0\n  }\n  card[0]++\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXIMAGES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GALLERY: [ {
                        type: "note",
                        note: "Галлерея изображений с указанием столбцов"
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "URL = 'https://qudata.com/qubot/im/'\narr = [\n  'owl_a.png', \n  'owl_b.png',\n  'owl_a.png',\n  'owl_a.png',\n  'owl_a.png',\n  'owl_a.png',\n  'owl_b.png',\n  'owl_b.png',\n]\n\n// количество столбцов\ncols = 5\n// номер текущей колонки\nlocal col = 0\n\nimages()\nfor(title in arr)\n{\n  // если текущая колонка выходит\n  // за границы - создаём новую\n  // строку и обнуляем столбец\n  if(col >= cols) \n  {\n    images()\n    col = 0\n  }\n  image(URL + title)\n  col++\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXIMAGES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXBUTTONS: [ {
                        type: "text",
                        text: {
                            en: "Examples of using buttons."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Check"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Radio"
                                },
                                actions: [ {
                                    state: "BEFORE_RADIO"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Select 1"
                                },
                                actions: [ {
                                    state: "SELECT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Select 2"
                                },
                                actions: [ {
                                    state: "BEFORE_SELECT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXAMPLES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK: [ {
                        type: "text",
                        text: {
                            en: "Select elements."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "for(i, item in checks)\n{\n  buttons()\n  if(item.check)\n  {\n    button('☑ ' + item.title)\n    {\n      checks[i].check = false\n    }\n  }\n  else\n  {\n    button('☐ ' + item.title)\n    {\n      checks[i].check = true\n    }\n  }\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXBUTTONS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RADIO: [ {
                        type: "text",
                        text: {
                            en: "Choose one item."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "for(i, item in checks)\n{\n  buttons()\n  if(item.check)\n  {\n    button('● ' + item.title)\n    {\n      checks[i].check = false\n    }\n  }\n  else\n  {\n    button('○ ' + item.title)\n    {\n      // выключаем другие радиобоксы\n      for(item in checks){\n        item.check = false\n      }\n      checks[i].check = true\n    }\n  }\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXBUTTONS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT: [ {
                        type: "actions",
                        actions: [ {
                            script: "local checks = [\n  {title: 'Apple'},\n  {title: 'Banana'},\n  {title: 'Orange'},\n  {title: 'Pineapple'},\n]\n\nlocal show = 'You selected '\n\n// проверяем, был ли сделан выбор\n// ранее\nif(sel and sel.value.length)\n{\n  show += '$sel.value is $sel.num!'\n}\nelse\n{\n  show += 'nothing!'\n}\n\ntext(show)\ntext('Select, please:')\n\nlocal i = 0\nfor(item in checks)\n{\n  buttons()\n  button(item.title)\n  {\n    // при клике запоминаем название\n    // объекта и порядковый номер\n    sel = {num: i, value: item.title}\n  }\n  i++\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXBUTTONS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXLISTS: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXAMPLES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXIPUTS: [ {
                        type: "text",
                        text: {
                            en: "Examples of input processing."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Multiplicity "
                                },
                                actions: [ {
                                    state: "MULTIPLICITY"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Text"
                                },
                                actions: [ {
                                    state: "INPUT_TEXT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXAMPLES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MULTIPLICITY: [ {
                        type: "message",
                        typing: "100"
                    }, {
                        type: "note",
                        note: "Обработка ввода - числа кратные 3"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, write text multiplicity 3"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXIPUTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "float",
                        actions: [ {
                            script: "// проверяем что было введено число\n// затем проверяем что число кратно 3\nif(INPUT and INPUT % 3 == 0)\n{\n  text('Good! Number is multiplicity 3!')\n}\nelse\n{\n  text('Write is not multiplicity 3!')\n}"
                        } ]
                    } ],
                    SIMPLED: [ {
                        type: "text",
                        text: {
                            en: "Select category:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Locals"
                                },
                                actions: [ {
                                    state: "LOCALS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Sets"
                                },
                                actions: [ {
                                    state: "SETS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Switchs"
                                },
                                actions: [ {
                                    state: "SWITCHS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Loops"
                                },
                                actions: [ {
                                    state: "LOOPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Arrays"
                                },
                                actions: [ {
                                    state: "ARRAY"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Dicts"
                                },
                                actions: [ {
                                    state: "DICT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Strings"
                                },
                                actions: [ {
                                    state: "STR"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Buttons"
                                },
                                actions: [ {
                                    state: "BUTTON"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Texts"
                                },
                                actions: [ {
                                    state: "TEXT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Images"
                                },
                                actions: [ {
                                    state: "IMAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Checks"
                                },
                                actions: [ {
                                    state: "CHECKS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Radios"
                                },
                                actions: [ {
                                    state: "RADIOS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Funcs"
                                },
                                actions: [ {
                                    state: "FUNC"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Comments"
                                },
                                actions: [ {
                                    state: "COMMENTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Text_funcs"
                                },
                                actions: [ {
                                    state: "TEXT_FUNC"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Steps"
                                },
                                actions: [ {
                                    state: "STEPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Ifs"
                                },
                                actions: [ {
                                    state: "IFS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LOCALS: [ {
                        type: "actions",
                        actions: [ {
                            script: "// локальная переменная\n// текущего скрипта\nlocal b = 3\nlocal b = 8 \n\nif (b == 8)\n{\n  // локальная переменная \n  // блока оператора 'if'\n  local c = 9\n\n  // выведет 9\n  print(c)\n}\n\n// выведет 8\nprint(b)\n// выдаст ошибку, т.к. тут \n// переменная 'с' недоступна\nprint(c)"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: 'Look in the debug window, you should see: <span style="color: red;">evalIdentifier: unknown identifier: c</span>'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SWITCHS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "local a = 'one'\nlocal b = 'three'\n\n// проверяем переменную a\nswitch(a)\n{\n  // если в переменной хранится 'one'\n  case 'one':\n    print('in a one');\n    break;\n  // если в переменной хранится 'two'\n  case 'two':\n    print('in a two'); \n    break;\n}\n\n// проверяем переменную b\nswitch(b)\n{\n  // если в переменной хранится 'one'\n  case 'one':\n    print('in b one');\n    break;\n  // если в переменной хранится 'two'\n  case 'two':\n    print('in b two'); \n    break;\n  // если не подошло ни одно из\n  // предыдущих значений\n  // * не обязательный параметр\n  default:\n    print('default')\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "SIMPLED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_2: [ {
                        type: "actions",
                        actions: [ {
                            script: "// проверяем, был ли сделан выбор\n// ранее\nlocal show = 'You selected nothing!'\nfor(item in checks)\n{\n  if(item.check)\n  {\n    show = 'You selected {item.title}!'\n  }\n}\n\ntext(show)\ntext('Select, please:')\n\nfor(i, item in checks)\n{\n  item.check = false\n  buttons()\n  button(item.title)\n  {\n    // при клике запоминаем название\n    checks[i].check = true\n  }\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXBUTTONS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            script: "checks = [\n  {title: 'Apple',     check: true},\n  {title: 'Banana',    check: false},\n  {title: 'Orange',    check: true},\n  {title: 'Pineapple', check: false},\n]"
                        }, {
                            goto: "CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_RADIO: [ {
                        type: "actions",
                        actions: [ {
                            script: "checks = [\n  {title: 'Apple',     check: false},\n  {title: 'Banana',    check: false},\n  {title: 'Orange',    check: true},\n  {title: 'Pineapple', check: false},\n]"
                        }, {
                            goto: "RADIO"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_SELECT: [ {
                        type: "actions",
                        actions: [ {
                            script: "checks = [\n  {title: 'Apple',     check: false},\n  {title: 'Banana',    check: false},\n  {title: 'Orange',    check: true},\n  {title: 'Pineapple', check: false},\n]"
                        }, {
                            goto: "SELECT_2"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_SLIDER: [ {
                        type: "actions",
                        actions: [ {
                            script: "URL = 'https://qudata.com/qubot/im/'\ncard = [\n  1, // active\n  {img: 'owl_a.png'},\n  {img: 'owl_b.png'},\n  {img: 'owl_a.png'},\n  {img: 'owl_b.png'},\n]"
                        }, {
                            goto: "SLIDER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    VISUAL: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Sets"
                                },
                                actions: [ {
                                    state: "VSETS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Switchs"
                                },
                                actions: [ {
                                    state: "VSWITCHS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Ifs"
                                },
                                actions: [ {
                                    state: "VIFS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    VSETS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            slot: "sInt",
                            value: "7"
                        }, {
                            slot: "sFloat",
                            value: "7.3"
                        }, {
                            slot: "sStr",
                            value: "'hello'"
                        }, {
                            slot: "sArr",
                            value: "[7, 7.3, 'hello', sStr]"
                        }, {
                            slot: "sDic",
                            value: "{ n: 1, s: 'Wine' }"
                        }, {
                            slot: "sBool",
                            value: "true"
                        }, {
                            slot: "res1",
                            value: "not((sBool and b) or true)"
                        }, {
                            slot: "res2",
                            value: "2+3-4*5+(1.5-0.2/2)"
                        }, {
                            script: "sInt += 2\nsFloat -= 3\nsStr += ', friend!'"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "VISUAL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    VSWITCHS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            slot: "a",
                            value: "'one'"
                        }, {
                            slot: "b",
                            value: "'three'"
                        }, {
                            switch: "a",
                            actions: [ {
                                case: "'one'",
                                actions: [ {
                                    script: "print('in a one')"
                                } ]
                            }, {
                                case: "'two'",
                                actions: [ {
                                    script: "print('in a two')"
                                } ]
                            } ]
                        }, {
                            switch: "b",
                            actions: [ {
                                case: "'one'",
                                actions: [ {
                                    script: "print('in b one')"
                                } ]
                            }, {
                                case: "'two'",
                                actions: [ {
                                    script: "print('in b two')"
                                } ]
                            }, {
                                default: "",
                                actions: [ {
                                    script: "print('default')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "VISUAL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    VIFS: [ {
                        type: "text",
                        text: {
                            en: "See the result in the debug window."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "a = 3\narr = [1,9,3]\nbrr = {a: 9, b: 7}\nfield = 'b'\nres1 = false\nres2 = false\nres3 = false\nres4 = false"
                        }, {
                            if: "a > 7",
                            actions: [ {
                                script: "res1 = true"
                            } ]
                        }, {
                            if: "a in arr",
                            actions: [ {
                                script: "res2 = true"
                            } ]
                        }, {
                            if: "field in brr",
                            actions: [ {
                                script: "res3 = true"
                            } ]
                        }, {
                            if: "brr.g",
                            actions: [ {
                                script: "res4 = true"
                            } ]
                        }, {
                            else: "brr.a",
                            actions: [ {
                                script: "res5 = true"
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                script: "res5 = false"
                            } ]
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "VISUAL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INPUT_TEXT: [ {
                        type: "message",
                        typing: "100"
                    }, {
                        type: "text",
                        text: {
                            en: "An example of the <b>print</b> function. Pay attention to the debug window. If but is closed, then type /debug."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "Write text"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🢨 back"
                                },
                                actions: [ {
                                    state: "EXIPUTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "print(INPUT)"
                        } ]
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    a: "",
                    b: "",
                    res1: "",
                    res2: "",
                    sInt: "",
                    sFloat: "",
                    sStr: "",
                    sArr: "",
                    sDic: "",
                    sBool: "",
                    count: "",
                    list: ""
                },
                cards: {
                    states: {
                        ARRAY: {
                            c: 0,
                            r: 4,
                            x: 100,
                            y: 100,
                            folder: "Simple"
                        },
                        DICT: {
                            c: 1,
                            r: 4,
                            x: 200,
                            y: 200,
                            folder: "Simple"
                        },
                        STR: {
                            c: 0,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        BUTTON: {
                            c: 1,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        TEXT: {
                            c: 0,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        IMAGE: {
                            c: 1,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        CHECKS: {
                            c: 0,
                            r: 7,
                            x: -100,
                            y: -100,
                            folder: "Simple"
                        },
                        RADIOS: {
                            c: 1,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        FUNC: {
                            c: 0,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        TEXT_FUNC: {
                            c: 0,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        START: {
                            c: 1,
                            r: 0,
                            x: 856,
                            y: 557
                        },
                        SETS: {
                            c: 1,
                            r: 2,
                            x: 100,
                            y: 100,
                            folder: "Simple"
                        },
                        LOOPS: {
                            c: 0,
                            r: 3,
                            x: 100,
                            y: 100,
                            folder: "Simple"
                        },
                        COMMENTS: {
                            c: 1,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        STEPS: {
                            c: 1,
                            r: 9,
                            x: 100,
                            y: 100,
                            folder: "Simple"
                        },
                        STEP: {
                            c: 0,
                            r: 11,
                            x: 200,
                            y: 200,
                            folder: "Simple"
                        },
                        GOTO: {
                            c: 1,
                            r: 11,
                            x: 300,
                            y: 300,
                            folder: "Simple"
                        },
                        RUN: {
                            c: 2,
                            r: 11,
                            x: 400,
                            y: 400,
                            folder: "Simple"
                        },
                        IFS: {
                            c: 0,
                            r: 10,
                            x: 100,
                            y: 100,
                            folder: "Simple"
                        },
                        ADVANCED: {
                            c: 2,
                            r: 0,
                            x: 1119,
                            y: 331
                        },
                        ASETS: {
                            c: 2,
                            r: 2,
                            x: 100,
                            y: 100,
                            folder: "Advanced"
                        },
                        ALOOPS: {
                            c: 3,
                            r: 2,
                            x: 200,
                            y: 200,
                            folder: "Advanced"
                        },
                        AARRAYS: {
                            c: 2,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ADICTS: {
                            c: 3,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ASTRS: {
                            c: 2,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ABUTTONS: {
                            c: 3,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ATEXTS: {
                            c: 2,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        EXAMPLES: {
                            c: 1,
                            r: 1,
                            x: 581,
                            y: 694
                        },
                        AIMAGES: {
                            c: 3,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ACHECKS: {
                            c: 2,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ARADIOS: {
                            c: 3,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        AFUNCS: {
                            c: 2,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ASTEPS: {
                            c: 3,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        AIFS: {
                            c: 2,
                            r: 8,
                            x: -100,
                            y: -100,
                            folder: "Advanced"
                        },
                        ARUN: {
                            c: 2,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        ASTEP: {
                            c: 3,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        AGOTO: {
                            c: 4,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "Advanced"
                        },
                        EXIMAGES: {
                            c: 0,
                            r: 10,
                            x: 282,
                            y: 603
                        },
                        SLIDER: {
                            c: 3,
                            r: 4,
                            x: 300,
                            y: 300,
                            folder: "Images Example"
                        },
                        GALLERY: {
                            c: 1,
                            r: 4,
                            x: 200,
                            y: 200,
                            folder: "Images Example"
                        },
                        EXBUTTONS: {
                            c: 1,
                            r: 10,
                            x: 985,
                            y: 802
                        },
                        CHECK: {
                            c: 1,
                            r: 4,
                            x: -100,
                            y: -100,
                            folder: "Buttons Example"
                        },
                        RADIO: {
                            c: 3,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "Buttons Example"
                        },
                        SELECT: {
                            c: 0,
                            r: 5,
                            x: 100,
                            y: 100,
                            folder: "Buttons Example"
                        },
                        EXLISTS: {
                            c: 2,
                            r: 10,
                            x: 277,
                            y: 838
                        },
                        EXIPUTS: {
                            c: 3,
                            r: 10,
                            x: 905,
                            y: 1045
                        },
                        MULTIPLICITY: {
                            c: 2,
                            r: 4,
                            x: 1107,
                            y: 634,
                            folder: "Example inputs"
                        },
                        SIMPLED: {
                            c: 0,
                            r: 0,
                            x: 610,
                            y: 320
                        },
                        LOCALS: {
                            c: 0,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        SWITCHS: {
                            c: 1,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "Simple"
                        },
                        SELECT_2: {
                            c: 1,
                            r: 5,
                            x: 200,
                            y: 200,
                            folder: "Buttons Example"
                        },
                        BEFORE_CHECK: {
                            c: 0,
                            r: 4,
                            x: -200,
                            y: -200,
                            folder: "Buttons Example"
                        },
                        BEFORE_RADIO: {
                            c: 2,
                            r: 4,
                            x: -100,
                            y: -100,
                            folder: "Buttons Example"
                        },
                        BEFORE_SELECT: {
                            c: 2,
                            r: 5,
                            x: 300,
                            y: 300,
                            folder: "Buttons Example"
                        },
                        BEFORE_SLIDER: {
                            c: 2,
                            r: 4,
                            x: 300,
                            y: 300,
                            folder: "Images Example"
                        },
                        VISUAL: {
                            c: 3,
                            r: 0,
                            x: 1155,
                            y: 664
                        },
                        VSETS: {
                            c: 2,
                            r: 2,
                            x: 1178,
                            y: 706.000098023738,
                            folder: "Visual"
                        },
                        VSWITCHS: {
                            c: 3,
                            r: 2,
                            x: 1278,
                            y: 806.000098023738,
                            folder: "Visual"
                        },
                        VIFS: {
                            c: 4,
                            r: 2,
                            x: 1378,
                            y: 906.000098023738,
                            folder: "Visual"
                        },
                        INPUT_TEXT: {
                            c: 3,
                            r: 4,
                            x: 1191,
                            y: 729,
                            folder: "Example inputs"
                        }
                    },
                    folders: {
                        Simple: {
                            c: 0,
                            r: 1,
                            x: 423,
                            y: 184,
                            openGrid: !1
                        },
                        Advanced: {
                            c: 2,
                            r: 1,
                            x: 1426,
                            y: 230,
                            openGrid: !0
                        },
                        "Images Example": {
                            c: 1,
                            r: 11,
                            x: 1,
                            y: 521,
                            openGrid: !1
                        },
                        "Buttons Example": {
                            c: 0,
                            r: 11,
                            x: 1327,
                            y: 940,
                            openGrid: !1
                        },
                        "Example lists": {
                            c: 3,
                            r: 11,
                            x: 34,
                            y: 935,
                            openGrid: !1
                        },
                        "Example inputs": {
                            c: 2,
                            r: 11,
                            x: 1232,
                            y: 1144,
                            openGrid: !1
                        },
                        Visual: {
                            c: 3,
                            r: 1,
                            x: 1467,
                            y: 741,
                            openGrid: !1
                        }
                    }
                }
            }
        };
    }
}

class QuBotEditorTemplates {
    constructor() {
        this.bots = {
            FAQ: {
                id: 0,
                name: "FAQ-assistant",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    FAQ_WHY: [ {
                        type: "text",
                        text: {
                            ru: "1. Клиенты должны видеть, что бизнес с ними находится на связи 24 часа в сутки.",
                            en: "1. The customers have to see your business is accessible 24/7."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "2. Чат боты расширяют каналы продаж в месенджерах и социальных сетях.",
                            en: "2. Bots let you expand your sales channels to messengers and social networks."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "3. Чат боты снижают издержки, беря на себя многие рутинные действия.",
                            en: "3. Chatbots reduce costs by performing routine work."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "4. Клиенты ощущают личное отношение, что повышает их доверие к компании.",
                            en: "4. The customers appreciate personal approach, which establishes credibility."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: '5. Люди любят общаться не с текстом на сайте, а с "живым" собеседником.',
                            en: "5. People prefer maintaining dialog, instead simply browsing a website for information."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Понятно",
                                    en: "⇧ OK"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "⇩ Непонятно",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_HOW"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    FAQ_KINDS: [ {
                        type: "text",
                        text: {
                            ru: "По способу коммуникации с человеком боты бывают с кнопочной навигацией и понимающие естественный язык.",
                            en: "According to the communicational method, tbots fall into those with button navigation and those understanding natural language."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "По алгоритмам поведения боты могут быть основаны на правилах или быть самообучающимися.",
                            en: "According to behavioral algorithms, chatbots are divided into determined and self-learning."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Понятно",
                                    en: "⇧ OK"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "⇩ Непонятно",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_HOW"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_HOW: [ {
                        type: "text",
                        text: {
                            ru: "Нужно связаться со специалистами нашей компании.",
                            en: "Contact our team and describe what you need."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👫 Contact us",
                                    ru: "👫 Связаться с нами"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_COST_NLU: [ {
                        type: "actions",
                        actions: [ {
                            state: "FAQ_COST_LOGIC"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            ru: "Сколько примерно намерений человека должен понимать чат-бот?",
                            en: "Roughly, how many intents should a chatbot understand?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "10",
                                    en: "10"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 5000"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "50",
                                    en: "50"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 20000"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "100..",
                                    en: "100"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 50000"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "🦉 Что такое намерение?",
                                    en: "🦉 What is intent?"
                                },
                                actions: [ {
                                    state: "FAQ_COST_INTENT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    FAQ_COST_INTENT: [ {
                        type: "text",
                        text: {
                            ru: "<b>Намерение</b> (intent) - это один из классов, к которому необходимо отнести введенный человеком текст.",
                            en: "The <b>intent</b> is a class used to attribute user texts."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "Например, намерение <b>GREET</b> должно срабатывать, если человек пишет '<i>преветик</i>', а намерение <b>WANT_CHEAPER</b> после ввода '<i>мне бы что-то подешевше...</i>'",
                            en: "For example, <b>GREET</b> is the intent to be fired when a user types '<i>Hello</i>', while <b>WANT_CHEAPER</b> should be triggered after '<i>I'd need something less expensive..."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "Для каждого намерения необходимо подготовить примеры, обучить нейронную сеть и в дальнейшем переобучать её на реальных диалогах.",
                            en: "Sample texts provided for each intent allows neural network to learn, and further train using real dialogs."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Понятно",
                                    en: "⇧ OK"
                                },
                                actions: [ {
                                    state: "FAQ_COST_NLU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "⇩ Непонятно",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_HOW"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_COST_LOGIC: [ {
                        type: "text",
                        text: {
                            ru: "Логика бота будет основана на правилах (детерминирована) или на алгоритмах искусственного интеллекта?",
                            en: "Should the bot logics be based on rules (determined) or AI algorithms?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "На правилах",
                                    en: "Rules"
                                },
                                actions: [ {
                                    state: "FAQ_COST_END"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "На алгоритмах ИИ",
                                    en: "AI algorithms"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE * 10"
                                }, {
                                    state: "FAQ_COST_END"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "🦉 Непонятно",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_LOGIC"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_COST_END: [ {
                        type: "text",
                        text: {
                            ru: "Ориентировочная стоимость бота будет $BOT_PRICE USD.",
                            en: "The approximate chatbot cost is $BOT_PRICE USD."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Понятно",
                                    en: "⇧ OK"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "⇩ Непонятно",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_HOW"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_COST: [ {
                        type: "actions",
                        actions: [ {
                            slot: "BOT_PRICE",
                            value: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            ru: "Не простой вопрос 🙊...",
                            en: "That depends 🙊..."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "Прежде всего, давайте попробуем прояснить несколько моментов.",
                            en: "First let's clear up a couple of points."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "Как человек будет взаимодействовать с ботом?",
                            en: "How is a user supposed to communicate with the bot?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "При помощи кнопок",
                                    en: "Using buttons"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 1000"
                                }, {
                                    state: "FAQ_COST_LOGIC"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Вводя текст",
                                    en: "Typing answers"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 2000"
                                }, {
                                    state: "FAQ_COST_NLU"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Оба способа",
                                    en: "Both"
                                },
                                actions: [ {
                                    slot: "BOT_PRICE",
                                    value: "$BOT_PRICE + 3000"
                                }, {
                                    state: "FAQ_COST_NLU"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "🦉Непонятно ",
                                    en: "⇩ Learn more"
                                },
                                actions: [ {
                                    state: "FAQ_INPUT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    FAQ_MAIN: [ {
                        type: "text",
                        text: {
                            ru: "Что Вас интересует:",
                            en: "Select a question:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Для чего нужен чат-бот?",
                                    en: "What are the advantages of a chatbot?"
                                },
                                actions: [ {
                                    state: "FAQ_WHY"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Какие бывают чат-боты?",
                                    en: "What types of bots exist?"
                                },
                                actions: [ {
                                    state: "FAQ_KINDS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Сколько стоит чат-бот?",
                                    en: "How much does it cost to create a bot?"
                                },
                                actions: [ {
                                    state: "FAQ_COST"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Как сделать чат-бот?",
                                    en: "How can I get a customized chatbot?"
                                },
                                actions: [ {
                                    state: "FAQ_HOW"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "❌ Не это",
                                    en: "❌ Other one"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    ru: "🏠 В начало",
                                    en: "🏠 Home"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    FAQ_LOGIC: [ {
                        type: "text",
                        text: {
                            ru: "Мне непонятно:",
                            en: "Going further:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: " Что такое правила?",
                                    en: "What are rules?"
                                },
                                actions: [ {
                                    state: "FAQ_LOGIC_RULES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "Что такое алгритмы ИИ?",
                                    en: "What are AI algorithms?"
                                },
                                actions: [ {
                                    state: "FAQ_LOGIC_AI"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_COST_LOGIC"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_LOGIC_RULES: [ {
                        type: "text",
                        text: {
                            ru: "Бот содержит жёсткий алгоритм реакции на действия пользователя. Его ответы могут варьироваться, но выводимая информация полностью контролируется разработчиком.",
                            en: "A bot follows a strict response algorithm. While the replies may vary, the provided information is fully controlled by a developer."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "➕ поведения бота контролируемо, невозможны странные или неполиткорректные ответы.",
                            en: "➕ Full control over chatbot behavior excludes irrelevant or inappropriate replies."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: '➖ не могут отклонятся от заданной программы и иногда выглядят не достаточно "интеллектуально".',
                            en: '➖ Unable to deviate from the script, bots may seem not that "intelligent".'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_LOGIC"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_LOGIC_AI: [ {
                        type: "text",
                        text: {
                            ru: 'Бот использует нейронные сети и другие методы искусственного интеллекта. Это "чёрный ящик", поведение которого настраивается при помощи машинного обучения.',
                            en: "A bot uses neural networks and other AI-based methods. It's behavior is set using machine learning."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: '➕ Могут выглядеть "почти как люди". Адекватно реагировать в неожиданных ситуациях и подстраиваться под поведение пользователей.',
                            en: '➕ Bots simulate "human behavior". They can respond adequately to non-standard situations and adapt to user behavior.'
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "➖ Поведение может быть непредсказуемым и требуют длительной настройки с анализом поведения реальных пользователей.",
                            en: "➖ Bot behavior may be unpredictable and require time-consuming configuration and analysis of actual human responses."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_LOGIC"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_INPUT: [ {
                        type: "text",
                        text: {
                            ru: "При кнопочной навигации диалог реализуется в результате нажатия на кнопки с текстом:",
                            en: "In case of button navigation, a user maintains the dialog by clicking buttons:"
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "➕ люди не любят писать и им проще нажимать на кнопки.",
                            en: "➕ Users rather prefer clicking an option than typing."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "➖ навигация иногда оказывается довольно длинной.",
                            en: "➖ Navigation may prove strange and time-consuming."
                        }
                    }, {
                        type: "text",
                        text: {
                            ru: "Боты, понимающие ввод текста на естестественном языке дороже, но в них удобнее навигация, т.к. можно сразу перейти к нужной теме. Кроме этого к такому боту больше доверия, как к живому собеседнику.",
                            en: "Chatbots that can process natural language are more expensive, however they have better navigation, as they can get straight to the point. They also enjoy higher credibility, as a real interlocutor."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    ru: "⇧ Назад",
                                    en: "⇧ Back"
                                },
                                actions: [ {
                                    state: "FAQ_COST"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAIN: [ {
                        type: "text",
                        text: {
                            en: "Welcome to <b>QuData</b> website!",
                            ru: "Приветствуем Вас на сайте компании  <b>QuData</b>!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👫 Contact us",
                                    ru: "👫 Связаться с нами"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 Ask a question",
                                    ru: "🦉 Задать вопрос"
                                },
                                actions: [ {
                                    state: "FAQ_MAIN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Change language",
                                    ru: "🌐 Сменить язык"
                                },
                                actions: [ {
                                    state: "LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            state: "MAIN"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "What language do you prefer to communicate in?",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватись?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "en"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "ru"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "Very strange name $INPUT. Could you introduce yourself differently:",
                            ru: "Очень странное имя $INPUT. Не могли бы Вы представиться по другому:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length > 1)\n{\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Our mail: info@qudata.com, and yours, $CUSTOMER_NAME?",
                            ru: "Наша почта: info@qudata.com, а Ваша, $CUSTOMER_NAME?"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_EMAIL = INPUT\n  step("BEFORE_CHECK")\n  if (not CUSTOMER_PHONE)\n  {\n    step("CUSTOMER_PHONE_MAYBE")\n  }\n} else {\n  step("CUSTOMER_EMAIL_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We will not be able to write to you at this address. Will you try again?",
                            ru: "Мы не сможем написать Вам по такому адресу. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if(not CUSTOMER_PHONE)\n{\n step("CUSTOMER_PHONE_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, please enter your phone number:",
                            ru: "$CUSTOMER_NAME, введите пожалуйста Ваш телефон:"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_PHONE = INPUT\n  step("BEFORE_CHECK")\n  if(not CUSTOMER_EMAIL) {\n    step("CUSTOMER_EMAIL_MAYBE")\n  }\n} else {\n  step("CUSTOMER_PHONE_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Will you try again?",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, maybe you will leave your phone? We can send messages in the messenger.",
                            ru: "$CUSTOMER_NAME, может быть Вы оставите Ваш телефон? Мы можем присылать сообщения в месенджере."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, would you mind leaving your email? Sometimes we will send in very useful information.",
                            ru: "$CUSTOMER_NAME, Вы не против оставить Вашу электронную почту? Иногда мы будем присылать очень полезную информацию."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_MESSAGE: [ {
                        type: "text",
                        text: {
                            en: "Write something about yourself or leave any of your suggestions. Your feedback is very important to us.",
                            ru: "Напишите что-нибудь о себе или оставьте любые Ваши предложения. Ваше мнение очень важно для нас."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "CUSTOMER_MESSAGE = INPUT"
                        }, {
                            state: "CUSTOMER_END"
                        } ]
                    } ],
                    CUSTOMER_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n"kind":    "customer",\n"name":    CUSTOMER_NAME,\n"phone":   CUSTOMER_PHONE,\n"mail":    CUSTOMER_EMAIL,\n"message": CUSTOMER_MESSAGE\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you very much $CUSTOMER_NAME 😊, we will contact you shortly.",
                            ru: "Спасибо большое $CUSTOMER_NAME 😊, мы свяжемся с Вами в ближайшее время."
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_MESSAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change name",
                                    ru: "🤖 Изменить имя"
                                },
                                actions: [ {
                                    state: "CUSTOMER_NAME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change mail",
                                    ru: "💻Изменить почту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change phone",
                                    ru: "📞 Изменить телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            note: ""
                        }, {
                            script: 'if (CUSTOMER_PHONE and CUSTOMER_EMAIL)\n{\n  goto("PHONE_AND_EMAIL")\n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_PHONE)\n{\n  goto("ONLY_PHONE")\n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_EMAIL)\n{\n  goto("ONLY_EMAIL")\n}'
                        }, {
                            note: ""
                        }, {
                            goto: "NOTHING"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact by mail <b> $CUSTOMER_EMAIL </b> and phone <b> $CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b> и телефону <b>$CUSTOMER_PHONE</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b>$CUSTOMER_NAME </b> and you prefer to contact by by mail <b>$CUSTOMER_EMAIL</b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, you have left no phone or mail.",
                            ru: "$CUSTOMER_NAME, Вы не оставили, ни телефона, ни почты."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_NAME: [ {
                        type: "text",
                        text: {
                            en: "Please introduce yourself 🙏:",
                            ru: "Пожалуйста, введите своё имя 🙏:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length < 2)\n{\n  step("CUSTOMER_WRONG_NAME")\n} else {\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_START: [ {
                        type: "actions",
                        actions: [ {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_NAME) \n{\n  goto("CUSTOMER_NAME") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_CHANNEL") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_EMAIL_MAYBE") \n}'
                        }, {
                            note: ""
                        }, {
                            script: 'if(CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_PHONE_MAYBE") \n}'
                        }, {
                            note: ""
                        }, {
                            goto: "BEFORE_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHANNEL: [ {
                        type: "text",
                        text: {
                            en: "We may want to contact you. Is it more convenient for you to communicate by phone or email?",
                            ru: "Возможно, мы захотим связаться с Вами. Вам удобнее общаться по телефону или по электронной почте?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "Nice to meet you $CUSTOMER_NAME!",
                            ru: "Рад знакомству $CUSTOMER_NAME!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_START"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact phone <b>$CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по телефону <b>$CUSTOMER_PHONE</b>. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    BOT_PRICE: ""
                },
                cards: {
                    states: {
                        FAQ_WHY: {
                            c: 1,
                            r: 1,
                            x: 2,
                            y: 174
                        },
                        FAQ_KINDS: {
                            c: 2,
                            r: 1,
                            x: 228,
                            y: 185
                        },
                        FAQ_HOW: {
                            c: 3,
                            r: 1,
                            x: 633,
                            y: 24
                        },
                        FAQ_COST_NLU: {
                            c: 2,
                            r: 2,
                            x: 233,
                            y: 398
                        },
                        FAQ_COST_INTENT: {
                            c: 3,
                            r: 2,
                            x: 227,
                            y: 547
                        },
                        FAQ_COST_LOGIC: {
                            c: 0,
                            r: 3,
                            x: 516,
                            y: 379
                        },
                        FAQ_COST_END: {
                            c: 0,
                            r: 4,
                            x: 2,
                            y: 420
                        },
                        FAQ_COST: {
                            c: 0,
                            r: 2,
                            x: 518,
                            y: 170
                        },
                        FAQ_MAIN: {
                            c: 0,
                            r: 1,
                            x: 263,
                            y: 0
                        },
                        FAQ_LOGIC: {
                            c: 1,
                            r: 3,
                            x: 494,
                            y: 550
                        },
                        FAQ_LOGIC_RULES: {
                            c: 2,
                            r: 3,
                            x: 773,
                            y: 490
                        },
                        FAQ_LOGIC_AI: {
                            c: 3,
                            r: 3,
                            x: 784,
                            y: 691
                        },
                        FAQ_INPUT: {
                            c: 1,
                            r: 2,
                            x: 782,
                            y: 270
                        },
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 20,
                            y: 12
                        },
                        LANGUAGE: {
                            c: 1,
                            r: 0,
                            x: 872,
                            y: 143
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 1,
                            r: 7,
                            x: 832,
                            y: 929.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL: {
                            c: 0,
                            r: 8,
                            x: 1085,
                            y: 1155.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 1,
                            r: 8,
                            x: 1904,
                            y: 1076.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE: {
                            c: 0,
                            r: 9,
                            x: 318,
                            y: 1256.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 1,
                            r: 9,
                            x: 719,
                            y: 1129.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 2,
                            r: 8,
                            x: 644,
                            y: 1390.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 2,
                            r: 9,
                            x: 966,
                            y: 1574.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_MESSAGE: {
                            c: 2,
                            r: 6,
                            x: 1959,
                            y: 880.0124332656075,
                            folder: "Customer"
                        },
                        CUSTOMER_END: {
                            c: 1,
                            r: 6,
                            x: 1693,
                            y: 763.0124439610204,
                            folder: "Customer"
                        },
                        CUSTOMER_CHECK: {
                            c: 3,
                            r: 7,
                            x: 1564,
                            y: 941.0124332656075,
                            folder: "Customer"
                        },
                        BEFORE_CHECK: {
                            c: 3,
                            r: 8,
                            x: 1661,
                            y: 1379.007084045056,
                            folder: "Customer"
                        },
                        PHONE_AND_EMAIL: {
                            c: 0,
                            r: 10,
                            x: 1213,
                            y: 1322.007084045056,
                            folder: "Customer"
                        },
                        ONLY_EMAIL: {
                            c: 2,
                            r: 10,
                            x: 1452,
                            y: 1586.007084045056,
                            folder: "Customer"
                        },
                        NOTHING: {
                            c: 3,
                            r: 10,
                            x: 2023,
                            y: 1362.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_NAME: {
                            c: 0,
                            r: 7,
                            x: 460,
                            y: 847.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_START: {
                            c: 0,
                            r: 6,
                            x: 813,
                            y: 777.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_CHANNEL: {
                            c: 3,
                            r: 6,
                            x: 1214,
                            y: 818.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_GREET: {
                            c: 2,
                            r: 7,
                            x: 430,
                            y: 1053.007084045056,
                            folder: "Customer"
                        },
                        ONLY_PHONE: {
                            c: 1,
                            r: 10,
                            x: 1210,
                            y: 1494.007084045056,
                            folder: "Customer"
                        }
                    },
                    folders: {
                        Customer: {
                            c: 0,
                            r: 5,
                            x: 120,
                            y: 805,
                            openGrid: !1
                        }
                    }
                }
            },
            Scheduling: {
                id: 0,
                name: "Scheduling Meetings",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Hello!"
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "My name is QuBot, and I will help you to schedule a meeting with Mrs. Jane Smith. "
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, let me clarify some information, and I will add a meeting to Mrs. Smith's calendar. Are you ready to start?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes"
                                },
                                actions: [ {
                                    state: "ENTER_NAME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ENTER_TIME2: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_TIME",
                            value: '"CONFIRM2"'
                        }, {
                            slot: "SS_FROM_ENTER_TIME",
                            value: '"ENTER_TIME2"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "What time slot works for you?\n\nPlease, enter the time (hours:minutes):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_TIME"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "time",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_TIME"
                            } ]
                        } ],
                        kind: "time"
                    } ],
                    ENTER_DATE2: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_DATE",
                            value: '"ENTER_TIME2"'
                        }, {
                            slot: "SS_FROM_ENTER_DATE",
                            value: '"ENTER_DATE2"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Select the date for the meeting.\n\nPlease, write as month/day/year:"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            slot: "date",
                            value: "$INPUT",
                            state: "WRONG_DATE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "date",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_DATE"
                            } ]
                        } ],
                        kind: "MMDDYYYY"
                    } ],
                    ENTER_PHONE2: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_PHONE",
                            value: '"ENTER_DATE2"'
                        }, {
                            slot: "SS_FROM_ENTER_PHONE",
                            value: '"ENTER_PHONE2"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Can you please leave me your phone number, so Mrs. Smith can contact you before the meeting.\n\nPlease use this format: <b>+1234567890</b>"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_PHONE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "phone",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_PHONE"
                            } ]
                        } ],
                        kind: "phone"
                    } ],
                    SELECT_MEET: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Would you like to meet Mrs. Smith in person or online?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "In Person"
                                },
                                actions: [ {
                                    state: "SELECT_PLACE1"
                                }, {
                                    slot: "meetType",
                                    value: '"In Person"'
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Online"
                                },
                                actions: [ {
                                    slot: "meetType",
                                    value: '"Online"'
                                }, {
                                    state: "SELECT_MESSENGER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    CONFIRM2: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: 'Ok, so Mrs. Smith will meet you at $address on <b>$date</b> at <b>$time</b>, and your phone number is <b>$phone</b>?\nIf this is correct click the "<b>👉 Yes</b>" button, and I will add the information to Mrs. Smith\'s calendar.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Reschedule"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉Yes"
                                },
                                actions: [ {
                                    state: "FINISH"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    CONFIRM1: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: 'Ok, so Mrs. Smith will meet you at her office on <b>$date</b> at <b>$time</b> , and your phone number is <b>$phone</b>?\nIf this is correct click the "<b>👉 Yes</b>" button, and I will add the information to Mrs. Smith\'s calendar.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Reschedule"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉Yes"
                                },
                                actions: [ {
                                    state: "FINISH"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SELECT_MESSENGER: [ {
                        type: "text",
                        text: {
                            en: "On which communication platform would you like to talk to Mrs. Smith? Choose one of the buttons below."
                        },
                        center: 0
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Telegram"
                                },
                                actions: [],
                                kind: "check",
                                checked: !1
                            }, {
                                type: "button",
                                button: {
                                    en: "Viber"
                                },
                                actions: [ {
                                    slot: "messanger",
                                    value: '"Viber"'
                                } ],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "WhatsApp"
                                },
                                actions: [ {
                                    slot: "messanger",
                                    value: '"WhatsApp"'
                                } ],
                                kind: "check",
                                checked: !0
                            }, {
                                type: "button",
                                button: {
                                    en: "Skype"
                                },
                                actions: [ {
                                    slot: "messanger",
                                    value: '"Skype"'
                                } ],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "FB Messenger"
                                },
                                actions: [ {
                                    slot: "messanger",
                                    value: '"Facebook Messenger"'
                                } ],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Confirm"
                                },
                                actions: [ {
                                    state: "ENTER_CONTACT3"
                                }, {
                                    script: '// INITIALIZE LIST\nmessengers = [\n\t{name: "Telegram"},\n\t{name: "Viber"},\n\t{name: "WhatsApp"},\n\t{name: "Skype"},\n\t{name: "FB Messenger"},\n]\n\n// GET CHECKS\nCHECKS = get_check()\ncountChecks = 0\nfor (check in CHECKS) {\n\tif (check == 1) {\n\t\tcountChecks++\n\t}\n}\n\n// CHECK NONE CHOOSEN\nif (countChecks == 0) {\n\tgoto("CHECK_WRONG_CHECKBOX")\n}\n\n// GENERATE CHOOSEN RESULT STRING\nLIST = messengers\ni = 0\nfirstEl = true\nrezStr = ""\nfor (check in CHECKS) { \n  if (check == 1) {\n    if (firstEl) {\n      rezStr = rezStr + "  • " + LIST[i].name\n      firstEl = false\n    } else {\n\t\t\trezStr = rezStr + "<br>  • " + LIST[i].name\n\t\t}\n  }\n  i++\n}\nrezStrCHATBOT_AREA = rezStr\n\n// CONTINUE\ngoto("ENTER_CONTACT3")'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    ENTER_DATE3: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_DATE",
                            value: '"ENTER_TIME3"'
                        }, {
                            slot: "SS_FROM_ENTER_DATE",
                            value: '"ENTER_DATE3"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "On what date would you like to meet Mrs. Smith?\n\nPlease, enter the date (month/day/year):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_DATE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "date",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_DATE"
                            } ]
                        } ],
                        kind: "MMDDYYYY"
                    } ],
                    ENTER_TIME3: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_TIME",
                            value: '"CONFIRM3"'
                        }, {
                            slot: "SS_FROM_ENTER_TIME",
                            value: '"ENTER_TIME3"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "At what time would you like to meet Mrs. Smith?\n\nPlease, enter the time (hours:minutes):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_TIME"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "time",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_TIME"
                            } ]
                        } ],
                        kind: "time"
                    } ],
                    CONFIRM3: [ {
                        type: "text",
                        text: {
                            en: 'Ok, so Mrs. Smith will meet you on $rezStr on <b>$date</b> at <b>$time</b>, and your contact info is <b>$contactinfo</b>? \nIf this is correct click the "<b>👉 Yes</b>" button, and I will add the information to Mrs. Smith\'s calendar.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Reschedule"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉Yes"
                                },
                                actions: [ {
                                    state: "FINISH"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    FINISH: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n\t"Name": \t\t\t\t\tname,\n\t"Meet Type": \t\t\tmeetType,\n\t"Place Type": \t\tplaceType,\n\t"Phone": \t\t\t\t\tphone,\n\t"Date": \t\t\t\t\tdate,\n\t"Time":\t\t\t\t\t\ttime,\n\t"Address":\t\t\t\taddress,\n\t"Messanger":\t\t\tmessanger,\n\t"Contact Info":\t\tcontactinfo\n}'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Well done, your meeting with Mrs. Smith is scheduled. She is looking forward to seeing you."
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you and goodbye."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Start Over"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ENTER_CONTACT3: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Give me your some contact info by messenger(s):\n$rezStr\n\nSo Mrs. Smith can contact you before the meeting."
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_CONTACT"
                        }, {
                            if: "INPUT.length >= 10",
                            actions: [ {
                                slot: "contactinfo",
                                value: "INPUT"
                            }, {
                                state: "ENTER_DATE3"
                            } ]
                        } ],
                        kind: "text"
                    } ],
                    SELECT_PLACE1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Would you like to meet Mrs. Smith at her office, or at some other place?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Office"
                                },
                                actions: [ {
                                    state: "ADDRESS1"
                                }, {
                                    slot: "placeType",
                                    value: '"At her office"'
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Other Place"
                                },
                                actions: [ {
                                    state: "ENTER_ADDRESS2"
                                }, {
                                    slot: "placeType",
                                    value: '"At other place"'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ADDRESS1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Mrs. Smith's office is located at the 2nd floor of our company building at 43 6th Avenue, NYC, NY, USA. Take some time and copy or write down this address."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Got it!"
                                },
                                actions: [ {
                                    state: "ENTER_PHONE1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    ENTER_PHONE1: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_PHONE",
                            value: '"ENTER_DATE1"'
                        }, {
                            slot: "SS_FROM_ENTER_PHONE",
                            value: '"ENTER_PHONE1"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Can you please leave me your phone number, so Mrs. Smith can contact you before the meeting.\n\nPlease use this format: <b>+1234567890</b>"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_PHONE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "phone",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_PHONE"
                            } ]
                        } ],
                        kind: "phone"
                    } ],
                    ENTER_DATE1: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_DATE",
                            value: '"ENTER_TIME1"'
                        }, {
                            slot: "SS_FROM_ENTER_DATE",
                            value: '"ENTER_DATE1"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Can you please write the date when you would like to meet Mrs. Smith.\n\nPlease, enter the date (month/day/year):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_DATE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "date",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_DATE"
                            } ]
                        } ],
                        kind: "MMDDYYYY"
                    } ],
                    ENTER_TIME1: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_AFTER_ENTER_TIME",
                            value: '"CONFIRM1"'
                        }, {
                            slot: "SS_FROM_ENTER_TIME",
                            value: '"ENTER_TIME1"'
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "At what time would you like to meet Mrs. Smith?\n\nPlease, enter the time (hours:minutes):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_TIME"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "time",
                                value: "INPUT"
                            }, {
                                state: "$SS_AFTER_ENTER_TIME"
                            } ]
                        } ],
                        kind: "time"
                    } ],
                    ENTER_ADDRESS2: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Can you please give me the exact address where you would like to meet Mrs. Smith?"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_ADDRESS2"
                        }, {
                            if: "INPUT.length >= 10",
                            actions: [ {
                                slot: "address",
                                value: "INPUT"
                            }, {
                                state: "CHECK_ADDRESS2"
                            } ]
                        } ],
                        kind: "text"
                    } ],
                    CHECK_ADDRESS2: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "So, you would like to meet Mrs. Smith at $address, is that right?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "RE-ENTER"
                                },
                                actions: [ {
                                    state: "ENTER_ADDRESS2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Confirm"
                                },
                                actions: [ {
                                    state: "ENTER_PHONE2"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    WRONG_PHONE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The entered phone number is invalid.\n\nTry entering the number in the international format: <b>+1234567890</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "$SS_FROM_ENTER_PHONE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_DATE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The date could not be recognized.\n\nTry using the following format: 12/31/2022"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "$SS_FROM_ENTER_DATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_TIME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The time could not be recognized.\n\nTry using the following format: 12:50"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "$SS_FROM_ENTER_TIME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_ADDRESS2: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The address has be at least ten characters"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_ADDRESS2"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your name"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "WRONG_NAME"
                        }, {
                            if: "INPUT.length > 1",
                            actions: [ {
                                slot: "name",
                                value: "INPUT"
                            }, {
                                state: "SELECT_MEET"
                            } ]
                        } ]
                    } ],
                    WRONG_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The name has be at least two characters"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_NAME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK_WRONG_CHECKBOX: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please, choose at least one"
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "SELECT_MESSENGER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_CONTACT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The contact has be at least ten characters"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_CONTACT3"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    date: "",
                    phone: "",
                    time: "",
                    address: "",
                    contactinfo: "",
                    SS_FROM_ENTER_PHONE: "",
                    SS_AFTER_ENTER_PHONE: "",
                    SS_AFTER_ENTER_DATE: "",
                    SS_FROM_ENTER_DATE: "",
                    SS_AFTER_ENTER_TIME: "",
                    SS_FROM_ENTER_TIME: "",
                    name: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 36,
                            y: 61
                        },
                        ENTER_TIME2: {
                            c: 6,
                            r: 2,
                            x: 594,
                            y: 957
                        },
                        ENTER_DATE2: {
                            c: 5,
                            r: 2,
                            x: 591,
                            y: 846
                        },
                        ENTER_PHONE2: {
                            c: 4,
                            r: 2,
                            x: 586,
                            y: 731
                        },
                        SELECT_MEET: {
                            c: 1,
                            r: 0,
                            x: 543,
                            y: 53
                        },
                        CONFIRM2: {
                            c: 7,
                            r: 2,
                            x: 601,
                            y: 1085
                        },
                        CONFIRM1: {
                            c: 10,
                            r: 1,
                            x: 282,
                            y: 951
                        },
                        SELECT_MESSENGER: {
                            c: 0,
                            r: 3,
                            x: 970,
                            y: 17
                        },
                        ENTER_DATE3: {
                            c: 3,
                            r: 3,
                            x: 970,
                            y: 293
                        },
                        ENTER_TIME3: {
                            c: 4,
                            r: 3,
                            x: 978,
                            y: 397
                        },
                        CONFIRM3: {
                            c: 5,
                            r: 3,
                            x: 981,
                            y: 521
                        },
                        FINISH: {
                            c: 0,
                            r: 4,
                            x: 443,
                            y: 1281
                        },
                        ENTER_CONTACT3: {
                            c: 2,
                            r: 3,
                            x: 970,
                            y: 177
                        },
                        SELECT_PLACE1: {
                            c: 0,
                            r: 1,
                            x: 546,
                            y: 203
                        },
                        ADDRESS1: {
                            c: 6,
                            r: 1,
                            x: 280,
                            y: 460
                        },
                        ENTER_PHONE1: {
                            c: 7,
                            r: 1,
                            x: 281,
                            y: 591
                        },
                        ENTER_DATE1: {
                            c: 8,
                            r: 1,
                            x: 279,
                            y: 702
                        },
                        ENTER_TIME1: {
                            c: 9,
                            r: 1,
                            x: 277,
                            y: 821
                        },
                        ENTER_ADDRESS2: {
                            c: 3,
                            r: 1,
                            x: 579,
                            y: 420
                        },
                        CHECK_ADDRESS2: {
                            c: 3,
                            r: 2,
                            x: 579,
                            y: 618
                        },
                        WRONG_PHONE: {
                            c: 2,
                            r: 2,
                            x: 37,
                            y: 589
                        },
                        WRONG_DATE: {
                            c: 0,
                            r: 2,
                            x: 46,
                            y: 708
                        },
                        WRONG_TIME: {
                            c: 1,
                            r: 2,
                            x: 50,
                            y: 829
                        },
                        WRONG_ADDRESS2: {
                            c: 4,
                            r: 1,
                            x: 580,
                            y: 526
                        },
                        ENTER_NAME: {
                            c: 1,
                            r: 1,
                            x: 296,
                            y: 62
                        },
                        WRONG_NAME: {
                            c: 2,
                            r: 1,
                            x: 297,
                            y: 158
                        },
                        CHECK_WRONG_CHECKBOX: {
                            c: 1,
                            r: 3,
                            x: 1205,
                            y: 37
                        },
                        WRONG_CONTACT: {
                            c: 5,
                            r: 1,
                            x: 1209,
                            y: 191
                        }
                    },
                    folders: {}
                }
            },
            Booking: {
                id: 0,
                name: "Travel Booking",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Welcome!"
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "I am QuBot, and I will help you book your dream vacation."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Thanks, I Could Use Some Help"
                                },
                                actions: [ {
                                    state: "ASK1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    PHRASE1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "No problem. That's why we are here"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue"
                                },
                                actions: [ {
                                    state: "ENTER_DAYS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ENTER_DAYS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "How many days are you going to stay?"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_DAYS"
                        }, {
                            if: "INPUT > 0",
                            actions: [ {
                                slot: "days",
                                value: "INPUT"
                            }, {
                                goto: "ENTER_DATE"
                            } ]
                        } ],
                        kind: "number",
                        params: {
                            type: "int"
                        }
                    } ],
                    ENTER_COUNT_PERSON: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Are you travelling alone?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Just Me"
                                },
                                actions: [ {
                                    slot: "countPerson",
                                    value: '"Just me"'
                                }, {
                                    state: "PHRASE_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "There are 2 of Us"
                                },
                                actions: [ {
                                    slot: "countPerson",
                                    value: '"There are 2 of us"'
                                }, {
                                    state: "PHRASE_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "It's 3 or More"
                                },
                                actions: [ {
                                    slot: "countPerson",
                                    value: '"It\'s 3 or more"'
                                }, {
                                    state: "PHRASE_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "My Whole Family is with Me"
                                },
                                actions: [ {
                                    slot: "countPerson",
                                    value: '"My whole family is with me"'
                                }, {
                                    state: "PHRASE_1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    ENTER_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your name"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_NAME"
                        }, {
                            if: "INPUT.length > 1",
                            actions: [ {
                                slot: "name",
                                value: "INPUT"
                            }, {
                                state: "ASK_KIDS"
                            } ]
                        } ],
                        kind: "text"
                    } ],
                    ASK1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "May I ask about the purpose of your trip?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Active Tourism"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"Active tourism"'
                                }, {
                                    state: "ENTER_DAYS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "City Break"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"City break"'
                                }, {
                                    state: "ENTER_DAYS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Retreat"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"Retreat"'
                                }, {
                                    state: "ENTER_DAYS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Business"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"Business"'
                                }, {
                                    state: "ENTER_DAYS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Festival"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"Festival"'
                                }, {
                                    state: "ENTER_DAYS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Still Planning"
                                },
                                actions: [ {
                                    slot: "goal",
                                    value: '"Still planning"'
                                }, {
                                    state: "PHRASE1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    ENTER_DATE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "When are you planning to start?\n\nPlease, enter the check-in date (month/day/year):"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_DATE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "date",
                                value: "INPUT"
                            }, {
                                goto: "ENTER_COUNT_PERSON"
                            } ]
                        } ],
                        kind: "MMDDYYYY"
                    } ],
                    ENTER_category_hotel: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Which category of hotel do you prefer?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Budget"
                                },
                                actions: [ {
                                    slot: "categoryHotel",
                                    value: '"Budget"'
                                }, {
                                    state: "ENTER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Standard"
                                },
                                actions: [ {
                                    slot: "categoryHotel",
                                    value: '"Standard"'
                                }, {
                                    state: "ENTER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Premium"
                                },
                                actions: [ {
                                    slot: "categoryHotel",
                                    value: '"Premium"'
                                }, {
                                    state: "ENTER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ENTER_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Could you also share your email address?\n\nPlease, use the <b>name@inbox.com</b> format"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_EMAIL"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "email",
                                value: "INPUT"
                            }, {
                                state: "ENTER_PHONE"
                            } ]
                        } ],
                        kind: "email"
                    } ],
                    ENTER_PHONE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your phone number in the international format: <b>+10978745874</b>"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "WRONG_PHONE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "phone",
                                value: "INPUT"
                            }, {
                                state: "ENTER_requirements"
                            } ]
                        } ],
                        kind: "phone"
                    } ],
                    ENTER_requirements: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you!"
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, indicate any special travel requests you may have"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            slot: "requirements",
                            value: "INPUT"
                        }, {
                            state: "PHRASE2"
                        } ],
                        kind: "text"
                    } ],
                    PHRASE2: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "We are through with the questions."
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Now relax and get ready for your adventure of a lifetime!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Let's Get a Resume!"
                                },
                                actions: [ {
                                    state: "RESUME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    FINISH: [ {
                        type: "text",
                        text: {
                            en: "We will get back to you soon. Bye!"
                        }
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    RESUME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Let's sum up!</b>\n\nYour name: $name\nTravel purpose: $goal\nNumber of days: $days\nStarting date: $date\nNumber of people: $countPerson\nKids among them: $countKids\nYour phone number: $phone\nYour email: $email\nSpecial requirements: $requirements"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Start Over"
                                },
                                actions: [ {
                                    state: "ASK1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Good"
                                },
                                actions: [ {
                                    action: "save",
                                    storage: "qudata",
                                    key: "",
                                    value: '{\n\t"name": name,\n\t"goal": goal,\n\t"days": days,\n\t"date": date,\n\t"countPerson": countPerson,\n\t"countKids": countKids,\n\t"phone": phone,\n\t"email": email,\n\t"requirements": requirements\n}'
                                }, {
                                    state: "FINISH"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_DATE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The date could not be recognized. Try using the following format: 12/31/2022"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_DATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_DAYS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please enter an integer"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_DAYS"
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    WRONG_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The entered e-mail seems invalid. \n\nPlease, try using the <b>name@inbox.com</b> format"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_EMAIL"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_PHONE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️The entered phone number is invalid. \n\nTry entering the number in the international format: <b>+10978745874</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_PHONE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_COUNT_KIDS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please enter an integer"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ASK_KIDS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The name has be at least two characters"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_NAME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHRASE_1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Sorry. I should have asked before"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_NAME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASK_KIDS: [ {
                        type: "actions",
                        actions: [ {
                            if: 'countPerson == "Just me"',
                            actions: [ {
                                slot: "countKids",
                                value: "0"
                            }, {
                                goto: "ENTER_category_hotel"
                            } ]
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Are you taking kids with you?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes"
                                },
                                actions: [ {
                                    state: "ENTER_COUNT_KIDS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "No, Only Adults"
                                },
                                actions: [ {
                                    slot: "countKids",
                                    value: '"No, only adults"'
                                }, {
                                    state: "ENTER_category_hotel"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    ENTER_COUNT_KIDS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "How many kids are traveling with you?"
                        }
                    }, {
                        type: "input",
                        kind: "number",
                        actions: [ {
                            state: "WRONG_COUNT_KIDS"
                        }, {
                            if: "INPUT > -1",
                            actions: [ {
                                slot: "countKids",
                                value: "INPUT"
                            }, {
                                goto: "ENTER_category_hotel"
                            } ]
                        } ],
                        params: {
                            type: "int"
                        }
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    date: "",
                    name: "",
                    email: "",
                    phone: "",
                    days: "",
                    countKids: "",
                    requirements: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 51,
                            y: 50
                        },
                        PHRASE1: {
                            c: 2,
                            r: 0,
                            x: 312,
                            y: 363
                        },
                        ENTER_DAYS: {
                            c: 3,
                            r: 0,
                            x: 886,
                            y: 16
                        },
                        ENTER_COUNT_PERSON: {
                            c: 7,
                            r: 0,
                            x: 887,
                            y: 237
                        },
                        ENTER_NAME: {
                            c: 1,
                            r: 1,
                            x: 892,
                            y: 411
                        },
                        ASK1: {
                            c: 1,
                            r: 0,
                            x: 308,
                            y: 194
                        },
                        ENTER_DATE: {
                            c: 5,
                            r: 0,
                            x: 887,
                            y: 125
                        },
                        ENTER_category_hotel: {
                            c: 6,
                            r: 1,
                            x: 614,
                            y: 450
                        },
                        ENTER_EMAIL: {
                            c: 0,
                            r: 2,
                            x: 387,
                            y: 595
                        },
                        ENTER_PHONE: {
                            c: 3,
                            r: 2,
                            x: 389,
                            y: 709
                        },
                        ENTER_requirements: {
                            c: 4,
                            r: 2,
                            x: 396,
                            y: 817
                        },
                        PHRASE2: {
                            c: 5,
                            r: 2,
                            x: 402,
                            y: 959
                        },
                        FINISH: {
                            c: 7,
                            r: 2,
                            x: 798,
                            y: 1124
                        },
                        RESUME: {
                            c: 6,
                            r: 2,
                            x: 796,
                            y: 902
                        },
                        WRONG_DATE: {
                            c: 6,
                            r: 0,
                            x: 1122,
                            y: 133
                        },
                        WRONG_DAYS: {
                            c: 4,
                            r: 0,
                            x: 1126,
                            y: 26
                        },
                        WRONG_EMAIL: {
                            c: 1,
                            r: 2,
                            x: 618,
                            y: 602
                        },
                        WRONG_PHONE: {
                            c: 2,
                            r: 2,
                            x: 620,
                            y: 708
                        },
                        WRONG_COUNT_KIDS: {
                            c: 5,
                            r: 1,
                            x: 1358,
                            y: 538
                        },
                        WRONG_NAME: {
                            c: 4,
                            r: 1,
                            x: 1133,
                            y: 407
                        },
                        PHRASE_1: {
                            c: 0,
                            r: 1,
                            x: 1122,
                            y: 266
                        },
                        ASK_KIDS: {
                            c: 2,
                            r: 1,
                            x: 893,
                            y: 528
                        },
                        ENTER_COUNT_KIDS: {
                            c: 3,
                            r: 1,
                            x: 1128,
                            y: 539
                        }
                    },
                    folders: {}
                }
            },
            "About Us": {
                id: 0,
                name: "About Us",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/93e85578c01bc6980a95944980c98e01.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "This is the home page. Greet your customers and write here briefly about your company.",
                            ru: "Это главная страница. Поприветствуйте ваших клиентов и напишите здесь коротко о своей компании."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🔑 Our services",
                                    ru: "🔑 Наши услуги"
                                },
                                actions: [ {
                                    state: "SERVICES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " 💼 Our products",
                                    ru: "💼 Наши продукты"
                                },
                                actions: [ {
                                    state: "PRODUCTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚩 Our advantages",
                                    ru: "🚩 Наши преимущества"
                                },
                                actions: [ {
                                    state: "ADVANTAGES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⭐ About Us",
                                    ru: "⭐ О нас"
                                },
                                actions: [ {
                                    state: "ABOUT_US"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Change language",
                                    ru: "🌐 Сменить язык"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            script: 'marks = ["", ""]\nif (LANGUAGE == \'en\') { \n  marks = ["✔", ""]\n}\nif (LANGUAGE == \'ru\') { \n  marks = ["", "✔"]\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Select the language of communication:",
                            ru: "Выберите язык общения:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "{marks[0]} English",
                                    ru: "{marks[0]} English"
                                },
                                actions: [ {
                                    state: "SELECT_ENG"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "{marks[1]} Russian",
                                    ru: "{marks[1]} Русский"
                                },
                                actions: [ {
                                    state: "SELECT_RU"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SERVICES: [ {
                        type: "text",
                        text: {
                            en: "Briefly describe what you are willing to do for your visitor by directing them to specific landing pages.",
                            ru: "Кратко расскажите о том, что вы готовы сделать для посетителя, направив его на конкретные целевые страницы."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " Service 1",
                                    ru: "Услуга 1"
                                },
                                actions: [ {
                                    state: "SERVICES_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " Service 2",
                                    ru: "Услуга 2"
                                },
                                actions: [ {
                                    state: "SERVICES_2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " Service 3",
                                    ru: "Услуга 3"
                                },
                                actions: [ {
                                    state: "SERVICES_3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " ✉ Leave a request",
                                    ru: "✉ Оставить заявку"
                                },
                                actions: [ {
                                    state: "CHECK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ABOUT_US: [ {
                        type: "text",
                        text: {
                            en: "Tell us about what you are doing and for whom. Talk about visitor problems that you solve with your products and services.",
                            ru: "Расскажите о том, что вы делаете и для кого. Говорите о проблемах посетителей, которые вы решаете с помощью товаров и услуг. "
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: " ✉ Leave a request",
                                    ru: "✉ Оставить заявку"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📍 Contacts",
                                    ru: "📍 Контакты"
                                },
                                actions: [ {
                                    state: "CONTACTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CONTACT_MAP: [ {
                        type: "map",
                        url: '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d174295.14385241855!2d7.254786928750355!3d46.95458452641973!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x478e39c0d43a1b77%3A0xcb555ffe0457659a!2z0JHQtdGA0L0sINCo0LLQtdC50YbQsNGA0LjRjw!5e0!3m2!1sru!2sua!4v1641461629417!5m2!1sru!2sua" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy"></iframe>',
                        height: "300"
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 View route",
                                    ru: "👉 Посмотреть маршрут"
                                },
                                actions: [],
                                kind: "url",
                                url: "https://google.com/maps/dir/?api=1&destination=48.45614445037599,35.03230596938486"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "CONTACTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CONTACTS: [ {
                        type: "text",
                        text: {
                            en: "📍 <b>Our address</b>:\nEnter your address here\n\n🌐 <b>Official site</b>: <a href='https://site.com/' target='_blank'> site.com </a>\n📞 <b>Our phone</b>: Enter your phone\n📬 <b>Our mail</b>: <a href='mailto:info@company.com'> info@company.com </a>\n\n• <b> YouTube channel </b>: <a href='https://www.youtube.com/channel/UCLXENpdTmOFPwZjcu7WLApA' target='_blank'> Channel company</a>\n• <b> Telegram </b>: <a href='https://t.me/company' target='_blank'> @company </a>\n• <b> WhatsApp </b>: <a href='https://api.whatsapp.com/send/?phone' target='_blank'> Go to chat </a>",
                            ru: "📍 <b>Наш адрес</b>:\nУкажите ваш адрес здесь\n\n🌐 <b>Официальный сайт</b>: <a href='https://site.com/' target='_blank'>site.com</a>\n📞 <b>Наш телефон</b>: Укажите ваш телефон\n📬 <b>Наша почта</b>: <a href='mailto:info@company.com'>info@company.com</a>\n\n• <b>YouTube канал</b>: <a href='https://www.youtube.com/channel/' target='_blank'>Channel company</a>\n• <b>Telegram</b>: <a href='https://t.me/company target='_blank'>@company</a>\n• <b>WhatsApp</b>: <a href='https://api.whatsapp.com/send/?phone' target='_blank'>Go to chat</a>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Show us on the map",
                                    ru: "👉 Показать нас на карте"
                                },
                                actions: [ {
                                    state: "CONTACT_MAP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SERVICES_1: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/fc3624a21bb72f3125b5a879be177830.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe here the services you provide, the benefits, and the value proposition for your customers.",
                            ru: "Опишите здесь услугу, которую вы предоставляете, преимущества и выгоды для ваших клиентов."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SERVICES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SERVICES_2: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/f396945395b7329835cb4fadcbef713d.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe here the services you provide, the benefits, and the value proposition for your customers.",
                            ru: "Опишите здесь услугу, которую вы предоставляете, преимущества и выгоды для ваших клиентов."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SERVICES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SERVICES_3: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/f408944c651717d9a57c9d2f66888227.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe here the services you provide, the benefits, and the value proposition for your customers.",
                            ru: "Опишите здесь услугу, которую вы предоставляете, преимущества и выгоды для ваших клиентов."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SERVICES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRODUCTS: [ {
                        type: "text",
                        text: {
                            en: "Describe your company's products here.",
                            ru: "Опишите здесь продукты вашей компании."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Product 1",
                                    ru: "Продукт 1"
                                },
                                actions: [ {
                                    state: "PRODUCTS_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Product 2",
                                    ru: "Продукт 2"
                                },
                                actions: [ {
                                    state: "PRODUCTS_2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Product 3",
                                    ru: "Продукт 3"
                                },
                                actions: [ {
                                    state: "PRODUCTS_3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✉ Leave a request",
                                    ru: "✉ Оставить заявку"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRODUCTS_1: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/168d39a1a3806ce49488627a7fff99d3.webp"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe in detail the capabilities of your company's product here, shaping the client's understanding of what kind of product he needs.",
                            ru: "Подробно опишите здесь возможности продукта вашей компании, формируя у клиента понимание того, какой именно продукт ему нужен."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "PRODUCTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRODUCTS_2: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/3a9b86648e6bdefab980b08ebf779cd4.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe in detail the capabilities of your company's product here, shaping the client's understanding of what kind of product he needs.",
                            ru: "Подробно опишите здесь возможности продукта вашей компании, формируя у клиента понимание того, какой именно продукт ему нужен."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "PRODUCTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRODUCTS_3: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://services.qudata.com/bot/fs/03d5417ce8319c609b02ee291d45afc1/assets/8f06c97ffa5784300bab698ec245e3d8.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Describe in detail the capabilities of your company's product here, shaping the client's understanding of what kind of product he needs.",
                            ru: "Подробно опишите здесь возможности продукта вашей компании, формируя у клиента понимание того, какой именно продукт ему нужен."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Return",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "PRODUCTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGES: [ {
                        type: "text",
                        text: {
                            en: "Describe the specific benefits of your company. The “About Us in Numbers” trick works well. Collect all possible numbers and present them to your potential clients profitably.\n\nFor example: work experience, exact specification of the assortment, duration of the warranty, number of customers, speed of coffee preparation.",
                            ru: "Опишите конкретные преимущества вашей компании. Хорошо работает прием «О нас в цифрах». Соберите все возможные цифры и выгодно презентуйте их вашим потенциальным клиентам.\n\nНапример: опыт работы, точное указание ассортимента, длительность гарантии, количество заказчиков, скорость приготовления кофе."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✉ Leave a request",
                                    ru: "✉ Оставить заявку"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "Very strange name {CUSTOMER_NAME}. Could you introduce yourself differently? The name must contain at least two characters.",
                            ru: "Очень странное имя {CUSTOMER_NAME}. Не могли бы Вы представиться иначе? Имя должно содержать минимум два символа."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_GREET"
                        }, {
                            slot: "CUSTOMER_NAME",
                            value: "INPUT"
                        }, {
                            if: "INPUT.length < 2",
                            actions: [ {
                                state: "CUSTOMER_WRONG_NAME"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "We are glad to meet {CUSTOMER_NAME}!\nPlease indicate your preferred communication channel.",
                            ru: "Рады знакомству {CUSTOMER_NAME}!\nУкажите, пожалуйста, предпочитаемый канал связи с Вами."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WELLCOME: [ {
                        type: "text",
                        text: {
                            en: "In order to successfully process your application, we need your contact information.\nPlease enter your name:",
                            ru: "Для успешной обработки заявки нам нужны Ваши контактные данные.\nВведите, пожалуйста, свое имя:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_GREET"
                        }, {
                            slot: "CUSTOMER_NAME",
                            value: "INPUT"
                        }, {
                            if: "CUSTOMER_PHONE or CUSTOMER_EMAIL",
                            actions: [ {
                                state: "BEFORE_CHECK"
                            } ]
                        }, {
                            if: "INPUT.length < 2",
                            actions: [ {
                                state: "CUSTOMER_WRONG_NAME"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Please enter your email so that our staff can contact you. For example, email@site.com",
                            ru: "Введите, пожалуйста, свою электронную почту, чтобы наши сотрудники могли с Вами связаться. Например, email@site.com"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            slot: "CUSTOMER_EMAIL",
                            value: "INPUT"
                        }, {
                            state: "BEFORE_CHECK"
                        }, {
                            if: "not CUSTOMER_PHONE",
                            actions: [ {
                                state: "CUSTOMER_PHONE_MAYBE"
                            } ]
                        }, {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                state: "CUSTOMER_EMAIL_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We will not be able to write to you at this address. Will you try again?",
                            ru: "Мы не сможем написать Вам по такому адресу. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_PHONE",
                                    actions: [ {
                                        state: "CUSTOMER_PHONE_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, please enter your phone number, for example, +1 234 567 8900 (without spaces)",
                            ru: "{CUSTOMER_NAME}, введите пожалуйста Ваш телефон, например, +1 234 567 8900 (без пробелов)"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            slot: "CUSTOMER_PHONE",
                            value: "INPUT"
                        }, {
                            slot: "CUSTOMER_PHONE",
                            value: "$INPUT",
                            state: "BEFORE_CHECK"
                        }, {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                state: "CUSTOMER_EMAIL_MAYBE"
                            } ]
                        }, {
                            if: "not CUSTOMER_PHONE",
                            actions: [ {
                                state: "CUSTOMER_PHONE_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Will you try again?",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, maybe you will leave your phone?",
                            ru: "{CUSTOMER_NAME}, может быть Вы оставите Ваш телефон? "
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, would you like to leave your email to contact you?",
                            ru: "{CUSTOMER_NAME}, хотите оставить Вашу электронную почту для связи с Вами?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_PHONE",
                                    actions: [ {
                                        state: "CUSTOMER_PHONE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_MESSAGE: [ {
                        type: "text",
                        text: {
                            en: "Leave here your application, wishes or comments.",
                            ru: "Оставьте здесь свою заявку, пожелания или замечания."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_END"
                        }, {
                            slot: "CUSTOMER_MESSAGE",
                            value: "INPUT"
                        } ]
                    } ],
                    CUSTOMER_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "customer",
                            value: '{\n"kind":    "customer",\n"name":    CUSTOMER_NAME,\n"phone":   CUSTOMER_PHONE,\n"mail":    CUSTOMER_EMAIL,\n"message": CUSTOMER_MESSAGE\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you very much {CUSTOMER_NAME} 😊, we will contact you shortly.",
                            ru: "Спасибо большое {CUSTOMER_NAME} 😊, мы свяжемся с Вами в ближайшее время."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "END"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_MESSAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change name",
                                    ru: "🤖 Изменить имя"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change mail",
                                    ru: "💻Изменить почту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change phone",
                                    ru: "📞 Изменить телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            if: "CUSTOMER_PHONE and CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "PHONE_AND_EMAIL"
                            } ]
                        }, {
                            if: "CUSTOMER_PHONE",
                            actions: [ {
                                goto: "ONLY_PHONE"
                            } ]
                        }, {
                            if: "CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "ONLY_EMAIL"
                            } ]
                        }, {
                            if: "not CUSTOMER_PHONE and  not CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "NOTHING"
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> {CUSTOMER_NAME} </b> and you prefer to contact by mail <b> {CUSTOMER_EMAIL} </b> and phone <b> {CUSTOMER_PHONE} </b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по почте <b>{CUSTOMER_EMAIL}</b> и телефону <b>{CUSTOMER_PHONE}</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> {CUSTOMER_NAME} </b> and you prefer to contact phone <b> {CUSTOMER_PHONE} </b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по телефону <b>{CUSTOMER_PHONE}</b>. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> {CUSTOMER_NAME} </b> and you prefer to contact by by mail <b> {CUSTOMER_EMAIL} </b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по почте <b>{CUSTOMER_EMAIL}</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, you have left no phone or mail.",
                            ru: "{CUSTOMER_NAME}, Вы не оставили, ни телефона, ни почты."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    END: [ {
                        type: "text",
                        text: {
                            en: "Your application is accepted.",
                            ru: "Ваша заявка принята."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_ENG: [ {
                        type: "text",
                        text: {
                            en: "Do you want to choose English?",
                            ru: "Do you want to choose English?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Yes"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"en"'
                                }, {
                                    state: "MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ No"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_RU: [ {
                        type: "text",
                        text: {
                            en: "Do you want to choose Russian?",
                            ru: "Хотите выбрать русский?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"ru"'
                                }, {
                                    state: "MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK: [ {
                        type: "actions",
                        actions: [ {
                            if: "CUSTOMER_NAME",
                            actions: [ {
                                goto: "BEFORE_CHECK"
                            } ]
                        }, {
                            goto: "CUSTOMER_WELLCOME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    CUSTOMER_EMAIL: "",
                    CUSTOMER_NAME: "",
                    CUSTOMER_PHONE: "",
                    CUSTOMER_MESSAGE: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 27,
                            y: 47
                        },
                        CHANGE_LANGUAGE: {
                            c: 2,
                            r: 0,
                            x: 307,
                            y: 295
                        },
                        SERVICES: {
                            c: 0,
                            r: 6,
                            x: 313,
                            y: 49
                        },
                        ABOUT_US: {
                            c: 0,
                            r: 8,
                            x: 307,
                            y: 1645.1560238365514
                        },
                        CONTACT_MAP: {
                            c: 2,
                            r: 8,
                            x: 803,
                            y: 1643.1560238365514
                        },
                        CONTACTS: {
                            c: 1,
                            r: 8,
                            x: 556,
                            y: 1646.1560238365514
                        },
                        SERVICES_1: {
                            c: 1,
                            r: 6,
                            x: 573,
                            y: 4
                        },
                        SERVICES_2: {
                            c: 2,
                            r: 6,
                            x: 795,
                            y: 6
                        },
                        SERVICES_3: {
                            c: 3,
                            r: 6,
                            x: 1025,
                            y: 1
                        },
                        PRODUCTS: {
                            c: 0,
                            r: 7,
                            x: 311,
                            y: 467
                        },
                        PRODUCTS_1: {
                            c: 1,
                            r: 7,
                            x: 581,
                            y: 427
                        },
                        PRODUCTS_2: {
                            c: 2,
                            r: 7,
                            x: 813,
                            y: 429
                        },
                        PRODUCTS_3: {
                            c: 3,
                            r: 7,
                            x: 1041,
                            y: 430
                        },
                        ADVANTAGES: {
                            c: 0,
                            r: 9,
                            x: 21,
                            y: 296
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 4,
                            r: 1,
                            x: 363,
                            y: 870.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_GREET: {
                            c: 3,
                            r: 1,
                            x: 312,
                            y: 747.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_WELLCOME: {
                            c: 2,
                            r: 1,
                            x: 50,
                            y: 903.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL: {
                            c: 1,
                            r: 3,
                            x: 564,
                            y: 1062.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 3,
                            r: 3,
                            x: 563,
                            y: 1202.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE: {
                            c: 1,
                            r: 2,
                            x: 33,
                            y: 1058.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 3,
                            r: 2,
                            x: 44,
                            y: 1198.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 2,
                            r: 3,
                            x: 312,
                            y: 1198.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 2,
                            r: 2,
                            x: 301,
                            y: 1065.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_MESSAGE: {
                            c: 2,
                            r: 5,
                            x: 754,
                            y: 1496.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_END: {
                            c: 3,
                            r: 5,
                            x: 814,
                            y: 747.3482344445192,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_CHECK: {
                            c: 1,
                            r: 5,
                            x: 881,
                            y: 1135.3482344445192,
                            folder: "CUSTOMER"
                        },
                        BEFORE_CHECK: {
                            c: 1,
                            r: 4,
                            x: 56,
                            y: 1354.3482344445192,
                            folder: "CUSTOMER"
                        },
                        PHONE_AND_EMAIL: {
                            c: 5,
                            r: 4,
                            x: 307,
                            y: 1339.3482344445192,
                            folder: "CUSTOMER"
                        },
                        ONLY_PHONE: {
                            c: 4,
                            r: 4,
                            x: 534,
                            y: 1345.3482344445192,
                            folder: "CUSTOMER"
                        },
                        ONLY_EMAIL: {
                            c: 3,
                            r: 4,
                            x: 787,
                            y: 1347.3482344445192,
                            folder: "CUSTOMER"
                        },
                        NOTHING: {
                            c: 2,
                            r: 4,
                            x: 538,
                            y: 1437.3482344445192,
                            folder: "CUSTOMER"
                        },
                        END: {
                            c: 4,
                            r: 5,
                            x: 841,
                            y: 852.3482344445192,
                            folder: "CUSTOMER"
                        },
                        SELECT_ENG: {
                            c: 3,
                            r: 0,
                            x: 527,
                            y: 265
                        },
                        SELECT_RU: {
                            c: 4,
                            r: 0,
                            x: 528,
                            y: 342
                        },
                        CHECK: {
                            c: 1,
                            r: 1,
                            x: 58,
                            y: 731.3482344445192,
                            folder: "CUSTOMER"
                        }
                    },
                    folders: {
                        CUSTOMER: {
                            c: 1,
                            r: 0,
                            x: 23,
                            y: 701,
                            openGrid: !0
                        }
                    }
                }
            },
            BlackJack: {
                id: 0,
                name: "BlackJack: The Game",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    TABLE: [ {
                        type: "message",
                        kind: "disappear",
                        typing: "0"
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "If the points are more than 21, the player loses."
                        }, {
                            script: 'if(PLAYER_SCORE > 21)\n{\n  goto("LOSE")\n}'
                        }, {
                            note: "If the points are equal to 21, check if the player wins."
                        }, {
                            script: 'if(PLAYER_SCORE == 21)\n{\n  goto("CHECK_WIN")\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your score: {PLAYER_SCORE}",
                            ru: "Ваши очки: $PLAYER_SCORE",
                            uk: "Ваш результат: {PLAYER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the player's cards"
                        }, {
                            script: "for(card in PLAYER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👌 Hit",
                                    ru: "👌 Ещё",
                                    uk: "👌 Ще"
                                },
                                actions: [ {
                                    state: "TABLE"
                                }, {
                                    note: "Add a card to the player's hand and increase his points"
                                }, {
                                    script: "local CD = randint(0, COUNT - 1)\nlocal PR = randint(0, 3)\n\nPLAYER_HAND.push( \n  PREFIX[PR] + CARDS[CD].img)\nPLAYER_SCORE += CARDS[CD].pt\n\n// We check if there is an Ace among \n// the cards, if there are more than \n// 21 points. If so, we subtract 10 \n// points.\nif(PLAYER_SCORE > 21 and CARDS[CD].pt == 11)\n{\n  PLAYER_SCORE -= 10\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "✋ Stand",
                                    ru: "✋ Хватит",
                                    uk: "✋ Досить"
                                },
                                actions: [ {
                                    state: "ADD_DEALER_CARDS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    MAIN: [ {
                        type: "actions",
                        actions: [ {
                            script: "// Player's starting credits\nMONEY = 800"
                        }, {
                            script: "// Link to the server with images\nURL = 'https://qudata.com/qubot/im/ts/bj/'"
                        }, {
                            script: "// Prefix for cards\nPREFIX = ['c', 'd', 'h', 's']"
                        }, {
                            note: "Array with card data\n- img - the name of the image on the server\n- pt  - card points"
                        }, {
                            script: "CARDS = [\n { 'img': '2.png', 'pt': 2 },\n { 'img': '3.png', 'pt': 3 },\n { 'img': '4.png', 'pt': 4 },\n { 'img': '5.png', 'pt': 5 },\n { 'img': '6.png', 'pt': 6 },\n { 'img': '7.png', 'pt': 7 },\n { 'img': '8.png', 'pt': 8 },\n { 'img': '9.png', 'pt': 9 },\n { 'img': '10.png', 'pt': 10 },\n { 'img': 'J.png', 'pt': 10 },\n { 'img': 'Q.png', 'pt': 10 },\n { 'img': 'K.png', 'pt': 10 },\n { 'img': 'A.png', 'pt': 11 }\n]"
                        }, {
                            script: "// Obtain the number of cards\nCOUNT = CARDS.length"
                        } ]
                    }, {
                        type: "image",
                        url: "https://qudata.com/qubot/im/ts/bj/blackjack.png",
                        width: "100"
                    }, {
                        type: "text",
                        text: {
                            en: "In <b>Blackjack</b>, or 21, you have to decide whether to <b>'hit'</b> (take another card) or <b>'stand'</b> (keep the hand you are dealt).",
                            ru: 'В игре <b>"Блэкджек"</b>, или 21, вы можете выбирать между <b>"ещё"</b> (взять карту) или <b>"хватит"</b> (оставить руку)',
                            uk: 'У грі <b>"Блекджек"</b>, або 21, ви можете вибирати між <b>"ще"</b> (взяти карту) або <b>"досить"</b> (залишити руку)'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Run",
                                    ru: "🚀 Начать",
                                    uk: "🚀 Почати"
                                },
                                actions: [ {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    SELECT_BET: [ {
                        type: "actions",
                        actions: [ {
                            script: "// Resetting the dealer's and player's points\nDEALER_SCORE = 0\nPLAYER_SCORE = 0"
                        }, {
                            script: "// // Resetting the dealer's and player's hand\nDEALER_HAND = []\nPLAYER_HAND = []"
                        }, {
                            note: "We set a starting hand of two cards for the dealer and the player, after clearing the previous cards (if any)."
                        }, {
                            script: "local INDEX = 2\nwhile(INDEX > 0)\n{\n  // Give the card to the dealer\n  local CD = randint(0, COUNT - 1)\n  local PR = randint(0, 3)\n  DEALER_HAND.push(\n    PREFIX[PR] + CARDS[CD].img) \n\tDEALER_SCORE += CARDS[CD].pt\n\n  // Deal a card to a player\n  CD = randint(0, COUNT - 1)\n  PR = randint(0, 3)\n  PLAYER_HAND.push(\n    PREFIX[PR] + CARDS[CD].img)\n  PLAYER_SCORE += CARDS[CD].pt\n\n  // уменьшаем количество карт для раздачи\n  INDEX--\n}"
                        }, {
                            note: "If the dealer has points > 21, then subtract 10"
                        }, {
                            script: "if(DEALER_SCORE > 21)\n{\n  DEALER_SCORE -= 10\n}"
                        }, {
                            note: "If the player has points > 21, then subtract 10"
                        }, {
                            script: "if(PLAYER_SCORE > 21)\n{\n  PLAYER_SCORE -= 10\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "You have <b>$ {MONEY}</b>. Place your bet 💰:",
                            ru: "У Вас есть <b>\\$ {MONEY}</b>. Сделайте ставку 💰:",
                            uk: "Ви маєте <b>\\$ {MONEY}</b>. Зробіть ставку 💰:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "$ 10"
                                },
                                actions: [ {
                                    script: "// Store the bet\nBET = 10"
                                }, {
                                    state: "DEALER_TABLE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "$ 100"
                                },
                                actions: [ {
                                    script: "// Store the bet\nBET = 100"
                                }, {
                                    state: "DEALER_TABLE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "$ 1000"
                                },
                                actions: [ {
                                    script: "// Store the bet\nBET = 1000"
                                }, {
                                    state: "DEALER_TABLE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "All-in",
                                    ru: "Ставлю всё",
                                    uk: "Ставлю все"
                                },
                                actions: [ {
                                    script: "// Store the bet\nBET = MONEY"
                                }, {
                                    state: "DEALER_TABLE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [ {
                            if: "INPUT > 0",
                            actions: [ {
                                script: "// Store the bet\nBET = INPUT"
                            }, {
                                state: "DEALER_TABLE"
                            } ]
                        } ],
                        kind: "number",
                        params: {
                            type: "int"
                        }
                    } ],
                    LOSE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "1"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Dealer's score: {DEALER_SCORE}\n",
                            ru: "Очки дилера: {DEALER_SCORE}",
                            uk: "Результат дилера: {DEALER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the dealer's cards"
                        }, {
                            script: "images()\n\nfor(card in DEALER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your score: {PLAYER_SCORE}",
                            ru: "Ваши очки: {PLAYER_SCORE}",
                            uk: "Ваш результат: {PLAYER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the player's cards"
                        }, {
                            script: "images()\n\nfor(card in PLAYER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Deduct the bet amount from the player's credits"
                        }, {
                            script: "MONEY -= BET"
                        }, {
                            note: "If the player goes bankrupt, the game is over"
                        }, {
                            script: 'if (MONEY < 1)\n{\n  goto("NO_MONEY")\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "😢 You lose!",
                            ru: "😢 Вы проиграли!",
                            uk: "😢 Ви програли!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙈 Play again",
                                    ru: "🙈 Играть снова",
                                    uk: "🙈 Грати ще раз"
                                },
                                actions: [ {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    WIN: [ {
                        type: "actions",
                        actions: [ {
                            clear: "1"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Dealer's score: {DEALER_SCORE}",
                            ru: "Очки дилера: $DEALER_SCORE",
                            uk: "Результат дилера: {DEALER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the dealer's cards"
                        }, {
                            script: "images()\n\nfor(card in DEALER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your score: {PLAYER_SCORE}",
                            ru: "Ваши очки: $PLAYER_SCORE",
                            uk: "Ваш результат: {PLAYER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the player's cards"
                        }, {
                            script: "images()\n\nfor(card in PLAYER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🤩 You win!",
                            ru: "🤩 Вы победили!",
                            uk: "🤩 Ви виграли!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙈 Play again",
                                    ru: "🙈 Играть снова",
                                    uk: "🙈 Грати ще раз"
                                },
                                actions: [ {
                                    note: "Increase the player's credits by the amount of the bet and continue playing"
                                }, {
                                    script: "MONEY += BET"
                                }, {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    PASS: [ {
                        type: "actions",
                        actions: [ {
                            clear: "1"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Dealer score: {DEALER_SCORE}",
                            ru: "Очки дилера: {DEALER_SCORE}",
                            uk: "Результат дилера: {DEALER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the dealer's cards"
                        }, {
                            script: "images()\n\nfor(card in DEALER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your score: {PLAYER_SCORE}",
                            ru: "Ваши очки: {PLAYER_SCORE}",
                            uk: "Ваш результат: {PLAYER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the player's cards"
                        }, {
                            script: "images()\n\nfor(card in PLAYER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🙂 We have a draw!",
                            ru: "🙂 Ничья!",
                            uk: "🙂 Ніча!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙈 Play again",
                                    ru: "🙈 Играть снова",
                                    uk: "🙈 Грати ще раз"
                                },
                                actions: [ {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    CHECK_WIN: [ {
                        type: "actions",
                        actions: [ {
                            note: "If the player has more points than the dealer or the dealer scored more than 21, then the player wins."
                        }, {
                            script: 'if (PLAYER_SCORE > DEALER_SCORE or DEALER_SCORE > 21)\n{\n  goto("WIN")\n}'
                        }, {
                            note: "If the player's points are less than the dealer's, the player loses."
                        }, {
                            script: 'if (PLAYER_SCORE < DEALER_SCORE)\n{\n  goto("LOSE")\n}'
                        }, {
                            note: "If the points are equal, then it's a draw."
                        }, {
                            goto: "PASS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_DEALER_CARDS: [ {
                        type: "actions",
                        actions: [ {
                            note: "If the dealer's point score exceeds 15 or player's score, then we check the game results."
                        }, {
                            script: 'if(DEALER_SCORE > 15 or DEALER_SCORE > PLAYER_SCORE)\n{\n  goto("CHECK_WIN")\n}'
                        }, {
                            note: "Add a card to the dealer's hand and increase the point score."
                        }, {
                            script: "local CD = randint(0, COUNT - 1)\nlocal PR = randint(0, 3)\n\nDEALER_HAND.push(\n  PREFIX[PR] + CARDS[CD].img)\nDEALER_SCORE += CARDS[CD].pt\n\n// We check if there is an Ace \n// among the cards, if the point \n// score exceeds 21. If so, we \n// subtract 10 points.\nif(DEALER_SCORE > 21 and CARDS[CD].pt == 11)\n{\n  DEALER_SCORE -= 10\n}"
                        }, {
                            note: "Run the current step again"
                        }, {
                            goto: "ADD_DEALER_CARDS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DEALER_TABLE: [ {
                        type: "actions",
                        actions: [ {
                            note: "If money is not enough, notify the player about it."
                        }, {
                            script: 'if(MONEY < BET)\n{\n  goto("NO_MONEY_FOR_BET")\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Dealer's score: {DEALER_SCORE}",
                            ru: "Очки дилера: {DEALER_SCORE}",
                            uk: "Результат дилера: {DEALER_SCORE}"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            note: "Display the dealer's cards"
                        }, {
                            script: "for(card in DEALER_HAND)\n{\n  image(URL + card, 20)\n}"
                        } ]
                    }, {
                        type: "timer",
                        time: "100",
                        actions: [ {
                            state: "TABLE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NO_MONEY_FOR_BET: [ {
                        type: "text",
                        text: {
                            en: "You don't  have $ {BET}",
                            ru: "У Вас нет \\$ {BET}",
                            uk: "У вас немає \\$ {BET}"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙈 Play again",
                                    ru: "🙈 Играть снова",
                                    uk: "🙈 Грати ще раз"
                                },
                                actions: [ {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    NO_MONEY: [ {
                        type: "text",
                        text: {
                            en: "You lose and you have no money 😢",
                            ru: "Вы проиграли все деньги 😢",
                            uk: "Ви програли усі гроші 😢"
                        }
                    }, {
                        type: "timer",
                        time: "1000",
                        actions: [ {
                            state: "CUSTOMER_START"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "Very strange name {INPUT}. Could you introduce yourself differently:",
                            ru: "Очень странное имя {INPUT}. Не могли бы Вы представиться по другому:",
                            uk: "Дуже дивне ім'я {INPUT}. Не могли б Ви представитися інакше:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length > 1)\n{\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Our mail: info@qudata.com, and yours, {CUSTOMER_NAME}?",
                            ru: "Наша почта: info@qudata.com, а Ваша, {CUSTOMER_NAME}?",
                            uk: "Наша пошта: info@qudata.com, а Ваша {CUSTOMER_NAME}?"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_EMAIL = INPUT\n  step("BEFORE_CHECK")\n  if (not CUSTOMER_PHONE)\n  {\n    step("CUSTOMER_PHONE_MAYBE")\n  }\n} else {\n  step("CUSTOMER_EMAIL_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We will not be able to write to you at this address. Will you try again?",
                            ru: "Мы не сможем написать Вам по такому адресу. Попробуете ещё раз?",
                            uk: "Ми не зможемо написати Вам на таку адресу. Спробуєте ще раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да",
                                    uk: "✔ Так"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет",
                                    uk: "❌ Ні"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if(not CUSTOMER_PHONE)\n{\n step("CUSTOMER_PHONE_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, please enter your phone number:",
                            ru: "{CUSTOMER_NAME}, введите пожалуйста Ваш телефон:",
                            uk: "{CUSTOMER_NAME}, будь ласка, введіть Ваш телефон:"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            script: 'if (INPUT)\n{\n  CUSTOMER_PHONE = INPUT\n  step("BEFORE_CHECK")\n  if(not CUSTOMER_EMAIL) {\n    step("CUSTOMER_EMAIL_MAYBE")\n  }\n} else {\n  step("CUSTOMER_PHONE_WRONG")\n}'
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Will you try again?",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуете ещё раз?",
                            uk: "Ми не зможемо зателефонувати за таким телефоном. Спробуєте ще раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да",
                                    uk: "✔ Так"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет",
                                    uk: "❌ Ні"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, maybe you will leave your phone? We can send messages in the messenger.",
                            ru: "{CUSTOMER_NAME}, может быть Вы оставите Ваш телефон? Мы можем присылать сообщения в месенджере.",
                            uk: "{CUSTOMER_NAME}, можливо Ви залишите Ваш телефон? Ми можемо надсилати повідомлення у мессенджері."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да",
                                    uk: "✔ Так"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет",
                                    uk: "❌ Ні"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    script: 'if (not CUSTOMER_EMAIL)\n{\n  step("CUSTOMER_EMAIL_MAYBE")\n}'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, would you mind leaving your email? Sometimes we will send in very useful information.",
                            ru: "{CUSTOMER_NAME}, Вы не против оставить Вашу электронную почту? Иногда мы будем присылать очень полезную информацию.",
                            uk: "{CUSTOMER_NAME}, Ви не проти залишити Вашу електронну пошту? Іноді ми надсилатимемо дуже корисну інформацію."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да",
                                    uk: "✔ Так"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет",
                                    uk: "❌ Ні"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_MESSAGE: [ {
                        type: "text",
                        text: {
                            en: "Write something about yourself or leave any of your suggestions. Your feedback is very important to us.",
                            ru: "Напишите что-нибудь о себе или оставьте любые Ваши предложения. Ваше мнение очень важно для нас.",
                            uk: "Напишіть щось про себе або залиште будь-які Ваші пропозиції. Ваша думка дуже важлива для нас."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "CUSTOMER_MESSAGE = INPUT"
                        }, {
                            state: "CUSTOMER_END"
                        } ]
                    } ],
                    CUSTOMER_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n"kind":    "customer",\n"name":    CUSTOMER_NAME,\n"phone":   CUSTOMER_PHONE,\n"mail":    CUSTOMER_EMAIL,\n"message": CUSTOMER_MESSAGE\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you very much {CUSTOMER_NAME} 😊, we will contact you shortly.",
                            ru: "Спасибо большое {CUSTOMER_NAME} 😊, мы свяжемся с Вами в ближайшее время.",
                            uk: "Дякую велике {CUSTOMER_NAME} 😊, ми зв'яжемося з Вами найближчим часом."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Get $ 1000",
                                    ru: "Получить 1000 \\$",
                                    uk: "Отримати 1000 \\$"
                                },
                                actions: [ {
                                    script: "MONEY = 1000"
                                }, {
                                    state: "SELECT_BET"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?",
                            uk: "Все вірно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да",
                                    uk: "✔ Так"
                                },
                                actions: [ {
                                    state: "CUSTOMER_MESSAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change name",
                                    ru: "🤖 Изменить имя",
                                    uk: "🤖 Змінити ім'я"
                                },
                                actions: [ {
                                    state: "CUSTOMER_NAME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change mail",
                                    ru: "💻Изменить почту",
                                    uk: "💻Змінити пошту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change phone",
                                    ru: "📞 Изменить телефон",
                                    uk: "📞 Змінити телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            script: 'if (CUSTOMER_PHONE and CUSTOMER_EMAIL)\n{\n  goto("PHONE_AND_EMAIL")\n}'
                        }, {
                            script: 'if(CUSTOMER_PHONE)\n{\n  goto("ONLY_PHONE")\n}'
                        }, {
                            script: 'if(CUSTOMER_EMAIL)\n{\n  goto("ONLY_EMAIL")\n}'
                        }, {
                            goto: "NOTHING"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> {CUSTOMER_NAME}</b> and you prefer to contact by mail <b>{CUSTOMER_EMAIL}</b> and phone <b>{CUSTOMER_PHONE}</b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по почте <b>{CUSTOMER_EMAIL}</b> и телефону <b>{CUSTOMER_PHONE}</b>.",
                            uk: "І так, Вас звуть <b>{CUSTOMER_NAME}</b> і Ви віддаєте перевагу зв'язку поштою <b>{CUSTOMER_EMAIL}</b> та телефону <b>{CUSTOMER_PHONE}</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b>{CUSTOMER_NAME}</b> and you prefer to contact by by mail <b>{CUSTOMER_EMAIL}</b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по почте <b>{CUSTOMER_EMAIL}</b>.",
                            uk: "І так, Вас звуть <b>{CUSTOMER_NAME}</b> і Ви віддаєте перевагу зв'язку поштою <b>{CUSTOMER_EMAIL}</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, you have left no phone or mail.",
                            ru: "{CUSTOMER_NAME}, Вы не оставили, ни телефона, ни почты.",
                            uk: "{CUSTOMER_NAME}, Ви не залишили ні телефону, ні пошти."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_NAME: [ {
                        type: "text",
                        text: {
                            en: "Please introduce yourself 🙏:",
                            ru: "Пожалуйста, введите своё имя 🙏:",
                            uk: "Будь ласка, введіть своє ім'я 🙏:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length < 2)\n{\n  step("CUSTOMER_WRONG_NAME")\n} else {\n  CUSTOMER_NAME = INPUT\n  step("CUSTOMER_GREET")\n}'
                        } ]
                    } ],
                    CUSTOMER_START: [ {
                        type: "actions",
                        actions: [ {
                            script: 'if(not CUSTOMER_NAME) \n{\n  goto("CUSTOMER_NAME") \n}'
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_CHANNEL") \n}'
                        }, {
                            script: 'if(not CUSTOMER_EMAIL and CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_EMAIL_MAYBE") \n}'
                        }, {
                            script: 'if(CUSTOMER_EMAIL and not CUSTOMER_PHONE) \n{\n  goto("CUSTOMER_PHONE_MAYBE") \n}'
                        }, {
                            goto: "BEFORE_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHANNEL: [ {
                        type: "text",
                        text: {
                            en: "We may want to contact you. Is it more convenient for you to communicate by phone or email?",
                            ru: "Возможно, мы захотим связаться с Вами. Вам удобнее общаться по телефону или по электронной почте?",
                            uk: "Можливо ми захочемо зв'язатися з Вами. Вам зручніше спілкуватися телефоном чи електронною поштою?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон",
                                    uk: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта",
                                    uk: "💻 Пошта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "Nice to meet you {CUSTOMER_NAME}!",
                            ru: "Рад знакомству {CUSTOMER_NAME}!",
                            uk: "Радий знайомству {CUSTOMER_NAME}!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_START"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> {CUSTOMER_NAME} </b> and you prefer to contact phone <b>{CUSTOMER_PHONE} </b>. ",
                            ru: "И так, Вас зовут <b>{CUSTOMER_NAME}</b> и Вы предпочитаете связь по телефону <b>{CUSTOMER_PHONE}</b>. ",
                            uk: "І так, Вас звуть <b>{CUSTOMER_NAME}</b> і Ви віддаєте перевагу зв'язку за телефоном <b>{CUSTOMER_PHONE}</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: ""
                },
                cards: {
                    states: {
                        TABLE: {
                            c: 3,
                            r: 0,
                            x: 1195,
                            y: 129
                        },
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 26,
                            y: 10
                        },
                        SELECT_BET: {
                            c: 1,
                            r: 0,
                            x: 426,
                            y: 190
                        },
                        LOSE: {
                            c: 1,
                            r: 1,
                            x: 82,
                            y: 336
                        },
                        WIN: {
                            c: 0,
                            r: 1,
                            x: 386,
                            y: 446
                        },
                        PASS: {
                            c: 2,
                            r: 1,
                            x: 705,
                            y: 531
                        },
                        CHECK_WIN: {
                            c: 5,
                            r: 0,
                            x: 772,
                            y: 335
                        },
                        ADD_DEALER_CARDS: {
                            c: 4,
                            r: 0,
                            x: 1273,
                            y: 441
                        },
                        DEALER_TABLE: {
                            c: 2,
                            r: 0,
                            x: 826,
                            y: 43
                        },
                        NO_MONEY_FOR_BET: {
                            c: 3,
                            r: 1,
                            x: 283,
                            y: 29
                        },
                        NO_MONEY: {
                            c: 1,
                            r: 2,
                            x: 56,
                            y: 543
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 1,
                            r: 4,
                            x: 832,
                            y: 929.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL: {
                            c: 0,
                            r: 5,
                            x: 1085,
                            y: 1155.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 1,
                            r: 5,
                            x: 1904,
                            y: 1076.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE: {
                            c: 0,
                            r: 6,
                            x: 318,
                            y: 1256.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 1,
                            r: 6,
                            x: 719,
                            y: 1129.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 2,
                            r: 5,
                            x: 644,
                            y: 1390.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 2,
                            r: 6,
                            x: 966,
                            y: 1574.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_MESSAGE: {
                            c: 2,
                            r: 3,
                            x: 1959,
                            y: 880.0124332656075,
                            folder: "Customer"
                        },
                        CUSTOMER_END: {
                            c: 1,
                            r: 3,
                            x: 1693,
                            y: 763.0124439610204,
                            folder: "Customer"
                        },
                        CUSTOMER_CHECK: {
                            c: 3,
                            r: 4,
                            x: 1564,
                            y: 941.0124332656075,
                            folder: "Customer"
                        },
                        BEFORE_CHECK: {
                            c: 3,
                            r: 5,
                            x: 1661,
                            y: 1379.007084045056,
                            folder: "Customer"
                        },
                        PHONE_AND_EMAIL: {
                            c: 0,
                            r: 7,
                            x: 1213,
                            y: 1322.007084045056,
                            folder: "Customer"
                        },
                        ONLY_EMAIL: {
                            c: 2,
                            r: 7,
                            x: 1452,
                            y: 1586.007084045056,
                            folder: "Customer"
                        },
                        NOTHING: {
                            c: 3,
                            r: 7,
                            x: 2023,
                            y: 1362.007084045056,
                            folder: "Customer"
                        },
                        CUSTOMER_NAME: {
                            c: 0,
                            r: 4,
                            x: 460,
                            y: 847.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_START: {
                            c: 0,
                            r: 3,
                            x: 813,
                            y: 777.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_CHANNEL: {
                            c: 3,
                            r: 3,
                            x: 1214,
                            y: 818.0070840450559,
                            folder: "Customer"
                        },
                        CUSTOMER_GREET: {
                            c: 2,
                            r: 4,
                            x: 430,
                            y: 1053.007084045056,
                            folder: "Customer"
                        },
                        ONLY_PHONE: {
                            c: 1,
                            r: 7,
                            x: 1210,
                            y: 1494.007084045056,
                            folder: "Customer"
                        }
                    },
                    folders: {
                        Customer: {
                            c: 0,
                            r: 2,
                            x: 308,
                            y: 728,
                            openGrid: !1
                        }
                    }
                }
            },
            HR: {
                id: 0,
                name: "HR-Assistant",
                start: "HR_GREED",
                version: "1.0.0",
                view: "grid",
                states: {
                    HR_GREED: [ {
                        type: "actions",
                        actions: [ {
                            slot: "TEST_ML",
                            value: "10000"
                        }, {
                            slot: "TEST_SALES",
                            value: "20000"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Hello! I'm a virtual HR Assistant of the <b>QuData</b> team. ",
                            ru: "С Вами на связи виртуальный HR-менеджер компании <b>Qudata</b>."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/owl_a.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "We have an open position of a ML Engineer and a Sales Manager.",
                            ru: "Мы ищем специалиста по ML и менеджера по продажам."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "I can tell you more about our company, and do a preliminary interview.",
                            ru: "Я могу познакомить Вас с нашей компанией, а также провести первый этап собеседования."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ℹ Company",
                                    ru: "ℹ О Компании"
                                },
                                actions: [ {
                                    state: "COMPANY_INFO1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🙇 Interview",
                                    ru: "🙇 Интервью"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Сменить Язык"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            state: "HR_GREED"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Select your language:",
                            ru: "Выберите язык общения:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    COMPANY_INFO1: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/hr/hr_01.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>QuData</b> is an IT company in the field of machine learning and artificial intelligence.",
                            ru: "<b>QuData</b> - IT компания, работающая в области машинного обучения и искусственного интеллекта."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "We are a team of professionals aming to change the game with cutting-edge technologies.",
                            ru: "У нас работают высококлассные специалисты, использующие самые передовые технологии."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ℹ More Info",
                                    ru: "ℹ Ещё"
                                },
                                actions: [ {
                                    state: "COMPANY_INFO2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "↻ Back",
                                    ru: "↻ Назад"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙇 I'd Like to Apply",
                                    ru: "🙇 Хочу к Вам"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    COMPANY_INFO2: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/hr/hr_02.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Our greatest value is our team. We appreciate professionalism and creativity.",
                            ru: "Самая большая ценность - это наш коллектив. Мы ценим профессионализм и креативность."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ℹ More",
                                    ru: "ℹ Ещё"
                                },
                                actions: [ {
                                    state: "COMPANY_INFO3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙇 I'd Like to Apply",
                                    ru: "🙇 Хочу к Вам"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    COMPANY_INFO3: [ {
                        type: "text",
                        text: {
                            en: "We have Python, C++ and JavaScript developers, machine learning specialists, linguists and marketers.",
                            ru: "У нас работают Python, C++, JavaScript программисты, специалисты по машинному обучению, лингвисты и маркетологи."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "So, are you ready for an interview?",
                            ru: "Ну что, готовы пройти собеседование прямо сейчас?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👌 Yes!",
                                    ru: "👌 Да, конечно!"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🙊 No",
                                    ru: "🙊 Нет"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    JOB_MENU: [ {
                        type: "text",
                        text: {
                            en: "Select a vacancy",
                            ru: "Выберите вакансию, которая Вас интересует"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ML Engineer",
                                    ru: "Специалист по ML"
                                },
                                actions: [ {
                                    state: "JOB_MENU_ML"
                                }, {
                                    slot: "TEST",
                                    value: "1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Sales Manager",
                                    ru: "Менеджер по Продажам"
                                },
                                actions: [ {
                                    state: "JOB_MENU_SALES"
                                }, {
                                    slot: "TEST",
                                    value: "2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    JOB_MENU_ML: [ {
                        type: "text",
                        text: {
                            en: "Job requirements:\n\n➣ Knowledge of tensor calculus\n➣ Knowledge of probability theory\n➣ Strong knowledge of Python\n➣ Profound knowledge of neural networks\n➣ Working with TensorFlow and PyTorch\n➣ Numpy, scikit-learn, pandas, scipy and matplotlib libraries",
                            ru: "Основные требования:\n\n➣ Знание тензорного анализа\n➣ Знание теории вероятности\n➣ Уверенное владение Python\n➣ Глубокие знания о нейронных сетях\n➣ Работа  с TensorFlow и PyTorch\n➣ Библиотеки numpy, scikit-learn, pandas, scipy, matplotlib"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Interview",
                                    ru: "Собеседование"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                }, {
                                    if: "CUSTOMER_NAME and (CUSTOMER_PHONE or CUSTOMER_EMAIL)",
                                    actions: [ {
                                        state: "EXPIRIANCE"
                                    } ]
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Vacancies",
                                    ru: "Вакансии"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    JOB_MENU_SALES: [ {
                        type: "text",
                        text: {
                            en: "Job requirements:\n\n➣ Communication skills\n➣ Purposefulness\n➣ Ability to listen\n➣ Knowledge of the sales theory",
                            ru: "Основные требования:\n\n➣ Коммуникабельность\n➣ Целеустремленность\n➣ Умение слушать\n➣ Знание теории продаж"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Interview",
                                    ru: "Собеседование"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                }, {
                                    if: "CUSTOMER_NAME and (CUSTOMER_PHONE or CUSTOMER_EMAIL)",
                                    actions: [ {
                                        state: "EXPIRIANCE"
                                    } ]
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Vacancies",
                                    ru: "Вакансии"
                                },
                                actions: [ {
                                    state: "JOB_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    EXPIRIANCE: [ {
                        type: "actions",
                        actions: [ {
                            state: "START_TEST"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your work experience:",
                            ru: "Ваш опыт работы:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "3+ years",
                                    ru: "более 3-х лет"
                                },
                                actions: [ {
                                    slot: "EXPERIENCE",
                                    value: "3"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "1-3 years",
                                    ru: "1-3 года"
                                },
                                actions: [ {
                                    slot: "EXPERIENCE",
                                    value: "1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "less than a year",
                                    ru: "менее года"
                                },
                                actions: [ {
                                    slot: "EXPERIENCE",
                                    value: "0"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    START_TEST: [ {
                        type: "text",
                        text: {
                            en: "{CUSTOMER_NAME}, let's take a test. You have half a minute per question. Ready?",
                            ru: "$CUSTOMER_NAME, приступим к тесту. На каждый вопрос у Вас будет полминуты. Готовы?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⏳ Yes!",
                                    ru: "⏳ Да!"
                                },
                                actions: [ {
                                    state: "TEST_ML1"
                                }, {
                                    if: "TEST == 2",
                                    actions: [ {
                                        state: "TEST_SALES1"
                                    } ]
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В Начало"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    TEST_ML1: [ {
                        type: "actions",
                        actions: [ {
                            state: "TEST_ML2"
                        } ]
                    }, {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_ML2"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[1/4] Overfitted model may occur if the model...",
                            ru: "[1/4] Переобучение модели может возникать, когда:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "is very good",
                                    ru: "Модель очень хорошая"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "has too many parameters",
                                    ru: "В модели много параметров"
                                },
                                actions: [ {
                                    slot: "TEST_ML",
                                    value: "TEST_ML + 1000"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "takes too long to train",
                                    ru: "Модель очень долго учится"
                                },
                                actions: []
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    TEST_ML2: [ {
                        type: "actions",
                        actions: [ {
                            state: "TEST_ML3"
                        } ]
                    }, {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_ML3"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[2/4] The output of a convolution of a (2,3) and a (3,4) matrix:",
                            ru: "[2/4] Матричная свёртка двух матриц с формами (2,3) и (3,4) даёт матрицу с формой:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "(3,4)",
                                    ru: "(3,4)"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "(2,3,4)",
                                    ru: "(2,3,4)"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "(2,4)",
                                    ru: "(2,4)"
                                },
                                actions: [ {
                                    slot: "TEST_ML",
                                    value: "TEST_ML + 100"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    TEST_ML3: [ {
                        type: "actions",
                        actions: [ {
                            state: "TEST_ML4"
                        } ]
                    }, {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_ML4"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[3/4] Recurrent neural networks are used to recognize patterns in:",
                            ru: "[3/4] Рекуррентные нейронные сети используются для поиска закономерностей в:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ordinal data",
                                    ru: "упорядоченных данных"
                                },
                                actions: [ {
                                    slot: "TEST_ML",
                                    value: "TEST_ML + 10"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "images",
                                    ru: "изображениях"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "a regression problem",
                                    ru: "в задаче регрессии"
                                },
                                actions: []
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    TEST_ML4: [ {
                        type: "actions",
                        actions: [ {
                            state: "TEST_ML_END"
                        } ]
                    }, {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_ML_END"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[4/4] The Transformer architecture is most commonly used instead of:",
                            ru: "[4/4] Архитектура Transformer наиболее типично используется вместо:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "recurrent networks",
                                    ru: "рекуррентных сетей"
                                },
                                actions: [ {
                                    slot: "TEST_ML",
                                    value: "TEST_ML + 1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "convolutional networks",
                                    ru: "свёрточных сетей"
                                },
                                actions: []
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "fully connected networks",
                                    ru: "полносвязных сетей"
                                },
                                actions: []
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    TEST_ML_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "ml",
                            value: '{\n  "name":  CUSTOMER_NAME,\n  "phone": CUSTOMER_PHONE,\n  "email": CUSTOMER_EMAIL,\n  "job":   "ML",\n  "test":  TEST_ML,\n  "experience": EXPERIENCE,\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Well done, {CUSTOMER_NAME}!<br>Your ML test binary is {TEST_ML}.\nOur HR Manager will contact you shortly.",
                            ru: "Молодец, $CUSTOMER_NAME!<br>Ваш бинарный код ML-теста равен $TEST_ML.\nНаш биологический HR скоро свяжется с Вами."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В Начало"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    TEST_SALES1: [ {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_SALES2"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[1/4] A Sales Manager should respond to objection starting with:\n\n     • 1. You get it wrong, and let me explain why\n     • 2. I agree with you\n     • 3. I see your point\n\nEnter the answer number:\n",
                            ru: "[1/4] Работу с возражением менеджер по продажам должен начинать так:\n\n    • 1. Вы несколько неправы, и я сейчас расскажу вам, в чем именно\n    • 2. Согласен с Вами\n    • 3. Я понимаю Вашу позицию\n\nВведите номер ответа:\n"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "TEST_SALES2"
                        }, {
                            if: "INPUT == 3",
                            actions: [ {
                                slot: "TEST_SALES",
                                value: "TEST_SALES + 1000"
                            } ]
                        } ],
                        kind: "int"
                    } ],
                    TEST_SALES2: [ {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_SALES3"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[2/4] The goal of the first phone call to a potential client is:\n\n    • 1. To sale your goods or service\n    • 2. To leave a good impression of you and your company\n    • 3. Both of the above\n\nEnter the answer number:\n",
                            ru: "[2/4] Цель первого телефонного разговора с потенциальным клиентом:\n\n    • 1. Продажа\n    • 2. Создание благоприятного впечатления о себе и своей компании\n    • 3. Все перечисленные    \n            \nВведите номер ответа:\n"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "TEST_SALES3"
                        }, {
                            if: "INPUT == 3",
                            actions: [ {
                                slot: "TEST_SALES",
                                value: "TEST_SALES + 100"
                            } ]
                        } ],
                        kind: "int"
                    } ],
                    TEST_SALES3: [ {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_SALES4"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "[3/4] You called, and a secretary answered the phone. What does it mean for you?\n\n    • 1. Secretaries only interfere with your purpose, so there is no point talking to them.\n    • 2. You may collect more information about a potential client.\n    • 3. You can make an acquaintance with a girl.\n\nEnter the answer number:",
                            ru: "[3/4] Вы позвонили в компанию, и трубку взял секретарь. Что это означает для Вас?\n\n    • 1. На секретаря лучше не попадать: они только мешают.\n    • 2. Можно собрать дополнительную информацию о потенциальном клиенте.\n    • 3. Можно познакомиться с девушкой.\n\nВведите номер ответа:                            \n"
                        }
                    }, {
                        type: "input",
                        actions: [ {
                            state: "TEST_SALES4"
                        }, {
                            if: "INPUT == 2",
                            actions: [ {
                                slot: "TEST_SALES",
                                value: "TEST_SALES + 10"
                            } ]
                        } ],
                        kind: "int"
                    } ],
                    TEST_SALES4: [ {
                        type: "text",
                        text: {
                            en: "[4/4] What information means most in the market analysis?\n\n    • 1. Customers, your product, competitors.\n    • 2. Market segmentation, SWOT-analysis, ABC analysis.\n    • 3. Oil prices, political situation, seasonality.\n\nEnter the answer number:",
                            ru: "[4/4] Что наиболее важно менеджеру по продажам при анализе ситуации на рынке?\n\n    • 1. Клиенты, свой продукт, конкуренты.\n    • 2. Сегментация рынка, SWOT-анализ, ABC анализ.\n    • 3. Цены на нефть, политическая ситуация, сезонность.\n\nВведите номер ответа:                            "
                        }
                    }, {
                        type: "timer",
                        time: "30000",
                        actions: [ {
                            state: "TEST_SALES_END"
                        } ]
                    }, {
                        type: "input",
                        actions: [ {
                            state: "TEST_SALES_END"
                        }, {
                            if: "INPUT == 1",
                            actions: [ {
                                slot: "TEST_SALES",
                                value: "TEST_SALES + 1"
                            } ]
                        } ],
                        kind: "int"
                    } ],
                    TEST_SALES_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "sales",
                            value: '{\n  "name":  CUSTOMER_NAME,\n  "phone": CUSTOMER_PHONE,\n  "email": CUSTOMER_EMAIL,\n  "job":   "SALES",\n  "test":  TEST_SALES,\n  "experience": EXPERIENCE,\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Well done, {CUSTOMER_NAME} !\n\nYour ML test binary is <b>{TEST_SALES}</b>.\nOur HR Manager will contact you shortly.\n",
                            ru: "Молодец, $CUSTOMER_NAME!\n \nВаш бинарный код теста равен <b>$TEST_SALES</b>.\nНаш биологический HR скоро свяжется с Вами.\n"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В Начало"
                                },
                                actions: [ {
                                    state: "HR_GREED"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME sounds strange. Could you use a different name?",
                            ru: "Очень странное имя $CUSTOMER_NAME. Не могли бы Вы представиться по-другому:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_GREET"
                        }, {
                            slot: "CUSTOMER_NAME",
                            value: "INPUT"
                        }, {
                            if: "INPUT.length < 2",
                            actions: [ {
                                state: "CUSTOMER_WRONG_NAME"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "Nice to meet you, $CUSTOMER_NAME!\nIn case we need to contact you, would you prefer to be reached by phone or email?",
                            ru: "Рад знакомству, $CUSTOMER_NAME!\nВозможно, мы захотим связаться с Вами. Вам удобнее общаться по телефону или по электронной почте?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WELLCOME: [ {
                        type: "text",
                        text: {
                            en: "My name is Qu. May I have your name? 🙏 ",
                            ru: "Меня зовут Кью. Представьтесь, пожалуйста, и Вы 🙏:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_GREET"
                        }, {
                            slot: "CUSTOMER_NAME",
                            value: "INPUT"
                        }, {
                            if: "CUSTOMER_PHONE or CUSTOMER_EMAIL",
                            actions: [ {
                                state: "BEFORE_CHECK"
                            } ]
                        }, {
                            if: "INPUT.length < 2",
                            actions: [ {
                                state: "CUSTOMER_WRONG_NAME"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Our email is info@qudata.com, and what's yours, $CUSTOMER_NAME?",
                            ru: "Наша почта info@qudata.com, а Ваша, $CUSTOMER_NAME?"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            slot: "CUSTOMER_EMAIL",
                            value: "INPUT"
                        }, {
                            state: "BEFORE_CHECK"
                        }, {
                            if: "not CUSTOMER_PHONE",
                            actions: [ {
                                state: "CUSTOMER_PHONE_MAYBE"
                            } ]
                        }, {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                state: "CUSTOMER_EMAIL_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "The entered email seems invalid. Please, try using the <b>name@inbox.com</b> format.\nWill you?",
                            ru: "Мы не сможем написать Вам по такому адресу. Пожалуйста, попробуйте использовать формат <b>name@inbox.com</b>.\nПопробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_PHONE",
                                    actions: [ {
                                        state: "CUSTOMER_PHONE_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, please, enter your phone number in the international format: <b>+12121234567</b>",
                            ru: "$CUSTOMER_NAME, введите, пожалуйста, Ваш телефон в международном формате: <b>+12121234567</b>"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            slot: "CUSTOMER_PHONE",
                            value: "INPUT"
                        }, {
                            slot: "CUSTOMER_PHONE",
                            value: "INPUT",
                            state: "BEFORE_CHECK"
                        }, {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                state: "CUSTOMER_EMAIL_MAYBE"
                            } ]
                        }, {
                            if: "not CUSTOMER_PHONE",
                            actions: [ {
                                state: "CUSTOMER_PHONE_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Try entering the number in the international format: <b>+12121234567</b>.\nWill you try again?",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуйте ввести номер в международном формате: <b>+12121234567</b>. Попробуете ещё раз?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, maybe you will leave your phone? We can send messages in the messenger.",
                            ru: "$CUSTOMER_NAME, может быть Вы оставите Ваш телефон? Мы можем присылать сообщения в месенджере."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, would you mind sharing your email for us to send you our updates.",
                            ru: "$CUSTOMER_NAME, Вы не против оставить Вашу электронную почту? Иногда мы будем присылать очень полезную информацию."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_PHONE",
                                    actions: [ {
                                        state: "CUSTOMER_PHONE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "EXPIRIANCE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change the Name",
                                    ru: "🤖 Изменить Имя"
                                },
                                actions: [ {
                                    state: "CUSTOMER_WELLCOME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change the Email",
                                    ru: "💻 Изменить Почту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change the Phone",
                                    ru: "📞 Изменить Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            if: "CUSTOMER_PHONE and CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "PHONE_AND_EMAIL"
                            } ]
                        }, {
                            if: "CUSTOMER_PHONE",
                            actions: [ {
                                goto: "ONLY_PHONE"
                            } ]
                        }, {
                            if: "CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "ONLY_EMAIL"
                            } ]
                        }, {
                            if: "not CUSTOMER_PHONE and not CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "NOTHING"
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "So, your name is <b> $CUSTOMER_NAME </b>, and you prefer to be contacted at <b>$CUSTOMER_EMAIL</b> or on the number <b>$CUSTOMER_PHONE</b>. ",
                            ru: "Итак, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b> и телефону <b>$CUSTOMER_PHONE</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "So, your name is <b>$CUSTOMER_NAME</b> and you prefer to be contacted on the number <b>$CUSTOMER_PHONE </b>. ",
                            ru: "Итак, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по телефону <b>$CUSTOMER_PHONE</b>. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "So, your name is <b>$CUSTOMER_NAME</b> and you prefer to be reached at <b>$CUSTOMER_EMAIL</b>. ",
                            ru: "Итак, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, you haven't shared your phone or email.",
                            ru: "$CUSTOMER_NAME, Вы не оставили, ни телефона, ни почты."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    TEST_ML: "",
                    TEST_SALES: "",
                    CUSTOMER_NAME: "",
                    CUSTOMER_EMAIL: "",
                    CUSTOMER_PHONE: ""
                },
                cards: {
                    states: {
                        HR_GREED: {
                            c: 0,
                            r: 0,
                            x: 931,
                            y: 23
                        },
                        CHANGE_LANGUAGE: {
                            c: 1,
                            r: 0,
                            x: 1248,
                            y: 55
                        },
                        COMPANY_INFO1: {
                            c: 2,
                            r: 0,
                            x: 523,
                            y: 27
                        },
                        COMPANY_INFO2: {
                            c: 3,
                            r: 0,
                            x: 285,
                            y: 15
                        },
                        COMPANY_INFO3: {
                            c: 4,
                            r: 0,
                            x: 12,
                            y: 77
                        },
                        JOB_MENU: {
                            c: 0,
                            r: 1,
                            x: 436,
                            y: 363
                        },
                        JOB_MENU_ML: {
                            c: 1,
                            r: 1,
                            x: 31,
                            y: 288
                        },
                        JOB_MENU_SALES: {
                            c: 2,
                            r: 1,
                            x: 800,
                            y: 352
                        },
                        EXPIRIANCE: {
                            c: 0,
                            r: 3,
                            x: 1085,
                            y: 635
                        },
                        START_TEST: {
                            c: 1,
                            r: 3,
                            x: 474,
                            y: 575
                        },
                        TEST_ML1: {
                            c: 0,
                            r: 5,
                            x: 110,
                            y: 599.9999984857255,
                            folder: "TEST_ML"
                        },
                        TEST_ML2: {
                            c: 1,
                            r: 5,
                            x: 344,
                            y: 594.9999984857255,
                            folder: "TEST_ML"
                        },
                        TEST_ML3: {
                            c: 2,
                            r: 5,
                            x: 586,
                            y: 590.9999984857255,
                            folder: "TEST_ML"
                        },
                        TEST_ML4: {
                            c: 3,
                            r: 5,
                            x: 825,
                            y: 583.9999984857255,
                            folder: "TEST_ML"
                        },
                        TEST_ML_END: {
                            c: 4,
                            r: 5,
                            x: 1061,
                            y: 614.9999984857255,
                            folder: "TEST_ML"
                        },
                        TEST_SALES1: {
                            c: 0,
                            r: 6,
                            x: 110,
                            y: 735.015623842134,
                            folder: "TEST_SALES"
                        },
                        TEST_SALES2: {
                            c: 1,
                            r: 6,
                            x: 345,
                            y: 731.015623842134,
                            folder: "TEST_SALES"
                        },
                        TEST_SALES3: {
                            c: 2,
                            r: 6,
                            x: 593,
                            y: 719.015623842134,
                            folder: "TEST_SALES"
                        },
                        TEST_SALES4: {
                            c: 3,
                            r: 6,
                            x: 829,
                            y: 712.015623842134,
                            folder: "TEST_SALES"
                        },
                        TEST_SALES_END: {
                            c: 4,
                            r: 6,
                            x: 1064,
                            y: 730.015623842134,
                            folder: "TEST_SALES"
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 2,
                            r: 3,
                            x: 922.0155979753102,
                            y: 816.0157001669794,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_GREET: {
                            c: 1,
                            r: 3,
                            x: 707.0155480601957,
                            y: 829.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_WELLCOME: {
                            c: 0,
                            r: 3,
                            x: 481.01559797531024,
                            y: 812.0157001669794,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL: {
                            c: 0,
                            r: 5,
                            x: 992.0155480601957,
                            y: 959.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 2,
                            r: 5,
                            x: 1007.0155480601957,
                            y: 1101.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE: {
                            c: 0,
                            r: 4,
                            x: 499.01554806019567,
                            y: 958.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 2,
                            r: 4,
                            x: 478.01554806019567,
                            y: 1105.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 1,
                            r: 5,
                            x: 721.0155480601957,
                            y: 1103.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 1,
                            r: 4,
                            x: 717.0155480601957,
                            y: 952.015650301669,
                            folder: "CUSTOMER"
                        },
                        CUSTOMER_CHECK: {
                            c: 0,
                            r: 7,
                            x: 413.0155569017737,
                            y: 1353.0156609167034,
                            folder: "CUSTOMER"
                        },
                        BEFORE_CHECK: {
                            c: 0,
                            r: 6,
                            x: 473.01554806019567,
                            y: 1237.015650301669,
                            folder: "CUSTOMER"
                        },
                        PHONE_AND_EMAIL: {
                            c: 4,
                            r: 6,
                            x: 669.0155480601957,
                            y: 1240.015650301669,
                            folder: "CUSTOMER"
                        },
                        ONLY_PHONE: {
                            c: 3,
                            r: 6,
                            x: 860.0155480601957,
                            y: 1240.015650301669,
                            folder: "CUSTOMER"
                        },
                        ONLY_EMAIL: {
                            c: 2,
                            r: 6,
                            x: 1053.0155480601957,
                            y: 1241.015650301669,
                            folder: "CUSTOMER"
                        },
                        NOTHING: {
                            c: 1,
                            r: 6,
                            x: 864.0155480601957,
                            y: 1332.015650301669,
                            folder: "CUSTOMER"
                        }
                    },
                    folders: {
                        TEST_SALES: {
                            c: 0,
                            r: 5,
                            x: 100,
                            y: 682.0156253564085,
                            openGrid: !1
                        },
                        TEST_ML: {
                            c: 0,
                            r: 4,
                            x: 100,
                            y: 554,
                            openGrid: !1
                        },
                        CUSTOMER: {
                            c: 0,
                            r: 2,
                            x: 612,
                            y: 835,
                            openGrid: !1
                        }
                    }
                }
            },
            SSA: {
                id: 0,
                name: "Service Station Assistant",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "text",
                        text: {
                            en: "👋 Welcome to our Car Repair. How can I help you?",
                            ru: "👋 Приветствую в авто мастерской Биби. Чем я могу Вам помочь?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "😲 I Have a Problem",
                                    ru: "😲 У Меня Проблема"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🔑 Services",
                                    ru: "🔑 Услуги"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💸 Prices",
                                    ru: "💸 Цены"
                                },
                                actions: [ {
                                    state: "PRICES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⌚ Working Hours",
                                    ru: "⌚ Время Работы"
                                },
                                actions: [ {
                                    state: "HOURS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🗺 Location",
                                    ru: "🗺 Где Вы Находитесь?"
                                },
                                actions: [ {
                                    state: "LOCATION"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Contact Us",
                                    ru: "📞 Связаться с Нами"
                                },
                                actions: [ {
                                    state: "CONTACT_US"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Изменить Язык"
                                },
                                actions: [ {
                                    state: "Change_language"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    SCR_SERVICES_1: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔑 Choose the service:",
                            ru: "🔑 Выберите услугу:"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/car_repaire/car-maintenance.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<center><b>Preventive Maintenance:</b></center>\n- Every 6 months: rotate your tires.\n- Every 6 months: balance and align wheels.\n- Every 3 to 5 years: clean and test your battery.\n- About every 30,000 miles: replace spark plugs.",
                            ru: "<center><b>Профилактика:</b></center>\n- Каждые 6 месяцев: меняйте шины.\n- Каждые 6 месяцев: балансируйте и выравнивайте колеса.\n- Каждые 3-5 лет: очищайте и проверяйте аккумулятор.\n- Примерно каждые 20000 км: заменяйте свечи зажигания. "
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_5"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 I Want to Order",
                                    ru: "🛒 Я Хочу Заказать"
                                },
                                actions: [ {
                                    state: "WANT_TO_ORDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SCR_SERVICES_2: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔑 Choose the service:"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/car_repaire/car-tires.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<center><b>Tire Replacement:</b></center>\nEvery car needs tire replacement over the time.\nIf the temperature is below zero, it is unsafe to use summer tires.\nIt is recommended to urgently replace them with winter tires.\nWe will replace your tires, and also balance the wheels.",
                            ru: "<center><b>Замена шин:</b></center>\nПериодически каждой машине необходимо провести замену шин. \nЕсли температура ниже нуля, ездить на летней резине небезопасно. \nРекомендуется срочно произвести замену на зимнюю резину. \nМы не только заменим Вам шины, но произведём балансирование колёс."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 I Want to Order",
                                    ru: "🛒 Я Хочу Заказать"
                                },
                                actions: [ {
                                    state: "WANT_TO_ORDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SCR_SERVICES_3: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔑 Choose the service:",
                            ru: "🔑 Выберите услугу:"
                        },
                        color: "#705757"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/car_repaire/car-checks.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<center><b>Oil & Brake Checks:</b></center>\nTimely oil change will allow the car engine to last longer.\nReliable brakes are the key to your safety. They should be checked regularly.\nAt our repair shop, brake checks are included in the oil change package!",
                            ru: "<center><b>Проверка масла и тормозов:</b></center>\nСвоевременная замена масла позволит двигателю автомобиля прослужить дольше.\nИсправные тормоза - это Ваша безопасность. Их необходимо регулярно проверять.\nНа нашем сервисе проверка тормозов включена в пакет замены масел!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_4"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 I Want to Order",
                                    ru: "🛒 Я Хочу Заказать"
                                },
                                actions: [ {
                                    state: "WANT_TO_ORDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SCR_SERVICES_4: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔑 Choose the service:",
                            ru: "🔑 Выберите услугу:"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/car_repaire/car-battery.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<center><b>Battery & Electric:</b></center>\nThe battery capacity may decrease over time, so it should be checked and replaced if necessary.",
                            ru: "<center><b>Аккумулятор и электрика:</b></center>\nАккумулятор со временем может уменьшить свою ёмкость, поэтому необходимо его проверять и при необходимости заменять."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_3"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_5"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 I Want to Order",
                                    ru: "🛒 Я Хочу Заказать"
                                },
                                actions: [ {
                                    state: "WANT_TO_ORDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    SCR_SERVICES_5: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔑 Choose the service:",
                            ru: "🔑 Выберите услугу:"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/car_repaire/car-engine.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<center><b>Engine Repairs:</b></center>\nDon't worry, whatever issues your engine may have, our technicians can solve them.",
                            ru: "<center><b>Ремонт двигателя:</b></center>\nЕсли у вас проблемы с двигателем, не беспокойтесь. У нас замечательные специалисты, которые смогут решить любую проблему."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_4"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SCR_SERVICES_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🛒 I Want to Order",
                                    ru: "🛒 Я Хочу Заказать"
                                },
                                actions: [ {
                                    state: "WANT_TO_ORDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    PRICES: [ {
                        type: "text",
                        text: {
                            en: "💸 Pricing:\n▹ Engine diagnostics - \\$ 100\n▹ Oil change - \\$ 50\n▹ Replacement of filters - \\$ 75\n▹ Removal/installation of the engine \\$ 200\n▹ Flushing the air conditioner \\$ 300\n▹ Camber convergence \\$ 50\n▹ Replacement of brake pads \\$ 200",
                            ru: "💸 Цены:\n▹ Диагностика ходовой - 100 грн.\n▹ Диагностика двигателя - 200 грн.\n▹ Замена масла  - 300 грн.\n▹ Замена фильтров - 200 грн.\n▹ Снятие/установка двигателя 500 грн.\n▹ Промывка кондиционера 1000 грн.\n▹ Развал схождение 300 грн.\n▹ Замена тормозных колодок 400 грн."
                        },
                        center: 0
                    }, {
                        type: "text",
                        text: {
                            en: "We will be happy to help you with any questions you may have about pricing, payment options, terms, etc. Please, leave your phone number or email address for our specialist to contact you.",
                            ru: "Мы будем рады ответить на любые ваши вопросы о ценах, способах оплаты и условиях. Введите свой номер телефона или адрес электронной почты, чтобы наш специалист мог с вами связаться."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    HOURS: [ {
                        type: "text",
                        text: {
                            en: "⌚ <b>Working Hours:</b>\n- Monday 7 am - 7 pm\n- Tuesday 7 am - 7 pm\n- Wednesday 7 am - 7 pm\n- Thursday 7 am - 7 pm\n- Friday 7 am - 7 pm\n- Saturday 7 am - 2 pm\n- Sunday Closed",
                            ru: "⌚ <b>Часы работы </b>:\n- понедельник 7:00 - 19:00\n- вторник 7:00 - 19:00\n- среда 7:00 - 19:00\n- четверг 7:00 - 19:00\n- пятница 7:00 - 19:00\n- суббота с 7:00 до 14:00\n- воскресенье закрыто"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🗺 Location",
                                    ru: "🗺 Где Вы Находитесь?"
                                },
                                actions: [ {
                                    state: "LOCATION"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 I Need an Advice",
                                    ru: "🦉 Мне Нужен Совет"
                                },
                                actions: [ {
                                    state: "NEED_AN_ADVICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    LOCATION: [ {
                        type: "map",
                        url: '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3240.16794504633!2d7.445421726401583!3d46.92934894394802!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x478e3832fe9ac8e7%3A0x18b352482b5c9d50!2sMarag%20garages%20Ag!5e0!3m2!1sru!2sua!4v1640273886178!5m2!1sru!2sua" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy"></iframe>',
                        height: "250"
                    }, {
                        type: "text",
                        text: {
                            en: "9 Flower Street, Bern",
                            ru: "Берн, Цветочная улица, 9."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⌚ Working Hours",
                                    ru: "⌚ Часы Работы"
                                },
                                actions: [ {
                                    state: "HOURS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "ℹ️ About the Company",
                                    ru: "ℹ️ О Компании"
                                },
                                actions: [ {
                                    state: "ABOUT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    ABOUT: [ {
                        type: "text",
                        text: {
                            en: "ℹ️ BB Car Repair is the best auto repair shop in the city. We brag the best specialists and top-notch equipment.",
                            ru: "ℹ️ Автомастерская Биби - лучшая автомастерская в городе. У нас работают высококлассные специалисты и самое современное оборудование."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 В Начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    Change_language: [ {
                        type: "text",
                        text: {
                            en: "What language do you prefer to communicate in?",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватись?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                }, {
                                    state: "MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                }, {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CONTACT_US: [ {
                        type: "text",
                        text: {
                            en: "<b>📞 Contact Details:</b>\n\n<tt>Urgent:    +41 31 558 34 01\nAppointment: +41 31 558 34 02</tt>\n\nMaybe you would like us to contact you?",
                            ru: "<b>📞 Контактная информация</b>:\n\n<tt>Срочно: +41 31 558 34 01\nЗапись: +41 31 558 34 02</tt>\n\nМожет быть вы хотите чтобы мы связались с Вами?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_WRONG_NAME: [ {
                        type: "text",
                        text: {
                            en: "Very strange name $INPUT. Could you introduce yourself differently:",
                            ru: "Очень странное имя $INPUT. Не могли бы Вы представиться по другому:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            if: "INPUT.length > 1",
                            actions: [ {
                                state: "CUSTOMER_GREET"
                            }, {
                                slot: "CUSTOMER_NAME",
                                value: "INPUT"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "Our mail: info@qudata.com, and yours, $CUSTOMER_NAME?",
                            ru: "Наша почта: info@qudata.com, а Ваша, $CUSTOMER_NAME?"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            if: "INPUT",
                            actions: [ {
                                slot: "CUSTOMER_EMAIL",
                                value: "INPUT"
                            }, {
                                state: "BEFORE_CHECK"
                            }, {
                                if: "not CUSTOMER_PHONE",
                                actions: [ {
                                    state: "CUSTOMER_PHONE_MAYBE"
                                } ]
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                state: "CUSTOMER_EMAIL_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We will not be able to write to you at this address. Will you try again?\nPlease, try using the <b>name@inbox.com</b> format",
                            ru: "Мы не сможем написать Вам по такому адресу. Попробуете ещё раз?\nПожалуйста, попробуйте использовать формат <b>name@inbox.com</b>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_PHONE",
                                    actions: [ {
                                        state: "CUSTOMER_PHONE_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, please enter your phone number in the international format: <b>+12121234567</b>",
                            ru: "$CUSTOMER_NAME, введите пожалуйста Ваш телефон в международном формате: <b>+12121234567</b>"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            if: "INPUT",
                            actions: [ {
                                slot: "CUSTOMER_PHONE",
                                value: "INPUT"
                            }, {
                                state: "BEFORE_CHECK"
                            }, {
                                if: "not CUSTOMER_EMAIL",
                                actions: [ {
                                    state: "CUSTOMER_EMAIL_MAYBE"
                                } ]
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                state: "CUSTOMER_PHONE_WRONG"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "text",
                        text: {
                            en: "We can't call that phone. Will you try again?\nTry entering the number in the international format: <b>+12121234567</b>",
                            ru: "Мы не сможем позвонить по такому телефону. Попробуете ещё раз?\nПопробуйте ввести номер в международном формате: <b>+12121234567</b>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, maybe you will leave your phone? We can send messages in the messenger.",
                            ru: "$CUSTOMER_NAME, может быть Вы оставите Ваш телефон? Мы можем присылать сообщения в месенджере."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                }, {
                                    if: "not CUSTOMER_EMAIL",
                                    actions: [ {
                                        state: "CUSTOMER_EMAIL_MAYBE"
                                    } ]
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_MAYBE: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, would you mind leaving your email? Sometimes we will send in very useful information.",
                            ru: "$CUSTOMER_NAME, Вы не против оставить Вашу электронную почту? Иногда мы будем присылать очень полезную информацию."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "BEFORE_CHECK"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_MESSAGE: [ {
                        type: "text",
                        text: {
                            en: "Write something about yourself or leave any of your suggestions. Your feedback is very important to us.",
                            ru: "Напишите что-нибудь о себе или оставьте любые Ваши предложения. Ваше мнение очень важно для нас."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "CUSTOMER_END"
                        }, {
                            slot: "CUSTOMER_MESSAGE",
                            value: "INPUT"
                        } ]
                    } ],
                    CUSTOMER_END: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n"kind":    "customer",\n"name":    CUSTOMER_NAME,\n"phone":   CUSTOMER_PHONE,\n"mail":    CUSTOMER_EMAIL,\n"message": CUSTOMER_MESSAGE\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you very much $CUSTOMER_NAME 😊, we will contact you shortly.",
                            ru: "Спасибо большое $CUSTOMER_NAME 😊, мы свяжемся с Вами в ближайшее время."
                        }
                    }, {
                        type: "timer",
                        time: "3000",
                        actions: [ {
                            state: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHECK: [ {
                        type: "text",
                        text: {
                            en: "Is that correct?",
                            ru: "Всё верно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔ Yes",
                                    ru: "✔ Да"
                                },
                                actions: [ {
                                    if: "CUSTOMER_PHONE or CUSTOMER_EMAIL",
                                    actions: [ {
                                        goto: "CUSTOMER_MESSAGE"
                                    } ]
                                }, {
                                    state: "NO_CONTACTS_END"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤖 Change Name",
                                    ru: "🤖 Изменить Имя"
                                },
                                actions: [ {
                                    state: "CUSTOMER_NAME"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "💻Change Mail",
                                    ru: "💻Изменить Почту"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Change Phone",
                                    ru: "📞 Изменить Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BEFORE_CHECK: [ {
                        type: "actions",
                        actions: [ {
                            if: "CUSTOMER_PHONE and CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "PHONE_AND_EMAIL"
                            } ]
                        }, {
                            if: "CUSTOMER_PHONE",
                            actions: [ {
                                goto: "ONLY_PHONE"
                            } ]
                        }, {
                            if: "CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "ONLY_EMAIL"
                            } ]
                        }, {
                            goto: "NOTHING"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PHONE_AND_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact by mail <b> $CUSTOMER_EMAIL </b> and phone <b> $CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b> и телефону <b>$CUSTOMER_PHONE</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_EMAIL: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b>$CUSTOMER_NAME </b> and you prefer to contact by by mail <b>$CUSTOMER_EMAIL</b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по почте <b>$CUSTOMER_EMAIL</b>."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTHING: [ {
                        type: "text",
                        text: {
                            en: "$CUSTOMER_NAME, you have left no phone or mail.",
                            ru: "$CUSTOMER_NAME, Вы не оставили, ни телефона, ни почты."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_NAME: [ {
                        type: "text",
                        text: {
                            en: "Please introduce yourself 🙏:",
                            ru: "Пожалуйста, введите своё имя 🙏:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            if: "INPUT.length < 2",
                            actions: [ {
                                state: "CUSTOMER_WRONG_NAME"
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                state: "CUSTOMER_GREET"
                            }, {
                                slot: "CUSTOMER_NAME",
                                value: "INPUT"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_START: [ {
                        type: "actions",
                        actions: [ {
                            if: "not CUSTOMER_NAME",
                            actions: [ {
                                goto: "CUSTOMER_NAME"
                            } ]
                        }, {
                            if: "not CUSTOMER_EMAIL and not CUSTOMER_PHONE",
                            actions: [ {
                                goto: "CUSTOMER_CHANNEL"
                            } ]
                        }, {
                            if: "not CUSTOMER_EMAIL and CUSTOMER_PHONE",
                            actions: [ {
                                goto: "CUSTOMER_EMAIL_MAYBE"
                            } ]
                        }, {
                            if: "CUSTOMER_EMAIL and not CUSTOMER_PHONE",
                            actions: [ {
                                goto: "CUSTOMER_PHONE_MAYBE"
                            } ]
                        }, {
                            goto: "BEFORE_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_CHANNEL: [ {
                        type: "text",
                        text: {
                            en: "We may want to contact you. Is it more convenient for you to communicate by phone or email?",
                            ru: "Возможно, мы захотим связаться с Вами. Вам удобнее общаться по телефону или по электронной почте?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "CUSTOMER_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "text",
                        text: {
                            en: "Nice to meet you $CUSTOMER_NAME!",
                            ru: "Рад знакомству $CUSTOMER_NAME!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_START"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ONLY_PHONE: [ {
                        type: "text",
                        text: {
                            en: "And so, your name is <b> $CUSTOMER_NAME </b> and you prefer to contact phone <b>$CUSTOMER_PHONE </b>. ",
                            ru: "И так, Вас зовут <b>$CUSTOMER_NAME</b> и Вы предпочитаете связь по телефону <b>$CUSTOMER_PHONE</b>. "
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "CUSTOMER_CHECK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NEED_AN_ADVICE: [ {
                        type: "text",
                        text: {
                            en: "Our employee will contact you shortly.\n\nAre you ready to leave your contact details? ",
                            ru: "Наш сотрудник свяжется с вами в ближайшее время.\n\nВы готовы оставить свои контактные данные? "
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [ {
                            slot: "PROBLEM",
                            value: "INPUT"
                        }, {
                            state: "WANT_TO_ORDER"
                        } ],
                        kind: "text"
                    } ],
                    WANT_TO_ORDER: [ {
                        type: "text",
                        text: {
                            en: "To continue, we will use your personal data. Do you agree? ",
                            ru: "Для продолжения мы будем использовать Ваши личные данные. Вы согласны?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    state: "CUSTOMER_START"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    NO_CONTACTS_END: [ {
                        type: "text",
                        text: {
                            en: "We cannot contact you without contact details.\n\nWhen you're ready, you can try entering them again. ",
                            ru: "Мы не можем связаться с Вами без контактных данных.\n\nКак будете готовы, можете попробовать ввести их снова."
                        }
                    }, {
                        type: "timer",
                        time: "2000",
                        actions: [ {
                            state: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    PROBLEM: "",
                    CUSTOMER_NAME: "",
                    CUSTOMER_EMAIL: "",
                    CUSTOMER_PHONE: "",
                    CUSTOMER_MESSAGE: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 1,
                            r: 0,
                            x: 505,
                            y: 550
                        },
                        SCR_SERVICES_1: {
                            c: 5,
                            r: 2,
                            x: 2319.000086575279,
                            y: 633,
                            folder: "Services"
                        },
                        SCR_SERVICES_2: {
                            c: 6,
                            r: 2,
                            x: 2570,
                            y: 648.9999914667975,
                            folder: "Services"
                        },
                        SCR_SERVICES_3: {
                            c: 7,
                            r: 2,
                            x: 2801.000086575279,
                            y: 651.9999780756929,
                            folder: "Services"
                        },
                        SCR_SERVICES_4: {
                            c: 8,
                            r: 2,
                            x: 3079.000086575279,
                            y: 652.9999780756929,
                            folder: "Services"
                        },
                        SCR_SERVICES_5: {
                            c: 9,
                            r: 2,
                            x: 3356.000086575279,
                            y: 663.9999914667975,
                            folder: "Services"
                        },
                        PRICES: {
                            c: 4,
                            r: 1,
                            x: 0,
                            y: 230
                        },
                        HOURS: {
                            c: 3,
                            r: 1,
                            x: 902,
                            y: 47
                        },
                        LOCATION: {
                            c: 2,
                            r: 1,
                            x: 1712,
                            y: 51
                        },
                        ABOUT: {
                            c: 1,
                            r: 1,
                            x: 1059,
                            y: 293
                        },
                        Change_language: {
                            c: 0,
                            r: 1,
                            x: 32,
                            y: 781
                        },
                        CONTACT_US: {
                            c: 2,
                            r: 0,
                            x: 922,
                            y: 933
                        },
                        CUSTOMER_WRONG_NAME: {
                            c: 1,
                            r: 4,
                            x: 972,
                            y: 1419.0124690009925,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL: {
                            c: 0,
                            r: 5,
                            x: 1225,
                            y: 1645.0124690009932,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 1,
                            r: 5,
                            x: 2044,
                            y: 1566.012469000993,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE: {
                            c: 0,
                            r: 6,
                            x: 458,
                            y: 1746.0124690009932,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 1,
                            r: 6,
                            x: 859,
                            y: 1619.0124690009932,
                            folder: "Customer"
                        },
                        CUSTOMER_PHONE_MAYBE: {
                            c: 2,
                            r: 5,
                            x: 784,
                            y: 1880.0124690009932,
                            folder: "Customer"
                        },
                        CUSTOMER_EMAIL_MAYBE: {
                            c: 2,
                            r: 6,
                            x: 1106,
                            y: 2064.0124690009925,
                            folder: "Customer"
                        },
                        CUSTOMER_MESSAGE: {
                            c: 2,
                            r: 3,
                            x: 2099,
                            y: 1370.017818221544,
                            folder: "Customer"
                        },
                        CUSTOMER_END: {
                            c: 1,
                            r: 3,
                            x: 1833,
                            y: 1253.0178289169571,
                            folder: "Customer"
                        },
                        CUSTOMER_CHECK: {
                            c: 3,
                            r: 4,
                            x: 1704,
                            y: 1431.017818221544,
                            folder: "Customer"
                        },
                        BEFORE_CHECK: {
                            c: 3,
                            r: 5,
                            x: 1801,
                            y: 1869.0124690009932,
                            folder: "Customer"
                        },
                        PHONE_AND_EMAIL: {
                            c: 0,
                            r: 7,
                            x: 1331,
                            y: 1801.9956362123412,
                            folder: "Customer"
                        },
                        ONLY_EMAIL: {
                            c: 2,
                            r: 7,
                            x: 1640,
                            y: 2066.9956362123403,
                            folder: "Customer"
                        },
                        NOTHING: {
                            c: 3,
                            r: 7,
                            x: 2163,
                            y: 1852.0124690009932,
                            folder: "Customer"
                        },
                        CUSTOMER_NAME: {
                            c: 0,
                            r: 4,
                            x: 600,
                            y: 1337.0124690009925,
                            folder: "Customer"
                        },
                        CUSTOMER_START: {
                            c: 0,
                            r: 3,
                            x: 953,
                            y: 1267.0124690009925,
                            folder: "Customer"
                        },
                        CUSTOMER_CHANNEL: {
                            c: 3,
                            r: 3,
                            x: 1354,
                            y: 1308.0124690009925,
                            folder: "Customer"
                        },
                        CUSTOMER_GREET: {
                            c: 2,
                            r: 4,
                            x: 570,
                            y: 1543.012469000993,
                            folder: "Customer"
                        },
                        ONLY_PHONE: {
                            c: 1,
                            r: 7,
                            x: 1350,
                            y: 1984.0124690009932,
                            folder: "Customer"
                        },
                        NEED_AN_ADVICE: {
                            c: 0,
                            r: 0,
                            x: 1792,
                            y: 969
                        },
                        WANT_TO_ORDER: {
                            c: 1,
                            r: 2,
                            x: 1395,
                            y: 1353.0003674085074
                        },
                        NO_CONTACTS_END: {
                            c: 3,
                            r: 6,
                            x: 1260,
                            y: 1156.0000747532645,
                            folder: "Customer"
                        }
                    },
                    folders: {
                        Services: {
                            c: 5,
                            r: 1,
                            x: 2309.000086575279,
                            y: 603,
                            openGrid: !1
                        },
                        Customer: {
                            c: 0,
                            r: 2,
                            x: 448,
                            y: 1126,
                            openGrid: !1
                        }
                    }
                }
            },
            HEALTH: {
                id: 0,
                name: "Health and Wellness Advisor",
                start: "START",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/main.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "$NAME, what would you like to do?",
                            ru: "$NAME, что Вас интересует?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✏️ Our Nutritionist",
                                    ru: "✏️ Наш Диетолог"
                                },
                                actions: [ {
                                    state: "Dietolog_Menu"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 FAQ",
                                    ru: "🦉 FAQ"
                                },
                                actions: [ {
                                    slot: "SAVE_STATE_FAQ",
                                    value: '"MAIN"'
                                }, {
                                    state: "FAQ",
                                    value: '"Main"'
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "📩 Contacts",
                                    ru: "📩 Контакты"
                                },
                                actions: [ {
                                    state: "contacts"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Язык"
                                },
                                actions: [ {
                                    slot: "SS_LANGUAGE",
                                    value: '"MAIN"'
                                }, {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "👉 Please select your language",
                            ru: "👉 Выберите свой язык"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"en"'
                                }, {
                                    slot: "LANGUAGE_NAME",
                                    value: '"English"'
                                }, {
                                    state: "CHANGE_LANGUAGE_OK"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: '"ru"'
                                }, {
                                    slot: "LANGUAGE_NAME",
                                    value: '"Русский"'
                                }, {
                                    state: "CHANGE_LANGUAGE_OK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    gotoTestIMT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Calculate your BMI (body mass index) to understand which nutrition program suits you best!",
                            ru: "Узнайте свой ИМТ (индекс массы тела), и Вы поймете, какая программа диеты Вам больше подходит!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Take a Test",
                                    ru: "👉 Пройти Тест"
                                },
                                actions: [ {
                                    state: "enterAge"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Why do I Need to Know My BMI?",
                                    ru: "Зачем Нужно Знать ИМТ?"
                                },
                                actions: [ {
                                    state: "WhyDoNeedToKnow"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WhyDoNeedToKnow: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Knowing your Body Mass Index (BMI) allows us to evaluate your current condition from several aspects:\n\n<i>• metabolic rate\n• required physical activity\n• muscle-to-fat ratio</i>",
                            ru: "Зная такой показатель, как индекс массы тела (сокращённо — «ИМТ»), можно оценить состояние своего организма сразу с нескольких точек зрения:\n<i>\n• уровень обмена веществ\n• необходимость физических нагрузок\n• соотношение жировой и мышечной массы\n</i>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Take a Test",
                                    ru: "👉 Пройти Тест"
                                },
                                actions: [ {
                                    state: "enterAge"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterAge: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ How old are you?",
                            ru: "Сколько вам полных лет? 👇"
                        }
                    }, {
                        type: "input",
                        kind: "number",
                        actions: [ {
                            state: "WRONG_AGE",
                            goto: "RIGHT_AGE"
                        }, {
                            if: "INPUT > 1",
                            actions: [ {
                                slot: "age",
                                value: "INPUT"
                            }, {
                                goto: "RIGHT_AGE"
                            } ]
                        } ],
                        params: {
                            type: "int"
                        }
                    } ],
                    WRONG_AGE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please, enter your age (full years)",
                            ru: "⚠️ Повторите ввод возраста. \nВведите возраст целым числом"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterAge"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RIGHT_AGE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Ok",
                            ru: "Окей"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterWeight"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    welcomeStep1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Nice to meet you $NAME!",
                            ru: "Приятно познакомиться, $NAME!"
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "I will help you calculate your body mass index, select a meal plan and schedule a personal consultation!",
                            ru: "Я помогу Вам узнать индекс массы тела, подобрать рецепт диеты и записать Вас на личную консультацию!"
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Who is the program meant for?",
                            ru: "Кому будет интересна программа?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "welcomeStep2"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    welcomeStep5: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/welcomeSteps/welcomeStep4.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "People over 40 who don't believe that they can lose weight easily\n",
                            ru: "Тем кому 40+, кто не верит, что после 40 можно похудеть без проблем"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Дальше"
                                },
                                actions: [ {
                                    state: "gotoTestIMT"
                                } ],
                                image: "https://qudata.com/qubot/im/ts/Nutritionist/img/welcomeSteps/welcomeStep1.jpg"
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    welcomeStep4: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/welcomeSteps/welcomeStep3.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Office workers who spend most of their day at work or commuting",
                            ru: "Офисным сотрудникам, которые большую часть дня проводят на работе и в дороге"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Дальше"
                                },
                                actions: [ {
                                    state: "welcomeStep5"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    welcomeStep3: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/welcomeSteps/welcomeStep2.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Young mothers who wish to get their body back",
                            ru: "Мамам в декрете, которые хотят вернуть прежние формы"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Дальше"
                                },
                                actions: [ {
                                    state: "welcomeStep4"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    welcomeStep2: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/welcomeSteps/welcomeStep1.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Everyone who is overweight and tired of fighting the problem",
                            ru: "Всем, кто имеет лишний вес и устал с ним бороться"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Дальше"
                                },
                                actions: [ {
                                    state: "welcomeStep3"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "👋 Hello!",
                            ru: "👋 Здравствуйте!"
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "My name is Joe.\nI'm the personal bot of the nutritionist Dr. Henry Smith.",
                            ru: "Я персональный бот профессора диетологии Ниро Вульфа. Меня зовут Арчи."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Язык"
                                },
                                actions: [ {
                                    slot: "SS_LANGUAGE",
                                    value: '"START"'
                                }, {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "👉 Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "ENTER_NAME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterWeight: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ What's your weight in kilograms? ",
                            ru: "Какой у вас вес в килограммах? 👇"
                        }
                    }, {
                        type: "input",
                        kind: "number",
                        actions: [ {
                            state: "WRONG_WEIGHT",
                            goto: "RIGHT_WEIGHT"
                        }, {
                            if: "INPUT > 0",
                            actions: [ {
                                slot: "weight",
                                value: "INPUT"
                            }, {
                                goto: "RIGHT_WEIGHT",
                                slot: "weight"
                            } ]
                        } ],
                        params: {
                            type: "int"
                        }
                    } ],
                    WRONG_WEIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please, enter your weight (integer number)",
                            ru: "⚠️ Повторите ввод веса.\nВведите вес целым числом"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterWeight"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterHeight: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ How tall are you in centimeters?",
                            ru: "Какой у вас рост в сантиметрах? 👇\n"
                        }
                    }, {
                        type: "input",
                        kind: "number",
                        actions: [ {
                            state: "WRONG_HEIGHT"
                        }, {
                            if: "INPUT > 0",
                            actions: [ {
                                slot: "height",
                                value: "INPUT/100"
                            }, {
                                goto: "RIGHT_HEIGHT"
                            } ]
                        } ],
                        params: {
                            type: "int"
                        }
                    } ],
                    WRONG_HEIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please, enter your height (integer number)",
                            ru: "⚠️ Повторите ввод роста.\nВведите рос целым числом"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterHeight"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RIGHT_WEIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Good",
                            ru: "Хорошо"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterHeight"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RIGHT_HEIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Nice",
                            ru: "Хорошо"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "showIMT"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    showIMT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Your age is <b>$age</b> years.\nYour height is <b>$height</b> m.\nYour weight is <b>$weight</b> kg.",
                            ru: "Ваш возраст <b>$age</b>\nВаш рост <b>$height</b> м.\nВаш вес <b>$weight</b> кг."
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Calculating your BMI...",
                            ru: "Подсчитываю Ваш ИМТ, секундочку..."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: "imt = round(weight/(height*height), 2)\n\n// DEBUG PARAMS\n//imt = 29.5"
                        }, {
                            goto: "GET_BMI_INFO"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_UNDERWEIGHT: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            center: 1,
                            width: "100",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_UNDERWEIGHT.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n⚠️ You are extremely underweight.",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n⚠️ У вас крайний недостаток веса."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_UNDERWEIGHT_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_NORMAL: [ {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_NORMAL.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n✅ Congratulations! Your body weight is normal!",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n✅ Поздравляем! У вас нормальный вес тела!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'if (rezAp == -1) {\n\trun("MoreText1")\n} else {\n\trun("MoreText2")\n}'
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_NORMAL_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText1: [ {
                        type: "text",
                        text: {
                            en: "Your BMI rate is normal and does not tend to neighboring conditions!",
                            ru: "Ваш показатель ИМТ в норме и не стремится к соседним состояниям!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText2: [ {
                        type: "text",
                        text: {
                            en: "Your BMI shows that you are tending to $BMINameAp[LANGUAGE]",
                            ru: "Ваш показатель ИМТ показывает, что вы стремитесь к категории $BMINameAp[LANGUAGE]"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OVERWEIGHT: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_OVERWEIGHT.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n⚠️ You are overweight.",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n⚠️ У вас избыточная масса тела."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'if (rezAp == -1) {\n\trun("MoreText3")\n} else {\n\trun("MoreText4")\n}'
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_OVERWEIGHT_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText3: [ {
                        type: "text",
                        text: {
                            en: "Your BMI does not tend to neighboring conditions!",
                            ru: "Ваш показатель ИМТ не стремится к соседним состояниям!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText4: [ {
                        type: "text",
                        text: {
                            en: "Your BMI shows that you are tending to $BMINameAp[LANGUAGE]",
                            ru: "Ваш показатель ИМТ показывает, что вы стремитесь к категории $BMINameAp[LANGUAGE]"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_UNDERWEIGHT_MORE_INFO: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Usually, the BMI value below 18.5 indicates insufficient body weight. This problem is no less serious than obesity. It may lead to anemia or anorexia, dangerous diseases characterised by depression, fainting, migraines, cardiovascular and digestive system disorders, and low protective immune response.",
                            ru: "Обычно значение ИМТ ниже 18,5 свидетельствует о недостаточной массе тела. Это не менее серьезная проблема, чем ожирение, игнорирование которой может привести к анемии, анорексии — опасным для организма болезням, сопровождающимся упадком сил, обмороками, мигренью, нарушением работы сердечно-сосудистой и пищеварительной систем, ослаблением иммунитета и защитных реакций организма.\n"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "finish_IMT_Test"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OVERWEIGHT_MORE_INFO: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Experts distinguish two types of overweight. You might be getting on because of external factors, such as lifestyle, dietary habits, lack of physical activity, or stress. About 70% of people suffer from so-called «laziness obesity». Otherwise, the problem may  root in certain diseases, lipid and metabolic disorders, or malfunctions of the endocrine system.",
                            ru: "Специалисты выделяют две формы избыточной массы тела. Жировые отложения вызваны внешними воздействиями: образ жизни, пищевые привычки, недостаток двигательной и физической активности, стрессы. Порядка 70% людей страдают «ожирением от лени». Накопление жира происходит вследствие определенных заболеваний, нарушений липидного и метаболического обменов, связано с проблемами в работе эндокринной системы."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "finish_IMT_Test"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OBESE_CLASS_1: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_OBESE.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n⚠️ You are obese (Class I).",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n⚠️ У вас ожирение (Класс I)."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'if (rezAp == -1) {\n\trun("MoreText5")\n} else {\n\trun("MoreText6")\n}'
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_OBESE_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText6: [ {
                        type: "text",
                        text: {
                            en: "Your BMI shows that you are tending to $BMINameAp[LANGUAGE]",
                            ru: "Ваш показатель ИМТ показывает, что вы стремитесь к категории $BMINameAp[LANGUAGE]"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText5: [ {
                        type: "text",
                        text: {
                            en: "Your BMI does not tend to neighboring conditions!",
                            ru: "Ваш показатель ИМТ не стремится к соседним состояниям!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OBESE_CLASS_2: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_OBESE.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n⚠️ You are obese (Class II - severe obesity).",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n⚠️ У вас ожирение (Класс II - тяжелое)."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'if (rezAp == -1) {\n\trun("MoreText7")\n} else {\n\trun("MoreText8")\n}'
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_OBESE_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText7: [ {
                        type: "text",
                        text: {
                            en: "Your BMI does not tend to neighboring conditions!",
                            ru: "Ваш показатель ИМТ не стремится к соседним состояниям!"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreText8: [ {
                        type: "text",
                        text: {
                            en: "Your BMI shows that you are tending to $BMINameAp[LANGUAGE]",
                            ru: "Ваш показатель ИМТ показывает, что вы стремитесь к категории $BMINameAp[LANGUAGE]"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OBESE_CLASS_3: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/IMT_TEST/IMT_EXTREMELY_OBESE.jpg"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Your body mass index (BMI) is <b>$imt</b>.\n\n⚠️ You are obese (Class III - morbid obesity).",
                            ru: "Ваш индекс массы тела составляет <b>$imt</b>.\n\n⚠️ У вас ожирение (Класс III - крайне тяжелое)."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "IMT_OBESE_MORE_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_OBESE_MORE_INFO: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "Obesity is defined as excessive fat accumulation in the subcutaneous layer, organs and tissues. This severe disease causes disruption of internal organs, but also provokes depression, problems in sexual life, and psycho-emotional discomfort. These problems require a professional comprehensive approach. The treatment should address all aspects of weight loss.\n",
                            ru: "Под ожирением понимают избыточные жировые отложения, расположенные в подкожном слое, органах, тканях. Это наиболее опасное заболевание для организма, вызывающее неуверенность в себе, проблемы в интимной жизни, психоэмоциональный дискомфорт, нарушения работы внутренних органов. Перечисленные проблемы требуют решения, грамотного, комплексного подхода. Методика должна затрагивать все аспекты снижения веса."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "finish_IMT_Test"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    finish_IMT_Test: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n\t"Name": name,\n\t"Age": age,\n\t"Weight": weight,\n\t"Height": height,\n\t"BMI": imt\n}'
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "In order to learn more about your health condition, I will introduce you to our nutritionist.",
                            ru: "Для того, чтобы лучше разобраться в деталях Вашего здоровья, сейчас я познакомлю Вас с нашим диетологом."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "GOTO_CUSTOMER_3"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    contacts: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "actions",
                        actions: [ {
                            slot: "TelegramChannelLink",
                            value: "'https://www.t.me/TelegramTips'"
                        }, {
                            slot: "InstagramLink",
                            value: "'https://www.instagram.com/'"
                        }, {
                            slot: "FacebookLink",
                            value: "'https://www.facebook.com/'"
                        }, {
                            slot: "CompanyPhone",
                            value: '"+380951234567"'
                        }, {
                            slot: "CompanyEmail",
                            value: '"info@qudata.com"'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Our social networks and contacts</b>\n\n🌐 Telegram Channel:\n<a href='$TelegramChannelLink' target='_blank'>$TelegramChannelLink</a>\n🌐 Instagram:\n<a href='$InstagramLink' target='_blank'>$InstagramLink</a>\n🌐 Facebook:\n<a href='$FacebookLink' target='_blank'>$FacebookLink</a>\n\n📞 Phone: <a href='tel:$CompanyPhone'>$CompanyPhone</a>\n📩 Email: <a href='mailto:$CompanyEmail'>$CompanyEmail</a>",
                            ru: "<b>Наши соц. сети и контакты для связи</b>\n\n🌐 Telegram канал:\n$TelegramChannelLink\n🌐 Instagram:\n$InstagramLink\n🌐 Facebook:\n$FacebookLink\n\n📞 Телефон: <a href='tel:$CompanyPhone'>$CompanyPhone</a>\n📩 Почта: <a href='mailto:$CompanyEmail'>$CompanyEmail</a>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    showReviews: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/reviews/review1.png"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/reviews/review2.png"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/reviews/review3.png"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/reviews/review4.png"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/reviews/review5.png"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "GOTO_CUSTOMER_1"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    StartQuiz: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "We will help you optimize your diet.\n\nPlease, take a short survey. It will help us better understand your needs and habits, and create a personalized nutrition plan.",
                            ru: "Мы поможем подобрать для Вас персональное меню.\n\nСейчас мы проведем небольшой опрос. Вам нужно ответить на перечень вопросов для получения результата. Это поможет нам подобрать для Вас оптимальное меню."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Continue",
                                    ru: "✅ Хорошо"
                                },
                                actions: [ {
                                    state: "enterGender"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    showDiplomas: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/diplomas/diploma1.jpg"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/diplomas/diploma2.jpg"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/Nutritionist/img/diplomas/diploma3.jpg"
                        } ]
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Schedule a Consultation",
                                    ru: "👉 Записаться на Консультацию"
                                },
                                actions: [ {
                                    state: "GOTO_CUSTOMER_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📌 More Information",
                                    ru: "📌 Больше Информации"
                                },
                                actions: [ {
                                    state: "showMoreInfo"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    showMoreInfo: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "The methodology is based on the experience and modern dietology principles.\n\nWe will help you develop an individual balanced diet for those who want to lose weight or maintain their current weight.\n\nThe nutritional program suits for pregnant and lactating women, teenagers, seniors, and men, excluding people with type 1 diabetes.\n\nWhat’s essential is that you get the necessary nutrients and lose weight safely, improving both your health and appearance :)",
                            ru: "В основе методики опыт и знания современной диетологии.\n\nМы поможем разработать индивидуальный сбалансированный рацион питания для тех, кто хочет похудеть или поддерживать свой настоящий вес.\n\nПрограмма правильного питания также подходит беременным, кормящим мамочкам, подросткам, пенсионерам, мужчинам, за исключением людей с сахарным диабетом 1 типа.\n\nГлавное — вы получаете необходимые нутриенты и худеете без вреда для организма, улучшая здоровье и внешний вид :)"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Schedule a Consultation",
                                    ru: "👉 Записаться на Консультацию"
                                },
                                actions: [ {
                                    state: "GOTO_CUSTOMER_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🗣 Customer Feedback",
                                    ru: "🗣 Отзывы клиентов"
                                },
                                actions: [ {
                                    state: "showReviews"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_PHONE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The entered phone number is invalid.\n\nTry entering the number in the international format: <b>+10978745874</b>",
                            ru: "⚠️ Введенный номер телефона недействителен.\n\nПопробуйте ввести номер в международном формате: <b>+10978745874</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_PHONE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "🦉 <b>FAQ</b>\n\nSelect a question",
                            ru: "🦉 <b>FAQ</b>\n\nВыберите интересующий вас вопрос"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Why should I consult a nutritionist?",
                                    ru: "Зачем обращаться к диетологу?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Why am I getting fat?",
                                    ru: "Почему я толстею?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What does the online program cover?",
                                    ru: "Какая онлайн программа?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Do I have to take any tests?",
                                    ru: "Анализы сдавать не нужно?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_4"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Are there any contraindications?",
                                    ru: "Какие противопоказания?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_5"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Will I have a special schedule?",
                                    ru: "У меня будет особенный режим?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_6"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Will the diet include expensive foods?",
                                    ru: "Это будут дорогие продукты?"
                                },
                                actions: [ {
                                    state: "FAQ_QUESTION_7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "$SAVE_STATE_FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_2: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Why am I getting fat?</b>\n\nOvereating is a common cause of obesity, but not the only one. Other factors may include irregular meal pattern, stress and overwork, sedentary lifestyle, metabolism issues, hormonal drugs, conditions caused by viruses and infections, endocrine system disorders, etc.",
                            ru: "<b>Почему я толстею?</b>\n\nПереедание, безусловно, является частой причиной ожирения, но, кроме этого, существует также много других: питание не по режиму, стрессы и переутомления, сидячий и малоподвижный образ жизни, неправильный обмен веществ, гормональные лекарства, заболевани, вызванные вирусами и инфекциями, нарушения в эндокринной системе."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_1: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Why should I consult a nutritionist?</b>\n\nWeight is 70-80% of nutrition and only 20-30% of exercise. Also training and physical activity aren't recommended to everyone. A nutritionist offers a scientific approach to the problem. I will help you develop a healthy meal plan, and lead you through the adaptation period. You will learn how to create a diet for yourself and your family.",
                            ru: "<b>Зачем обращаться к диетологу?</b>\n\nПохудение на 70-80% зависит от питания и только на 20-30% от тренировок. К тому же не всем подойдет спортзал и физические нагрузки. Диетолог поможет разобраться в проблеме с научной точки зрения. Я помогу подобрать правильный рацион питания и преодолеть период адаптации, научу правильно питаться и составлять рацион для себя и близких."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    "": "OK",
                                    ru: "Понятно",
                                    en: "OK"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_3: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Do I have to take any tests?</b>\n\nOnline program enables you to join the program wherever you are. All you need is Internet access. You will be under my supervision for at least 4 weeks.",
                            ru: "<b>Какая онлайн программа?</b>\n\nЛичная встреча не нужна. Месторасположение ваше и мое не играет роли, если есть интернет. Вы находитесь под моим сопровождением и контролем минимум 4 недели."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_4: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Do I have to take any tests?</b>\n\nYou don't have to take any tests in order to start a healthy diet. It is not treating, and I will not prescribe medications.",
                            ru: "<b>Анализы сдавать не нужно?</b>\n\nДля того чтобы правильно питаться, анализы не нужны, я Вас лечить и назначать медикаменты не буду."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_5: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Are there any contraindications?</b>\n\nWhile filling out the questionnaire, please, indicate all diagnoses and medical contraindications, if any, as well as food sensitivities and allergies.",
                            ru: "<b>Какие противопоказания?</b>\n\nПри заполнении анкеты Вы укажете все диагнозы и медицинские противопоказания, если они есть, непереносимость продуктов и продукты, на которые есть аллергия."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_6: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Will I have a special schedule?</b>\n\nThe nutrition plan is naturally integrated into lifestyle, if you are eager to change your life for the better.",
                            ru: "<b>У меня будет особенный режим?</b>\n\nПрограмма правильного питания легко встраивается в жизнь, при желании поможет изменить свою жизнь в лучшую сторону."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_QUESTION_7: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Will the diet include expensive foods?</b>\n\nAll you need is food from a nearby grocery. The diet doesn't include expensive dietary supplements, exotic foods or berries.\n",
                            ru: "<b>Это будут дорогие продукты?</b>\n\nВсе, что нужно - это продукты из соседнего магазина. Никаких дорогостоящих БАДов, экзотических продуктов и ягод."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterGender: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Your sex",
                            ru: "Выберите ваш пол"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🙎‍♂️ Man",
                                    ru: "🙎‍♂️ Мужчина"
                                },
                                actions: [ {
                                    slot: "gender",
                                    value: '"Man"'
                                }, {
                                    state: "PRE_EnterProblem"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🙍‍♀️ Woman",
                                    ru: "🙍‍♀️ Женщина"
                                },
                                actions: [ {
                                    slot: "gender",
                                    value: '"Woman"'
                                }, {
                                    state: "PRE_EnterProblem"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterProblem: [ {
                        type: "text",
                        text: {
                            en: 'Select the problem you are facing?\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Выберите проблему с которой Вы столкнулись?\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterProblem"',
                            clear: "0"
                        }, {
                            slot: "NEXT_STATE",
                            value: "'enterActivity'"
                        }, {
                            script: "run('SHOW_BUTTONS');"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterActivity: [ {
                        type: "actions",
                        actions: [ {
                            state: "PRINT_RESULT_SELECTION"
                        }, {
                            slot: "NEXT_STATE",
                            value: "'PRE_EnterMeat'"
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Your physical activity",
                            ru: "Ваша физическая активность"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Minimal physical activity",
                                    ru: "Минимальная физическая активность"
                                },
                                actions: [ {
                                    script: 'RESULT_SELECTION = []\nRESULT_SELECTION.push(\n\t{\n\ten: "Minimal physical activity",\n\tru: "Минимальная физическая активность"\n\t}\n)'
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I Walk a Lot",
                                    ru: "Я Часто Хожу Пешком"
                                },
                                actions: [ {
                                    script: 'RESULT_SELECTION = []\nRESULT_SELECTION.push(\n\t{\n\t\ten: "I Walk a Lot",\n\t\tru: "Я Часто Хожу Пешком"\n\t}\n)'
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I Have 1-3 Workouts a Week",
                                    ru: "Я Занимаюсь 1-3 Раза в Неделю"
                                },
                                actions: [ {
                                    script: 'RESULT_SELECTION = []\nRESULT_SELECTION.push(\n\t{\n\t\ten: "I have 1-3 workouts a week",\n\t\tru: "Я занимаюсь 1-3 раза в неделю"\n\t}\n)'
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I have 3-5 workouts a week",
                                    ru: "Я занимаюсь 3-5 раза в неделю"
                                },
                                actions: [ {
                                    script: 'RESULT_SELECTION = []\nRESULT_SELECTION.push(\n\t{\n\t\ten: "I have 3-5 workouts a week",\n\t\tru: "Я занимаюсь 3-5 раза в неделю"\n\t}\n)'
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I have 5-7 workouts a week",
                                    ru: "Я занимаюсь 5-7 раза в неделю"
                                },
                                actions: [ {
                                    script: 'RESULT_SELECTION = []\nRESULT_SELECTION.push(\n\t{\n\t\ten: "I have 5-7 workouts a week",\n\t\tru: "Я занимаюсь 5-7 раза в неделю"\n\t}\n)'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterMeat: [ {
                        type: "text",
                        text: {
                            en: 'Choose the meat you want to include in your diet.\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Выберите мясо, которое вы желаете включить в диету.\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterMeat"'
                        }, {
                            slot: "NEXT_STATE",
                            value: "'PRE_EnterVegetable'"
                        }, {
                            script: "run('SHOW_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ],
                                kind: "button",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterVegetable: [ {
                        type: "text",
                        text: {
                            en: 'Select the vegetables you wish to include in your diet.\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Выберите овощи, которые вы желаете включить в диету.\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterVegetable"'
                        }, {
                            slot: "NEXT_STATE",
                            value: "'PRE_EnterProduct'"
                        }, {
                            script: "run('SHOW_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ],
                                kind: "button",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterProduct: [ {
                        type: "text",
                        text: {
                            en: 'Select foods you wish to include in your diet.\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Выберите продукты, которые вы желаете включить в диету.\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterProduct"'
                        }, {
                            slot: "NEXT_STATE",
                            value: "'PRE_EnterDefaultDay'"
                        }, {
                            script: "run('SHOW_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ],
                                kind: "button",
                                checked: !1
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterDefaultDay: [ {
                        type: "text",
                        text: {
                            en: 'Describe your ordinary day.\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Опишите свой обычный день.\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterDefaultDay"'
                        }, {
                            slot: "NEXT_STATE",
                            value: "'PRE_EnterCharacteristic'"
                        }, {
                            script: "run('SHOW_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterCharacteristic: [ {
                        type: "text",
                        text: {
                            en: 'What is typical for you?\n\n<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "Что характерно для вас?\n\n<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: '"enterCharacteristic"'
                        }, {
                            slot: "NEXT_STATE",
                            value: "'enterDesiredWeight'"
                        }, {
                            script: "run('SHOW_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить Свой Вариант"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ],
                                kind: "button",
                                checked: !1
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Дальше"
                                },
                                actions: [ {
                                    script: "step('CHECK_CONTINUE')"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterDesiredWeight: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ Enter your desired weight in kilograms",
                            ru: "✍️ Введите ваш желаемый вес в килограммах"
                        }
                    }, {
                        type: "input",
                        kind: "int",
                        actions: [ {
                            state: "WRONG_DESIRED"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "desiredWeight",
                                value: "INPUT"
                            }, {
                                goto: "readyDiet",
                                slot: "desiredWeight"
                            } ]
                        } ]
                    } ],
                    WRONG_DESIRED: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Re-enter the desired weight (integer number)",
                            ru: "⚠️ Повторите ввод желаемого веса"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterDesiredWeight"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    readyDiet: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Developing a meal plan...",
                            ru: "Разрабатываем план питания..."
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ Your personal diet is ready!",
                            ru: "✅ Ваша персональная диета готова!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "GOTO_CUSTOMER_2"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "📩 Enter your email address in the format <b>name@inbox.com</b> to receive your meal plan",
                            ru: "📩 Введите электронный адрес в формате <b>name@inbox.com</b>"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            state: "WRONG_EMAIL"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "EMAIL",
                                value: "INPUT"
                            }, {
                                goto: "EXIT_CUSTOMER"
                            } ]
                        } ]
                    } ],
                    WRONG_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The entered e-mail seems invalid.\n\nPlease, try using the <b>name@inbox.com</b> format",
                            ru: "⚠️Введенный адрес электронной почты кажется недействительным.\n\nПожалуйста, попробуйте использовать формат <b>name@inbox.com</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_EMAIL"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK_WRONG_CHECKBOX: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ Please, choose at least one",
                            ru: "⚠️ Выберите хотя бы один пункт"
                        }
                    }, {
                        type: "timer",
                        time: "1500",
                        actions: [ {
                            state: "$PREV_STATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The name has to be at least two characters.",
                            ru: "⚠️ Имя должно состоять как минимум из двух символов."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_NAME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your name",
                            ru: "Как вас зовут?"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            if: 'INPUT == "0"',
                            actions: [ {
                                slot: "NAME",
                                value: '"UserTest"'
                            }, {
                                goto: "MAIN"
                            } ]
                        }, {
                            state: "WRONG_NAME"
                        }, {
                            if: "INPUT.length > 1",
                            actions: [ {
                                slot: "NAME",
                                value: "INPUT"
                            }, {
                                state: "welcomeStep1"
                            } ]
                        } ]
                    } ],
                    CHANGE_LANGUAGE_OK: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ Language successfuly change to $LANGUAGE_NAME",
                            ru: "✅ Язык изменён на $LANGUAGE_NAME"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "$SS_LANGUAGE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START_CUSTOMER: [ {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_PHONE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXIT_CUSTOMER: [ {
                        type: "actions",
                        actions: [ {
                            goto: "$SS_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_PHONE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "📞 Please enter your phone number in the international format: <b>+12121234567</b>",
                            ru: "📞 Отправьте свой номер телефона в международном формате <b>+10978745874</b> для того, чтобы наш менеджер с вами связался"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            state: "WRONG_PHONE",
                            goto: "RIGHT_PHONE"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "PHONE",
                                value: "INPUT"
                            }, {
                                goto: "ENTER_EMAIL"
                            } ]
                        } ]
                    } ],
                    Dietolog_Menu: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "👨‍⚕️ <b>Our nutritionist is Dr. Henry Smith</b>\n\nWeight Management Specialist\nProfessor of the Department of Physical Therapy:\n<i>✔️ Creates an individual healthy meal plan without dieting and feeling hungry, without pills and supplements\n✔️ Shares his experience and provides psychological support\n✔️ Calculates your daily intake of calories and water\n✔️ Suggests several options for the daily diet\n✔️ Develops a clear road map for successful weight loss\n✔️ Studies your medical history to consider contraindications, allergies, etc.</i>",
                            ru: "👨‍⚕️ <b>Наш диетолог - Ниро Вульф.</b>\n\nСпециалист по коррекции веса.\nПрофессор кафедры физической терапии:\n<i>✔️ Составит индивидуальный рацион питания для снижения веса без вреда для здоровья, без диет и голодания, без таблеток и добавок.\n✔️ Окажет психологическую и моральную поддержку, поделится собственным опытом.\n✔️ Определит вашу норму дневной калорийности и норму воды.\n✔️ Составит несколько вариантов дневного рациона.\n✔️ Составит четкий план действий.\n✔️ Будут учтены ваши диагнозы, аллергия и медицинские противопоказания.</i>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🍽 Create Meal Plan",
                                    ru: "🍽 Подобрать Меню"
                                },
                                actions: [ {
                                    state: "StartQuiz"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "👉 Consultation",
                                    ru: "👉 Консультация"
                                },
                                actions: [ {
                                    state: "MoreAboutConsultation"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FINISH_GET_DATA: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n\t"Name": NAME,\n\t"Phone": PHONE,\n\t"Email": EMAIL,\n\t"FROM_DATA": "Dietolog Menu",\n}'
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you, $NAME!\n",
                            ru: "Спасибо, $NAME!"
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ We received your request for a nutrition consultation.\n\nOur manager will call you to $PHONE number in <b>3</b> minutes.",
                            ru: "✅ Мы приняли Ваш запрос на консультацию с диетологом.\n\nНаш менеджер свяжется с Вами по номеру $PHONE в течение <b>3</b> минут"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Thanks",
                                    ru: "👉 Спасибо"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO_CUSTOMER_1: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_CUSTOMER",
                            value: '"BACK_FROM_CUSTOMER_1"'
                        }, {
                            goto: "START_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BACK_FROM_CUSTOMER_1: [ {
                        type: "actions",
                        actions: [ {
                            goto: "FINISH_GET_DATA"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO_CUSTOMER_2: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_CUSTOMER",
                            value: '"BACK_FROM_CUSTOMER_2"'
                        }, {
                            goto: "START_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BACK_FROM_CUSTOMER_2: [ {
                        type: "actions",
                        actions: [ {
                            goto: "Finish_Quiz"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    Finish_Quiz: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n\t"Name": NAME,\n\t"Email": EMAIL,\n\t"Phone": PHONE,\n\t"Gender": gender,\n\t"FROM_DATA": "Quiz",\n}'
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ Your personal nutrition plan has been sent to $EMAIL !",
                            ru: "✅ Ваш персональный рецепт отправлен на указанную почту $EMAIL !"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Thanks!",
                                    ru: "👉 Спасибо!"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MoreAboutConsultation: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>What will we do during the consultation?</b>\n\n<i>• get acquainted and define the goals\n• analyse your daily diet\n• learn the basics of balanced nutrition and water drinking schedule (I will send you a file or a text message)\n• calculate your daily calorie and water intake intake based on your objectives (weight loss or maintenance)\n• create several daily meal plans which you can alternate\n• discuss the psychological aspects and possible challenges in switching to healthy nutrition</i>",
                            ru: "<b>Чем мы будем заниматься на консультации?</b>\n\n<i>• знакомство и определение целей\n• разбор вашего ежедневного рациона\n• знакомимся с основными принципами правильного сбалансированного питания и питьевого режима (отсылаю вам файлом или текстовым сообщением)\n• определим вашу норму дневной калорийности и норму Воды, с учётом поставленной цели (похудеть, удержать вес)\n• cоставим несколько вариантов дневного рациона для вас, которые вы сможете чередовать.\n• обсудим психологические моменты и возможные затруднения при переходе на правильное питание</i>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Schedule a Consultation",
                                    ru: "👉 Записаться на Консультацию"
                                },
                                actions: [ {
                                    state: "GOTO_CUSTOMER_1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Why Should I Trust Your Experience❓",
                                    ru: "Как мне доверять вашим знаниям❓"
                                },
                                actions: [ {
                                    state: "showDiplomas"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO_CUSTOMER_3: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_CUSTOMER",
                            value: '"BACK_FROM_CUSTOMER_3"'
                        }, {
                            goto: "START_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BACK_FROM_CUSTOMER_3: [ {
                        type: "actions",
                        actions: [ {
                            goto: "FINISH_GET_DATA_2"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FINISH_GET_DATA_2: [ {
                        type: "actions",
                        actions: [ {
                            action: "save",
                            storage: "qudata",
                            key: "",
                            value: '{\n\t"Name": NAME,\n\t"Phone": PHONE,\n\t"Email": EMAIL,\n\t"FROM_DATA": "BMI TEST",\n}'
                        } ]
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you, $NAME!\n",
                            ru: "Спасибо, $NAME!"
                        }
                    }, {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ We received your request for a nutrition consultation.\n\nOur manager will call you at $PHONE in <b>3</b> minutes.",
                            ru: "✅ Мы приняли Ваш запрос на консультацию с диетологом.\n\nНаш менеджер свяжется с Вами по номеру $PHONE в течение <b>3</b> минут"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Thanks",
                                    ru: "👉 Спасибо"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GET_BMI_INFO: [ {
                        type: "actions",
                        actions: [ {
                            if: "imt < 18.5",
                            actions: [ {
                                goto: "IMT_UNDERWEIGHT"
                            } ]
                        }, {
                            if: "18.5 <= imt and imt < 25.0",
                            actions: [ {
                                slot: "leftBoard",
                                value: "18.5"
                            }, {
                                slot: "rightBoard",
                                value: "25.0"
                            }, {
                                run: "GET_Approximation"
                            }, {
                                goto: "IMT_NORMAL"
                            } ]
                        }, {
                            if: "25.0 <= imt and imt < 30.0",
                            actions: [ {
                                slot: "leftBoard",
                                value: "25.0"
                            }, {
                                slot: "rightBoard",
                                value: "30.0"
                            }, {
                                run: "GET_Approximation"
                            }, {
                                goto: "IMT_OVERWEIGHT"
                            } ]
                        }, {
                            if: "30.0 <= imt and imt < 35.0",
                            actions: [ {
                                slot: "leftBoard",
                                value: "30.0"
                            }, {
                                slot: "rightBoard",
                                value: "35.0"
                            }, {
                                run: "GET_Approximation"
                            }, {
                                goto: "IMT_OBESE_CLASS_1"
                            } ]
                        }, {
                            if: "35.0 <= imt and imt < 40.0",
                            actions: [ {
                                slot: "leftBoard",
                                value: "35.0"
                            }, {
                                slot: "rightBoard",
                                value: "40.0"
                            }, {
                                run: "GET_Approximation"
                            }, {
                                goto: "IMT_OBESE_CLASS_2"
                            } ]
                        }, {
                            goto: "IMT_OBESE_CLASS_3"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMT_NORMAL_MORE_INFO: [ {
                        type: "message",
                        typing: "2000"
                    }, {
                        type: "text",
                        text: {
                            en: "This is the preferred category for most people, meaning you have the lowest risk of disease. Your job is to avoid weight gain through workouts and a healthy diet.",
                            ru: "Это предпочтительная категория для большинства людей. Нахождение в этой категории означает, что у Вас наименьший риск заболеваний. Ваша задача - избежать увеличения веса с помощью упражнений и здорового питания."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "finish_IMT_Test"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GET_BMI_Name_By_BMI_INDEX: [ {
                        type: "actions",
                        actions: [ {
                            script: "// rezAp => Result Approximation\nif (rezAp < 18.5) {\n\tBMINameAp = {en: 'Underweight', ru: 'Пониженный вес'}\n} else if (18.5 <= rezAp and rezAp < 25.0) {\n\tBMINameAp = {en: 'Normal weight', ru: 'Нормальный вес'}\n} else if (25.0 <= rezAp and rezAp < 30.0) {\n\tBMINameAp = {en: 'Overweight', ru: 'Избыточный вес'}\n} else if (30.0 <= rezAp and rezAp < 35.0) {\n\tBMINameAp = {en: 'Obese (Class 1)', ru: 'Ожирение (Класс I)'}\n} else if (35.0 <= rezAp and rezAp < 40.0) {\n\tBMINameAp = {en: 'Obese (Class II - severe obesity)', ru: 'Ожирение (Класс II - тяжелое)'}\n} else {\n\tBMINameAp = {en: 'Obese (Class III - morbid obesity)', ru: 'Ожирение (Класс III - крайне тяжелое)'}\n}"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GET_Approximation: [ {
                        type: "actions",
                        actions: [ {
                            slot: "percent",
                            value: "30"
                        }, {
                            slot: "x",
                            value: "imt"
                        }, {
                            slot: "deviation",
                            value: "(rightBoard - leftBoard) * (percent/100)"
                        }, {
                            slot: "a",
                            value: "leftBoard + deviation"
                        }, {
                            slot: "b",
                            value: "rightBoard - deviation"
                        }, {
                            if: "x < a",
                            actions: [ {
                                slot: "rezAp",
                                value: "leftBoard - 0.1"
                            }, {
                                run: "GET_BMI_Name_By_BMI_INDEX"
                            } ]
                        }, {
                            else: "",
                            actions: [ {
                                if: "x > b",
                                actions: [ {
                                    slot: "rezAp",
                                    value: "rightBoard + 0.1"
                                }, {
                                    run: "GET_BMI_Name_By_BMI_INDEX"
                                } ]
                            }, {
                                else: "",
                                actions: [ {
                                    slot: "rezAp",
                                    value: "-1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PARAMS_DEBUG_STEP: [ {
                        type: "actions",
                        actions: [ {
                            slot: "height",
                            value: "192/100"
                        }, {
                            slot: "weight",
                            value: "80"
                        }, {
                            slot: "age",
                            value: "23"
                        }, {
                            slot: "LANGUAGE",
                            value: "'ru'"
                        }, {
                            goto: "showIMT"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterProblem: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "I\'m Overweight", ru: "У Меня Избыточный Вес"}, check: false},\n\t{title: {en: "I\'m not satisfied with my BMI", ru: "Я не удовлетворен своим ИМТ"}, check: false},\n\t{title: {en: "I have dry skin", ru: "У меня сухая кожа"}, check: false},\n]'
                        }, {
                            goto: "enterProblem"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_NEW_ITEM: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ Enter other option",
                            ru: "✍️ Введите свой вариант"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "for(item in checks) {\n\tif (INPUT == item.title[LANGUAGE]) {\n\t\trepeat = true\n\t}\n}\n\nif (repeat) {\n\tgoto('ADD_NEW_ITEM_IF_REPEAT')\n} else {\n\tchecks.push({title: {en: INPUT, ru: INPUT}, check: true})\n}"
                        }, {
                            goto: "$PREV_STATE"
                        } ]
                    } ],
                    SHOW_BUTTONS: [ {
                        type: "actions",
                        actions: [ {
                            script: 'for(i, item in checks)\n{\n  buttons()\n  if(item.check)\n  {\n    button("✅ " + item.title[LANGUAGE])\n    {\n      checks[i].check = false\n    }\n  }\n  else\n  {\n    button("◻️ " + item.title[LANGUAGE])\n    {\n      checks[i].check = true\n    }\n  }\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterMeat: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "Poultry", ru: "Курица"}, check: false},\n\t{title: {en: "Pork", ru: "Свинина"}, check: false},\n\t{title: {en: "Beef", ru: "Говядина"}, check: false},\n\t{title: {en: "Bacon", ru: "Бекон"}, check: false},\n\t{title: {en: "Cod", ru: "Треска"}, check: false},\n\t{title: {en: "Salmon", ru: "Лосось"}, check: false},\n\t{title: {en: "Tuna", ru: "Тунец"}, check: false},\n]'
                        }, {
                            goto: "enterMeat"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterVegetable: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "Broccoli", ru: "Брокколи"}, check: false},\n\t{title: {en: "Zucchini", ru: "Цуккини"}, check: false},\n\t{title: {en: "Mushrooms", ru: "Грибы"}, check: false},\n\t{title: {en: "Cauliflower", ru: "Цветная Капуста"}, check: false},\n\t{title: {en: "Asparagus", ru: "Спаржа"}, check: false},\n\t{title: {en: "Avocado", ru: "Авокадо"}, check: false},\n]'
                        }, {
                            goto: "enterVegetable"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterProduct: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "Eggs", ru: "Яйца"}, check: false},\n\t{title: {en: "Nuts", ru: "Орехи"}, check: false},\n\t{title: {en: "Cheese", ru: "Сыр"}, check: false},\n\t{title: {en: "Curd", ru: "Творог"}, check: false},\n\t{title: {en: "Butter", ru: "Сливочное масло"}, check: false},\n\t{title: {en: "Coconuts", ru: "Кокос"}, check: false},\n\t{title: {en: "Tofu", ru: "Тофу"}, check: false},\n]'
                        }, {
                            goto: "enterProduct"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterDefaultDay: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "I work in an office", ru: "В офисе"}, check: false},\n\t{title: {en: "I move a lot", ru: "Регулярно выхожу"}, check: false},\n\t{title: {en: "I spend most of the day on my feet", ru: "Большую часть дня я провожу на ногах"}, check: false},\n\t{title: {en: "I work manually", ru: "Большую часть дня я провожу на ногах"}, check: false},\n\t{title: {en: "I spend most part of the day at home", ru: "Большую часть дня я провожу дома"}, check: false},\n]'
                        }, {
                            goto: "enterDefaultDay"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_EnterCharacteristic: [ {
                        type: "actions",
                        actions: [ {
                            script: 'checks = [\n\t{title: {en: "I often don\'t get enough sleep", ru: "Я часто не высыпаюсь"}, check: false},\n\t{title: {en: "I eat late at night", ru: "Я ем поздно ночью"}, check: false},\n\t{title: {en: "I eat a lot of salt", ru: "Я употребляю много соли"}, check: false},\n\t{title: {en: "I can\'t live without sweets", ru: "Я не могу не есть сладкое"}, check: false},\n\t{title: {en: "I love soda", ru: "Я люблю газировку"}, check: false},\n]'
                        }, {
                            goto: "enterCharacteristic"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK_CONTINUE: [ {
                        type: "actions",
                        actions: [ {
                            script: "// GET CHECKS\ncountChecks = 0\nfor(item in checks) {\n\tif (item.check) {\n\t\tcountChecks++\n\t}\n}\n\n// CHECK NONE CHOOSEN\nif (countChecks == 0) {\n\tgoto(\"CHECK_WRONG_CHECKBOX\")\n}\n\nRESULT_SELECTION = []\nfor (item in checks) { \n  if (item.check) {\n\t\tRESULT_SELECTION.push(item.title)\n  }\n}\n\n// CONTINUE\ngoto('PRINT_RESULT_SELECTION')"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRINT_RESULT_SELECTION: [ {
                        type: "actions",
                        actions: [ {
                            script: 'print(RESULT_SELECTION)\n\n// GENERATE CHOOSEN RESULT STRING\ni = 0\nfirstEl = true\nrezStr = ""\nfor (item in RESULT_SELECTION) { \n  if (firstEl) {\n    rezStr += "  • " + item[LANGUAGE]\n    firstEl = false\n  } else {\n\trezStr += "<br>  • " + item[LANGUAGE]\n\t}\n  i++\n}\nprint(rezStr)'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You selected:</b>\n\n$rezStr",
                            ru: "✅ <b>Вы выбрали:</b>\n\n$rezStr"
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "$NEXT_STATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_NEW_ITEM_IF_REPEAT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ This option already exists",
                            ru: "⚠️ Такой вариант уже есть, повторите ввод"
                        }
                    }, {
                        type: "timer",
                        time: "2000",
                        actions: [ {
                            state: "$PREV_STATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    age: "",
                    weight: "",
                    height: "",
                    deviation: "",
                    a: "",
                    b: "",
                    TelegramChannelLink: "",
                    InstagramLink: "",
                    FacebookLink: "",
                    CompanyPhone: "",
                    CompanyEmail: "",
                    desiredWeight: "",
                    PREV_STATE: "",
                    EMAIL: "",
                    PHONE: "",
                    SS_CUSTOMER: "",
                    leftBoard: "",
                    rightBoard: "",
                    percent: "",
                    x: "",
                    rezAp: "",
                    NEXT_STATE: "",
                    NAME: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 273,
                            y: 542
                        },
                        CHANGE_LANGUAGE: {
                            c: 12,
                            r: 0,
                            x: 279,
                            y: 981
                        },
                        gotoTestIMT: {
                            c: 13,
                            r: 0,
                            x: 3045,
                            y: 1336
                        },
                        WhyDoNeedToKnow: {
                            c: 14,
                            r: 0,
                            x: 3292,
                            y: 1164
                        },
                        enterAge: {
                            c: 15,
                            r: 0,
                            x: 3375,
                            y: 1449
                        },
                        WRONG_AGE: {
                            c: 24,
                            r: 1,
                            x: 3645,
                            y: 1385
                        },
                        RIGHT_AGE: {
                            c: 27,
                            r: 1,
                            x: 3648,
                            y: 1519
                        },
                        welcomeStep1: {
                            c: 8,
                            r: 0,
                            x: 391,
                            y: 22
                        },
                        welcomeStep5: {
                            c: 23,
                            r: 1,
                            x: 1456,
                            y: 43
                        },
                        welcomeStep4: {
                            c: 11,
                            r: 0,
                            x: 1216,
                            y: 39
                        },
                        welcomeStep3: {
                            c: 10,
                            r: 0,
                            x: 981,
                            y: 41
                        },
                        welcomeStep2: {
                            c: 9,
                            r: 0,
                            x: 740,
                            y: 36
                        },
                        START: {
                            c: 7,
                            r: 0,
                            x: 82,
                            y: 15
                        },
                        enterWeight: {
                            c: 21,
                            r: 1,
                            x: 3377,
                            y: 1680
                        },
                        WRONG_WEIGHT: {
                            c: 25,
                            r: 1,
                            x: 3659,
                            y: 1640
                        },
                        enterHeight: {
                            c: 22,
                            r: 1,
                            x: 3370,
                            y: 1892
                        },
                        WRONG_HEIGHT: {
                            c: 26,
                            r: 1,
                            x: 3665,
                            y: 1892
                        },
                        RIGHT_WEIGHT: {
                            c: 25,
                            r: 2,
                            x: 3655,
                            y: 1745
                        },
                        RIGHT_HEIGHT: {
                            c: 26,
                            r: 2,
                            x: 3666,
                            y: 2006
                        },
                        showIMT: {
                            c: 27,
                            r: 2,
                            x: 4013,
                            y: 1369
                        },
                        IMT_UNDERWEIGHT: {
                            c: 29,
                            r: 2,
                            x: 4490,
                            y: 1728
                        },
                        IMT_NORMAL: {
                            c: 30,
                            r: 2,
                            x: 4491,
                            y: 2011
                        },
                        MoreText1: {
                            c: 10,
                            r: 3,
                            x: 4724,
                            y: 2023
                        },
                        MoreText2: {
                            c: 16,
                            r: 3,
                            x: 4729,
                            y: 2109
                        },
                        IMT_OVERWEIGHT: {
                            c: 8,
                            r: 3,
                            x: 4492,
                            y: 2321
                        },
                        MoreText3: {
                            c: 11,
                            r: 3,
                            x: 4725,
                            y: 2358
                        },
                        MoreText4: {
                            c: 14,
                            r: 3,
                            x: 4729,
                            y: 2437
                        },
                        IMT_UNDERWEIGHT_MORE_INFO: {
                            c: 31,
                            r: 2,
                            x: 4155,
                            y: 1774
                        },
                        IMT_OVERWEIGHT_MORE_INFO: {
                            c: 15,
                            r: 3,
                            x: 4160,
                            y: 2357
                        },
                        IMT_OBESE_CLASS_1: {
                            c: 7,
                            r: 3,
                            x: 4491,
                            y: 2649
                        },
                        MoreText6: {
                            c: 13,
                            r: 3,
                            x: 4737,
                            y: 2763
                        },
                        MoreText5: {
                            c: 12,
                            r: 3,
                            x: 4734,
                            y: 2675
                        },
                        IMT_OBESE_CLASS_2: {
                            c: 6,
                            r: 3,
                            x: 4491,
                            y: 2881
                        },
                        MoreText7: {
                            c: 2,
                            r: 4,
                            x: 4739,
                            y: 2903
                        },
                        MoreText8: {
                            c: 1,
                            r: 4,
                            x: 4737,
                            y: 2981
                        },
                        IMT_OBESE_CLASS_3: {
                            c: 9,
                            r: 3,
                            x: 4494,
                            y: 3167
                        },
                        IMT_OBESE_MORE_INFO: {
                            c: 3,
                            r: 4,
                            x: 4168,
                            y: 2908
                        },
                        finish_IMT_Test: {
                            c: 4,
                            r: 4,
                            x: 4510,
                            y: 3479
                        },
                        contacts: {
                            c: 6,
                            r: 0,
                            x: 11,
                            y: 787
                        },
                        showReviews: {
                            c: 1,
                            r: 0,
                            x: 1383,
                            y: 773
                        },
                        StartQuiz: {
                            c: 5,
                            r: 0,
                            x: 1870,
                            y: 319
                        },
                        showDiplomas: {
                            c: 20,
                            r: 1,
                            x: 885,
                            y: 780
                        },
                        showMoreInfo: {
                            c: 19,
                            r: 1,
                            x: 1137,
                            y: 780
                        },
                        WRONG_PHONE: {
                            c: 16,
                            r: 1,
                            x: 2220,
                            y: 1977
                        },
                        FAQ: {
                            c: 10,
                            r: 1,
                            x: 201,
                            y: 1188
                        },
                        FAQ_QUESTION_2: {
                            c: 12,
                            r: 1,
                            x: 244,
                            y: 1950
                        },
                        FAQ_QUESTION_1: {
                            c: 11,
                            r: 1,
                            x: 16,
                            y: 1949
                        },
                        FAQ_QUESTION_3: {
                            c: 13,
                            r: 1,
                            x: 467,
                            y: 1956
                        },
                        FAQ_QUESTION_4: {
                            c: 14,
                            r: 1,
                            x: 698,
                            y: 1956
                        },
                        FAQ_QUESTION_5: {
                            c: 15,
                            r: 1,
                            x: 7,
                            y: 2145
                        },
                        FAQ_QUESTION_6: {
                            c: 23,
                            r: 2,
                            x: 246,
                            y: 2142
                        },
                        FAQ_QUESTION_7: {
                            c: 24,
                            r: 2,
                            x: 474,
                            y: 2135
                        },
                        enterGender: {
                            c: 3,
                            r: 1,
                            x: 2136,
                            y: 324
                        },
                        enterProblem: {
                            c: 5,
                            r: 1,
                            x: 2390,
                            y: 320
                        },
                        enterActivity: {
                            c: 6,
                            r: 1,
                            x: 2687,
                            y: 319
                        },
                        enterMeat: {
                            c: 7,
                            r: 1,
                            x: 2947,
                            y: 319
                        },
                        enterVegetable: {
                            c: 8,
                            r: 1,
                            x: 3204,
                            y: 318
                        },
                        enterProduct: {
                            c: 9,
                            r: 1,
                            x: 3525,
                            y: 321
                        },
                        enterDefaultDay: {
                            c: 16,
                            r: 2,
                            x: 3824,
                            y: 328
                        },
                        enterCharacteristic: {
                            c: 17,
                            r: 2,
                            x: 4142,
                            y: 330
                        },
                        enterDesiredWeight: {
                            c: 18,
                            r: 2,
                            x: 4402,
                            y: 335
                        },
                        WRONG_DESIRED: {
                            c: 22,
                            r: 2,
                            x: 4406,
                            y: 453
                        },
                        readyDiet: {
                            c: 19,
                            r: 2,
                            x: 4664,
                            y: 330
                        },
                        ENTER_EMAIL: {
                            c: 20,
                            r: 2,
                            x: 1974,
                            y: 2111
                        },
                        WRONG_EMAIL: {
                            c: 4,
                            r: 3,
                            x: 2223,
                            y: 2118
                        },
                        CHECK_WRONG_CHECKBOX: {
                            c: 4,
                            r: 1,
                            x: 2801,
                            y: 719
                        },
                        WRONG_NAME: {
                            c: 2,
                            r: 1,
                            x: 299,
                            y: 302
                        },
                        ENTER_NAME: {
                            c: 1,
                            r: 1,
                            x: 49,
                            y: 298
                        },
                        CHANGE_LANGUAGE_OK: {
                            c: 0,
                            r: 1,
                            x: 279,
                            y: 1080
                        },
                        START_CUSTOMER: {
                            c: 15,
                            r: 2,
                            x: 1963,
                            y: 1880
                        },
                        EXIT_CUSTOMER: {
                            c: 2,
                            r: 3,
                            x: 1978,
                            y: 2228
                        },
                        ENTER_PHONE: {
                            c: 4,
                            r: 0,
                            x: 1971,
                            y: 1990
                        },
                        Dietolog_Menu: {
                            c: 2,
                            r: 0,
                            x: 1017,
                            y: 426
                        },
                        FINISH_GET_DATA: {
                            c: 17,
                            r: 1,
                            x: 2200,
                            y: 779
                        },
                        GOTO_CUSTOMER_1: {
                            c: 18,
                            r: 1,
                            x: 1834,
                            y: 779
                        },
                        BACK_FROM_CUSTOMER_1: {
                            c: 13,
                            r: 2,
                            x: 1837,
                            y: 867
                        },
                        GOTO_CUSTOMER_2: {
                            c: 11,
                            r: 2,
                            x: 4672,
                            y: 459
                        },
                        BACK_FROM_CUSTOMER_2: {
                            c: 12,
                            r: 2,
                            x: 4665,
                            y: 553
                        },
                        Finish_Quiz: {
                            c: 21,
                            r: 2,
                            x: 4665,
                            y: 673
                        },
                        MoreAboutConsultation: {
                            c: 3,
                            r: 0,
                            x: 623,
                            y: 781
                        },
                        GOTO_CUSTOMER_3: {
                            c: 10,
                            r: 2,
                            x: 4517,
                            y: 3597
                        },
                        BACK_FROM_CUSTOMER_3: {
                            c: 14,
                            r: 2,
                            x: 4519,
                            y: 3686
                        },
                        FINISH_GET_DATA_2: {
                            c: 9,
                            r: 2,
                            x: 4517,
                            y: 3784
                        },
                        GET_BMI_INFO: {
                            c: 28,
                            r: 2,
                            x: 4442,
                            y: 1276
                        },
                        IMT_NORMAL_MORE_INFO: {
                            c: 0,
                            r: 4,
                            x: 4161,
                            y: 2045
                        },
                        GET_BMI_Name_By_BMI_INDEX: {
                            c: 5,
                            r: 3,
                            x: 4450,
                            y: 1441
                        },
                        GET_Approximation: {
                            c: 32,
                            r: 2,
                            x: 4448,
                            y: 1359
                        },
                        PARAMS_DEBUG_STEP: {
                            c: 3,
                            r: 3,
                            x: 4014,
                            y: 1294
                        },
                        PRE_EnterProblem: {
                            c: 0,
                            r: 2,
                            x: 2388,
                            y: 236
                        },
                        ADD_NEW_ITEM: {
                            c: 8,
                            r: 2,
                            x: 2799,
                            y: 570
                        },
                        SHOW_BUTTONS: {
                            c: 1,
                            r: 2,
                            x: 2800,
                            y: 501
                        },
                        PRE_EnterMeat: {
                            c: 4,
                            r: 2,
                            x: 2965,
                            y: 227
                        },
                        PRE_EnterVegetable: {
                            c: 5,
                            r: 2,
                            x: 3226,
                            y: 218
                        },
                        PRE_EnterProduct: {
                            c: 6,
                            r: 2,
                            x: 3544,
                            y: 227
                        },
                        PRE_EnterDefaultDay: {
                            c: 7,
                            r: 2,
                            x: 3829,
                            y: 238
                        },
                        PRE_EnterCharacteristic: {
                            c: 1,
                            r: 3,
                            x: 4135,
                            y: 256
                        },
                        CHECK_CONTINUE: {
                            c: 2,
                            r: 2,
                            x: 3001,
                            y: 501
                        },
                        PRINT_RESULT_SELECTION: {
                            c: 3,
                            r: 2,
                            x: 3001,
                            y: 570
                        },
                        ADD_NEW_ITEM_IF_REPEAT: {
                            c: 0,
                            r: 3,
                            x: 2800,
                            y: 651
                        }
                    },
                    folders: {}
                }
            },
            ShoppingList: {
                id: 0,
                name: "Shopping List",
                start: "MAIN",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "actions",
                        actions: [ {
                            script: "INIT  = 1\nKINDS = ['🥖','🥛','🍅','🍌','🥩','🍬','🍾']\nKIND  = KINDS[0]\nITEMS = []"
                        }, {
                            script: "ITEMS = {\n  '🥖': [\n    { buy: 0, want: 1,title: { ru: 'хлеб', en:'bread' } },\n    { buy: 0, want: 1,title: { ru: 'лаваш', en:'pita' } },\n    { buy: 0, want: 1,title: { ru: 'булочки', en:'buns' } },\n    { buy: 0, want: 1,title: { ru: 'пицца', en:'pizza' } },\n    { buy: 0, want: 1,title: { ru: 'круассан', en:'croissant' } },\n  ],\n  '🥛': [\n    { buy: 0, want: 1, title: {ru: 'молоко', en:'milk'} },\n    { buy: 0, want: 1, title: {ru: 'кефир', en:'cream'} },\n    { buy: 0, want: 1, title: {ru: 'сметана', en:'sour cream'} },\n    { buy: 0, want: 1, title: {ru: 'масло', en:'butter'} },\n    { buy: 0, want: 1, title: {ru: 'йогурт', en:'yogurt'} },\n    { buy: 0, want: 1, title: {ru: 'творог', en:'cottage cheese'} },\n    { buy: 0, want: 1, title: {ru: 'сыр', en:'cheese'} },\n  ],\n  '🍅': [\n    { buy: 0, want: 0, title: {ru: 'помидоры', en:'tomatoes'}, },\n    { buy: 0, want: 0, title: {ru: 'огурцы', en:'cucumbers', } },\n    { buy: 0, want: 0, title: {ru: 'лук', en:'onion', } },\n    { buy: 0, want: 0, title: {ru: 'картофель', en:'potatoes', } },\n    { buy: 0, want: 0, title: {ru: 'морковь', en:'carrots', } },\n    { buy: 0, want: 0, title: {ru: 'свекла', en:'beets', } },\n    { buy: 0, want: 0, title: {ru: 'капуста', en:'cabbage', } },\n    { buy: 0, want: 0, title: {ru: 'кабачки', en:'zucchini', } },\n    ],\n  '🍌': [\n    { buy: 0, want: 0, title: {ru: 'бананы', en:'bananas'} },\n    { buy: 0, want: 0, title: {ru: 'лимоны', en:'lemons'} },\n    { buy: 0, want: 0, title: {ru: 'яблоки', en:'apples'} },\n    { buy: 0, want: 0, title: {ru: 'груши', en:'pears'} },\n    { buy: 0, want: 0, title: {ru: 'сливы', en:'plums'} },\n    { buy: 0, want: 0, title: {ru: 'абрикос', en:'apricot'} },\n    { buy: 0, want: 0, title: {ru: 'апельсины', en:'oranges'} },\n    { buy: 0, want: 0, title: {ru: 'мандарин', en:'tangerine'} },\n    { buy: 0, want: 0, title: {ru: 'ананас', en:'pineapple'} },\n    { buy: 0, want: 0, title: {ru: 'арбуз', en:'watermelon'} },\n    { buy: 0, want: 0, title: {ru: 'дыня', en:'melon'} },\n  ],\n  '🥩': [\n    { buy: 0, want: 0, title: {ru: 'курица', en:'chicken'} },\n    { buy: 0, want: 0, title: {ru: 'индейка', en:'turkey'} },\n    { buy: 0, want: 0, title: {ru: 'говядина', en:'beef'} },\n    { buy: 0, want: 0, title: {ru: 'свинина', en:'pork'} },\n    { buy: 0, want: 0, title: {ru: 'кролик', en:'rabbit'} },\n    { buy: 0, want: 0, title: {ru: 'рыба', en:'fish'} },\n  ],\n  '🍬': [\n    { buy: 0, want: 0, title: {ru: 'шоколадка', en:'chocolate bar'} },\n    { buy: 0, want: 0, title: {ru: 'конфеты', en:'candies'} },\n    { buy: 0, want: 0, title: {ru: 'торт', en:'cake'} },\n    { buy: 0, want: 0, title: {ru: 'зефир', en:'marshmallow'} },\n    { buy: 0, want: 0, title: {ru: 'мармелад', en:'marmalade'} },\n    { buy: 0, want: 0, title: {ru: 'печеньки', en:'cookies'} },\n  ],\n  '🍾': [\n    { buy: 0, want: 0, title: {ru: 'вино', en:'wine'} },\n    { buy: 0, want: 0, title: {ru: 'шампанское', en:'champagne'} },\n    { buy: 0, want: 0, title: {ru: 'коньяк', en:'cognac'} },\n    { buy: 0, want: 0, title: {ru: 'мартини', en:'martini'} },\n    { buy: 0, want: 0, title: {ru: 'водка', en:'soda'} },\n    { buy: 0, want: 0, title: {ru: 'сок', en:'juice'} },\n    { buy: 0, want: 0, title: {ru: 'вода', en:'water'} }\n  ]\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Hi, I am your shopping assistant. I remember everything, and I will serve you as a reminder 👼.\n\nBTW, would you like a have a short tutorial?",
                            ru: "Привет, я Ваш помощник на шопинге. Всё помню и обо всём напомню 👼.\n\nДавайте пройдём очень небольшой тьюториал. Согласны?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔️ Yes",
                                    ru: "✔️ Да"
                                },
                                actions: [ {
                                    script: "_BUY = 0\nTUTORIAL = 1"
                                }, {
                                    state: "SHOPPING_INIT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌ No",
                                    ru: "❌ Нет"
                                },
                                actions: [ {
                                    script: "TUTORIAL = 0"
                                }, {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAIN_MENU: [ {
                        type: "text",
                        text: {
                            en: "What would you like to do?",
                            ru: "Что будем делать?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📦 Go Shopping",
                                    ru: "📦 За Покупками"
                                },
                                actions: [ {
                                    state: "SHOPPING_INIT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⭐ Make a List",
                                    ru: "⭐ Составить Список"
                                },
                                actions: [ {
                                    state: "SET_WANTS_INIT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✎ Edit Products",
                                    ru: "✎ Редактировать Товары"
                                },
                                actions: [ {
                                    state: "EDIT_INIT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🤓 Run a Tutorial",
                                    ru: "🤓 Тьюториал"
                                },
                                actions: [ {
                                    state: "TUTORIAL_INIT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING_INIT: [ {
                        type: "actions",
                        actions: [ {
                            goto: "SHOPPING"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TUTORIAL_INIT: [ {
                        type: "actions",
                        actions: [ {
                            script: 'INIT = 1\nKIND = "🥖"\n\nfor(kind in KINDS)\n{\n  for(item in ITEMS[kind])\n  {\n    want = 0\n    buy = 0\n  }\n}\n\nfor(item in ITEMS[KIND])\n{\n  want = 1\n}'
                        }, {
                            goto: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EDIT_INIT: [ {
                        type: "actions",
                        actions: [ {
                            script: "SELECT = 0"
                        }, {
                            goto: "EDIT"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SET_WANTS_INIT: [ {
                        type: "actions",
                        actions: [ {
                            script: "TOTAL = 0"
                        }, {
                            goto: "MAKE_A_LIST"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TUTORIAL_END: [ {
                        type: "actions",
                        actions: [ {
                            script: "TUTORIAL = 0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "That's it! Now it's time to enjoy shopping.",
                            ru: "А собственно и всё. Можно начинать наслаждаться шопингом."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 Главное Меню"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            script: "if(TUTORIAL)\n{\n  run('SHOPPING_TUTORIAL')\n}"
                        }, {
                            script: 'local has_wants = false\n\nCOUNT = 0\nfor(item in ITEMS[KIND])\n{\n  if(item.buy)\n  {\n    COUNT++\n  }\n  if(item.want)\n  {\n    has_wants = true\n  }\n}\nif(not has_wants)\n{\n  goto("NO_WANTS")\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "You bought <b>{COUNT}</b> out of <b>{ITEMS[KIND].length}</b> products on your list.",
                            ru: "Вы приобрели <b>$COUNT</b> из <b>{ITEMS[KIND].length}</b> товаров."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'for(i, item in ITEMS[KIND])\n{\n  if(item.want)\n  {\n    local mark = ""\n    if(item.buy)\n    {\n      mark = "✓"\n    }\n    buttons()\n    button("$mark {item.title[LANGUAGE]}")\n    {\n      ITEMS[KIND][i].buy = not item.buy\n    }\n  }\n}'
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'if(TUTORIAL)\n{\n  run("SHOPPING_NEXT")\n} else {\n  run("EDIT_BTN")\n  run("MAIN_MENU_BTN")\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NO_WANTS: [ {
                        type: "text",
                        text: {
                            en: "You haven't planned any purchases yet.",
                            ru: "Вы не запланировали ещё покупок."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⭐ Make a List",
                                    ru: "⭐ Составить Список"
                                },
                                actions: [ {
                                    state: "SET_WANTS_INIT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 Главное Меню"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING_TUTORIAL: [ {
                        type: "text",
                        text: {
                            en: "1/3. During <b>shopping</b>:\n✔️ Use the buttons to explore product sections. Click 🥛, and then 🥖.\n✔️ Сlick a product to mark it (✓) as purchased. Click again to cancel the purchase.",
                            ru: "1/3. Так это будет <b>на шопинге</b>:\n✔️ Кнопки: внизу - разделы товаров. Нажмите на 🥛, затем на 🥖.\n✔️ Кликнув на товар, Вы пометите, что он куплен (появится ✓). Ещё клик - отмена покупки. "
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WANTS_TUTORIAL: [ {
                        type: "text",
                        text: {
                            en: "2/3. Creating a <b>shopping list</b>:\n✔️ Click a product to add it to your shopping list. Click a marked (⭐) product again to cancel selection.\n✔️ On the top panel, the first button applies (de)selection to the current section, and the second button to the entire list.\n✔️ The third button (➕) adds a new product in the section. ",
                            ru: "2/3. Это экран <b>планирования покупок</b>.\n✔️ Кликнув на товар, Вы пометите, что его надо купить (появится ⭐). Ещё один клик - это отмена.\n✔️ Вверху, первая кнопка помечает или снимает пометку в разделе, а вторая - везде.\n✔️ Третья кнопка вверху ➕ добавляет новый товар в данном разделе."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LISTS_TUTORIAL: [ {
                        type: "text",
                        text: {
                            en: "3/3. Creating <b>product lists</b>:\n✔️ The ➕ button adds a new product in the current section.\n✔️ Use the ↑ ↓ buttons to prioritize items within the list.\n✔️ Click ❌ to delete the selected item.",
                            ru: "3/3. Здесь создаются <b>списки товаров</b>.\n✔️ Кнопка ➕ добавляет новый товар в данном разделе.\n✔️ Для перемещения товара по списку, нажмите на него, а затем на кнопки ↑ ↓ .\n✔️ Кнопка ❌ удаляет выбранный товар."
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    KINDS: [ {
                        type: "actions",
                        actions: [ {
                            script: 'for(i, item in KINDS)\n{\n  if (not (i % 3))\n  {\n    buttons()\n  }\n  local mark = "○ "\n  if(item == KIND)\n  {\n    mark = "● "\n  }\n  button("$mark $item")\n  {\n    KIND = item\n    SELECT = 0\n  }\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAKE_A_LIST: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            script: 'if(TUTORIAL)\n{\n  run("WANTS_TUTORIAL")\n}'
                        }, {
                            script: "for(item in ITEMS[KIND])\n{\n  if(item.want)\n  {\n    TOTAL++\n  }\n}"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>{TOTAL}</b> purchases planned",
                            ru: "Запланировано <b>$TOTAL</b> покупок"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            run: "SELECT_MENU"
                        }, {
                            script: 'for(i, item in ITEMS[KIND])\n{\n  local mark = ""\n  if (item.want)\n  {\n    mark = "✓"\n  }\n  buttons()\n  button("$mark {item.title[LANGUAGE]}")\n  {\n    ITEMS[KIND][i].want = not item.want\n  }\n}'
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'PREV_STEP = "MAKE_A_LIST"'
                        }, {
                            run: "KINDS"
                        }, {
                            script: 'if (TUTORIAL)\n{\n  run("WANTS_NEXT")\n} else {\n  run("SHOPPING_BTN")\n  run("MAIN_MENU_BTN")\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING_NEXT: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔️ Ok, Next",
                                    ru: "✔️ Понятно, Дальше"
                                },
                                actions: [ {
                                    state: "SET_WANTS_INIT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WANTS_NEXT: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔️ Next",
                                    ru: "✔️ Дальше"
                                },
                                actions: [ {
                                    state: "EDIT_INIT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LISTS_NEXT: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✔️ Ok",
                                    ru: "✔️ Хорошо"
                                },
                                actions: [ {
                                    script: 'INIT = 1\nKIND = "🥖"\n\nfor(i, kind in KINDS)\n{\n  if(i > 1)\n  {\n    for(item in ITEMS[kind])\n    {\n      want = 0\n      buy = 0\n    }\n  } else {\n    for(item in ITEMS[kind])\n    {\n      want = 1\n      buy = 0\n    }\n  }\n}'
                                }, {
                                    state: "TUTORIAL_END"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EDIT: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            script: 'if(TUTORIAL)\n{\n  run("LISTS_TUTORIAL")\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Edit the product list:",
                            ru: "Редактируйте список товаров:"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            run: "EDIT_MENU"
                        }, {
                            script: 'for(i, item in ITEMS[KIND])\n{\n  local mark = ""\n  if (i == SELECT)\n  {\n    mark = "✓"\n  }\n  buttons()\n  button("$mark {item.title[LANGUAGE]}")\n  {\n    SELECT = i\n  }\n}'
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            script: 'PREV_STEP = "EDIT"'
                        }, {
                            run: "KINDS"
                        }, {
                            script: 'if (TUTORIAL)\n{\n  run("LISTS_NEXT")\n} else {\n  run("MAIN_MENU_BTN")\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAIN_MENU_BTN: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🚀 Main Menu",
                                    ru: "🚀 Главное Меню"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING_BTN: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📦 Go Shopping",
                                    ru: "📦 За Покупками"
                                },
                                actions: [ {
                                    state: "SHOPPING_INIT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EDIT_BTN: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⭐ Edit the List",
                                    ru: "⭐ Изменить Список"
                                },
                                actions: [ {
                                    state: "SET_WANTS_INIT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_MENU: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⭐",
                                    ru: "⭐"
                                },
                                actions: [ {
                                    script: "for(i, item in ITEMS[KIND])\n{\n  item.want = true\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "☆",
                                    ru: "☆"
                                },
                                actions: [ {
                                    script: "for(i, item in ITEMS[KIND])\n{\n  item.want = false\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "➕",
                                    ru: "➕"
                                },
                                actions: [ {
                                    state: "RUN_ADD_ITEM"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RUN_ADD_ITEM: [ {
                        type: "text",
                        text: {
                            en: "Enter the name of the new product in the {KIND} section:",
                            ru: "Введите название нового товара в разделе $KIND:"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: 'if(INPUT.length > 0)\n{\n  ITEMS[KIND].push({buy: 0, want: 1, title: {"en": INPUT, "ru": INPUT }})\n  step(PREV_STEP)\n}'
                        } ]
                    } ],
                    EDIT_MENU: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕",
                                    ru: "➕"
                                },
                                actions: [ {
                                    state: "RUN_ADD_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "↑",
                                    ru: "↑"
                                },
                                actions: [ {
                                    script: "local tmp = ITEMS[KIND][SELECT]\nif(SELECT == 0)\n{\n  ITEMS[KIND].shift()\n  ITEMS[KIND].push(tmp)\n  SELECT = ITEMS[KIND].length - 1\n} else {\n  ITEMS[KIND][SELECT] = ITEMS[KIND][SELECT - 1]\n  ITEMS[KIND][SELECT - 1] = tmp\n  SELECT--\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "↓",
                                    ru: "↓"
                                },
                                actions: [ {
                                    script: "local tmp = ITEMS[KIND][SELECT]\nif(SELECT == ITEMS[KIND].length - 1)\n{\n  ITEMS[KIND].pop()\n  ITEMS[KIND].unshift(tmp)\n  SELECT = 0\n} else {\n  ITEMS[KIND][SELECT] = ITEMS[KIND][SELECT + 1]\n  ITEMS[KIND][SELECT + 1] = tmp\n  SELECT++\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "❌",
                                    ru: "❌"
                                },
                                actions: [ {
                                    script: "ITEMS[KIND].splice(SELECT, 1)\n\nif(SELECT > 0)\n{\n  SELECT--\n}"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    INIT: "",
                    KINDS: "",
                    KIND: "",
                    ITEMS: "",
                    TUTORIAL: "",
                    TOTAL: "",
                    PREV_STEP: "",
                    SELECT: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 0,
                            r: 0,
                            x: 9,
                            y: 557
                        },
                        MAIN_MENU: {
                            c: 1,
                            r: 0,
                            x: 356,
                            y: 355
                        },
                        SHOPPING_INIT: {
                            c: 3,
                            r: 1,
                            x: 240,
                            y: 811
                        },
                        TUTORIAL_INIT: {
                            c: 0,
                            r: 1,
                            x: 302,
                            y: 500
                        },
                        EDIT_INIT: {
                            c: 1,
                            r: 1,
                            x: 246,
                            y: 636
                        },
                        SET_WANTS_INIT: {
                            c: 2,
                            r: 1,
                            x: 1072,
                            y: 244
                        },
                        TUTORIAL_END: {
                            c: 0,
                            r: 3,
                            x: 1677,
                            y: 1057.9932848419678,
                            folder: "TUTORIAL"
                        },
                        SHOPPING: {
                            c: 2,
                            r: 3,
                            x: 577,
                            y: 907.9956844201873
                        },
                        NO_WANTS: {
                            c: 2,
                            r: 0,
                            x: 693,
                            y: 180
                        },
                        SHOPPING_TUTORIAL: {
                            c: 1,
                            r: 3,
                            x: 1145,
                            y: 869.9882956176114,
                            folder: "TUTORIAL"
                        },
                        WANTS_TUTORIAL: {
                            c: 2,
                            r: 3,
                            x: 1416,
                            y: 1032.9882956176114,
                            folder: "TUTORIAL"
                        },
                        LISTS_TUTORIAL: {
                            c: 3,
                            r: 3,
                            x: 1156,
                            y: 1053.9882956176114,
                            folder: "TUTORIAL"
                        },
                        KINDS: {
                            c: 1,
                            r: 3,
                            x: 1428.036434080593,
                            y: 293.9882956176113,
                            folder: "External_buttons"
                        },
                        MAKE_A_LIST: {
                            c: 1,
                            r: 3,
                            x: 712,
                            y: 438
                        },
                        SHOPPING_NEXT: {
                            c: 0,
                            r: 4,
                            x: 1170,
                            y: 1235.9882979780377,
                            folder: "TUTORIAL"
                        },
                        WANTS_NEXT: {
                            c: 1,
                            r: 4,
                            x: 1665,
                            y: 948.9882956176114,
                            folder: "TUTORIAL"
                        },
                        LISTS_NEXT: {
                            c: 2,
                            r: 4,
                            x: 1413,
                            y: 891.9932848419677,
                            folder: "TUTORIAL"
                        },
                        EDIT: {
                            c: 0,
                            r: 3,
                            x: 496,
                            y: 711
                        },
                        MAIN_MENU_BTN: {
                            c: 1,
                            r: 4,
                            x: 1435.036434080593,
                            y: 397.9882956176113,
                            folder: "External_buttons"
                        },
                        SHOPPING_BTN: {
                            c: 2,
                            r: 4,
                            x: 1433.036434080593,
                            y: 458.9882956176113,
                            folder: "External_buttons"
                        },
                        EDIT_BTN: {
                            c: 3,
                            r: 4,
                            x: 1432.036434080593,
                            y: 531.9882956176114,
                            folder: "External_buttons"
                        },
                        SELECT_MENU: {
                            c: 2,
                            r: 3,
                            x: 1653.0413953569025,
                            y: 727.9882956176114,
                            folder: "External_buttons"
                        },
                        RUN_ADD_ITEM: {
                            c: 3,
                            r: 0,
                            x: 793,
                            y: 280
                        },
                        EDIT_MENU: {
                            c: 3,
                            r: 3,
                            x: 1760.0778294374952,
                            y: 827.9882956176114,
                            folder: "External_buttons"
                        }
                    },
                    folders: {
                        TUTORIAL: {
                            c: 0,
                            r: 2,
                            x: 1135,
                            y: 840,
                            openGrid: !1
                        },
                        External_buttons: {
                            c: 1,
                            r: 2,
                            x: 1418.036434080593,
                            y: 264,
                            openGrid: !1
                        }
                    }
                }
            },
            FirstCommunication: {
                id: 0,
                name: "First Communication",
                start: "START",
                version: "1.0.0",
                view: "grid",
                states: {
                    START: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "👋 Hello!\n\nI'm a bot manager, and I'm here to help you create your very own chatbot.",
                            ru: "👋 Приветствую Вас!\n\nЯ бот-менеджер по разработке чат-ботов, и я помогу Вам разработать вашего личного чат-бота."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Язык"
                                },
                                actions: [ {
                                    note: "The current state is saved in the slot in order to return after going through the next chain of steps."
                                }, {
                                    slot: "PREV_STATE",
                                    value: "'START'"
                                }, {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "👉 Continue",
                                    ru: "👉 Продолжить"
                                },
                                actions: [ {
                                    state: "ENTER_NAME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAIN_MENU: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 90,
                            center: 1,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/logo.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "$NAME, what are you interested in?",
                            ru: "$NAME, что Вас интересует?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit a Chatbot Development Request",
                                    ru: "👉 Оформить Заявку на Чат-бота"
                                },
                                actions: [ {
                                    note: "The current state is saved in the slot in order to return after going through the next chain of steps."
                                }, {
                                    slot: "PREV_STATE",
                                    value: "'MAIN_MENU'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📌 Learn More",
                                    ru: "📌 Зачем Мне Нужен Чат-бот?"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🔎 Development Process",
                                    ru: "🔎 Как Создать Чат-бот?"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📩 About us",
                                    ru: "📩 О Нас"
                                },
                                actions: [ {
                                    state: "ABOUT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🌐 Language",
                                    ru: "🌐 Язык"
                                },
                                actions: [ {
                                    note: "The current state is saved in the slot in order to return after going through the next chain of steps."
                                }, {
                                    slot: "PREV_STATE",
                                    value: "'MAIN_MENU'"
                                }, {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "text",
                        text: {
                            en: "👉 Please, select your language",
                            ru: "👉 Выберите язык"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'en'"
                                }, {
                                    state: "$PREV_STATE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Русский",
                                    ru: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "'ru'"
                                }, {
                                    state: "$PREV_STATE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    note: "Return to the step, specified in the slot"
                                }, {
                                    state: "$PREV_STATE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ABOUT: [ {
                        type: "text",
                        text: {
                            en: "QUDATA\n\n<b>What we do</b>\nThe QuData team develops solutions in analytics, artificial intelligence, data science and big data, addressing innovations and challenges which shape future technologies by promoting and discussing ideas. We help to add value to your business through custom software development, product design, QA and consultancy services.",
                            ru: "QUDATA\n\n<b>Что мы делаем?</b>\nКоманда Qudata разрабатывает программное обеспечение в области аналитики, искусственного интеллекта и науки о данных, уделяя особое внимание инновациям и вызовам, которые формируют технологии будущего, продвигая и обсуждая идеи со специалистами из разных областей, увлеченными и ориентированными на результат. Мы помогаем компаниям повысить ценность своего бизнеса за счет разработки программного обеспечения, проектирования продуктов, контроля качества и консультационных услуг."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📩 Contact Us",
                                    ru: "📩 Контакты"
                                },
                                actions: [ {
                                    state: "CONTACTS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💬 More",
                                    ru: "💬 Подробнее"
                                },
                                actions: [ {
                                    state: "HAVE_A_REQUEST"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CONTACTS: [ {
                        type: "text",
                        text: {
                            en: "📍 <b>Our address</b>:\n53 Voznesenska St. \nDnipro, 49000, Ukraine\n\n🌐 <b>Our website</b>: <a href='https://qudata.com/' target='_blank'>QuData.com</a>\n📞 <b>Our phone</b>: +380952747335\n📬 <b>Our E-mail</b>: <a href='mailto:info@qudata.com'>info@qudata.com</a>\n\n• <b>YouTube channel</b>: <a href='https://www.youtube.com/channel/UCLXENpdTmOFPwZjcu7WLApA' target='_blank'>QuData AI</a>\n• <b>Telegram</b>: <a href='https://t.me/QuBotQuData' target='_blank'>@QuBotQuData</a>\n• <b>WhatsApp</b>: <a href='https://api.whatsapp.com/send/?phone=380674420588&text&app_absent=0' target='_blank'>Go to chat</a>",
                            ru: "📍 <b>Наш адрес</b>:\nул. Вознесенская, 53\nДнепр, Украина, 49000\n\n🌐 <b>Официальный сайт</b>: <a href='https://qudata.com/' target='_blank'>QuData.com</a>\n📞 <b>Наш телефон</b>: +380952747335\n📬 <b>Наша почта</b>: <a href='mailto:info@qudata.com'>info@qudata.com</a>\n\n• <b>YouTube канал</b>: <a href='https://www.youtube.com/channel/UCLXENpdTmOFPwZjcu7WLApA' target='_blank'>QuData AI</a>\n• <b>Telegram</b>: <a href='https://t.me/QuBotQuData' target='_blank'>@QuBotQuData</a>\n• <b>WhatsApp</b>: <a href='https://api.whatsapp.com/send/?phone=380674420588&text&app_absent=0' target='_blank'>Go to chat</a>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Show us on the map",
                                    ru: "👉 Показать Нас на Карте"
                                },
                                actions: [ {
                                    state: "CONTACT_MAP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "ABOUT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MORE_ABOUT_CHATBOTS: [ {
                        type: "text",
                        text: {
                            en: "Let me tell you more about chatbot types and their capabilities",
                            ru: "📌 Сейчас я расскажу Вам про разновидности чат-ботов и их преимущества"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Types of Chatbots",
                                    ru: "Какие бывают чат-боты?"
                                },
                                actions: [ {
                                    state: "PREPARE_BOT_TYPES_BOOK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Advantages for Your Business",
                                    ru: "Основные плюсы чат-ботов"
                                },
                                actions: [ {
                                    state: "PREPARE_ADVANTAGES_BOOK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOPPING_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/shop.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Shopping bot</b>\nA bot for selling any goods able to process payments",
                            ru: "<b>Бот-магазин</b>\nБот для продажи любых товаров с возможностью осуществлять оплату."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "PARSER_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "2/9",
                                    ru: "2/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "DELIVERY_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PARSER_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/parse.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Parser bot</b>\nA bot that collects the information you are interested in from any site or service",
                            ru: "<b>Бот-парсер</b>\nБот, собирающий интересующую Вас информацию с любого сайта или сервиса."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ARTIFICIAL_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "1/9",
                                    ru: "1/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "SHOPPING_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DELIVERY_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/fast-delivery.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Delivery bot</b>\nA bot for automating the processes of ordering and logistics for your product",
                            ru: "<b>Бот доставки</b>\nБот для автоматизации процессов создания заявок и логистики для вашего товара."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "SHOPPING_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "3/9",
                                    ru: "3/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ASSISTANT_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ASSISTANT_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/consultant.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Assistant bot</b>\nA bot answering customer questions and helping to make decisions",
                            ru: "<b>Бот-консультант</b>\nБот, отвечающий на вопросы клиентов и помогающий определиться с решением."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "DELIVERY_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "4/9",
                                    ru: "4/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "FAQ_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/qa.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>FAQ bot</b>\nA bot providing answers to frequently asked questions to help you understand the product",
                            ru: "<b>FAQ бот</b>\nБот, предоставляющий ответы на часто задаваемые вопросы, помогающий разобраться в продукте."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ASSISTANT_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "5/9",
                                    ru: "5/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "CRYPTOCURRENCY_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CRYPTOCURRENCY_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/blockchain.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Cryptocurrency bot</b>\nA bot for the integration of a decentralized blockchain system",
                            ru: "<b>Криптовалютный бот</b>\nБот для интеграции децентрализованной системы блокчейн."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "FAQ_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "6/9",
                                    ru: "6/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "CORPORATE_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CORPORATE_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/corporate.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Corporate bot</b>\nA bot informing new employees about the processes in the company",
                            ru: "<b>Корпоративный бот</b>\nБот, информирующий новых сотрудников о процессах в компании."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "CRYPTOCURRENCY_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "7/9",
                                    ru: "7/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "HORECA_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    HORECA_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/horeca.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>HoReCa bot</b>\nA bot for cafés / bars / restaurants aiming to improve their service quality",
                            ru: "<b>Бот для HoReCa</b>\nБот для кафе/баров/ресторанов по улучшению качества обслуживания."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "CORPORATE_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "8/9",
                                    ru: "8/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ARTIFICIAL_BOT_TYPE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ARTIFICIAL_BOT_TYPE: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            width: 50,
                            url: "https://qudata.com/qubot/im/ts/bot_bot/BotTypes/ai.png"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Artificial Intelligence</b>\nA bot that simulates intelligent behavior and performs logical tasks",
                            ru: "<b>Искусственный интеллект</b>\nБот, имитирующий разумное поведение и выполняющий логические задачи."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "HORECA_BOT_TYPE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "9/9",
                                    ru: "9/9"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "MAYBE_ADVANTAGES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CONTACT_MAP: [ {
                        type: "map",
                        url: '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2040.3295711895955!2d35.03406599873779!3d48.456912549572664!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40dbe31f3f10520d%3A0x504b280cf46565a8!2z0LLRg9C70LjRhtGPINCS0L7Qt9C90LXRgdC10L3RgdGM0LrQsCwgNTEsINCU0L3RltC_0YDQvsyBLCDQlNC90ZbQv9GA0L7Qv9C10YLRgNC-0LLRgdGM0LrQsCDQvtCx0LvQsNGB0YLRjCwgNDkwMDA!5e0!3m2!1sru!2sua!4v1635517644870!5m2!1sru!2sua" width="100%" style="border:0;" allowfullscreen="" loading="lazy"></iframe>',
                        height: "300"
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Show the route",
                                    ru: "👉 Посмотреть Маршрут"
                                },
                                actions: [ {
                                    note: "Open the link in a separate window"
                                }, {
                                    state: "https://google.com/maps/dir/?api=1&destination=48.45614445037599,35.03230596938486"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "CONTACTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_3: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Data measurement</b>\nThe bot lets you track content delivery and user engagement, as well as segment your audience and collect feedback to further optimize your service.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Измеримость данных</b>\nВ чат-боте легко отследить доставку контента, вовлеченность пользователей. Также бот позволяет сегментировать аудиторию и собрать обратную связь от клиентов для улучшения услуг."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "3/6",
                                    ru: "3/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ADVANTAGE_4"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_1: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Meaningful communication</b>\nThe script provides for content personalization, thus every user receives the information they request.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Качественное взаимодействие</b>\nЧат-бот позволяет персонализировать контент для каждого пользователя. Клиенты получают только ту информацию, на которую у них был запрос."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_6"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "1/6",
                                    ru: "1/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ADVANTAGE_2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_2: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Cost-effectiveness</b>\nThe chatbot is a one-time investment cutting down on personnel expenses.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Экономия бюджета</b>\nЧат-бот – это одноразовая инвестиция, которая не предполагает дальнейших расходов на персонал. Бот в автоматическом режиме обрабатывает запросы клиентов 24/7."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "2/6",
                                    ru: "2/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ADVANTAGE_3"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_4: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Lead generation and processing</b>\nThe bot is there 24/7, assisting your customers at each stage of the sales funnel. It also helps to deal with difficult time-consuming customers.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Генерация и «прогрев» лидов</b>\nЧат-бот может работать с аудиторией на всех этапах воронки продаж. Даже ночью, когда реальные менеджеры спят. Кроме того, они помогают отсекать «трудных», отнимающих время клиентов."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_3"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "4/6",
                                    ru: "4/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ADVANTAGE_5"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_5: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Multilingual support</b>\nThe chatbot can work with global audience in international markets. We provide multilingual support for your clients with language selection.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Мультиязычность</b>\nЧат-бот может работать с аудиторией разных национальностей на международных рынках. Для этого мы представляем поддержку мультиязычности для ваших клиентов с возможностью выбора языка."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_4"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "5/6",
                                    ru: "5/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "ADVANTAGE_6"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGE_6: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 The main advantages of chatbots in marketing:\n\n<b>Additional features</b>\nYour company may keep its clientele and reach new audiences by gradually expanding your chatbot functionality.",
                            ru: "🔻 Основные плюсы чат-ботов в маркетинге:\n\n<b>Дополнительные возможности</b>\nПостепенно расширяя функционал, компания может удерживать старых клиентов и привлекать новую аудиторию, вводя новые улучшения по необходимости."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁ ",
                                    ru: "◁ "
                                },
                                actions: [ {
                                    state: "ADVANTAGE_5"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "6/6",
                                    ru: "6/6"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    state: "MAYBE_TYPES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAYBE_TYPES: [ {
                        type: "text",
                        text: {
                            en: "✅ Now that you know about the advantages of chatbots, would you like to learn more about their types?",
                            ru: "✅ Вы узнали основные плюсы чат-ботов, желаете ознакомиться с видами чат-ботов?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✖️ No, thanks",
                                    ru: "✖️ Не интересно"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Yes, please",
                                    ru: "👉 Да, расскажите"
                                },
                                actions: [ {
                                    state: "PARSER_BOT_TYPE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAYBE_ADVANTAGES: [ {
                        type: "text",
                        text: {
                            en: "✅ Now that you know about the types of chatbots, would you like to learn more about their advantages?",
                            ru: "✅ Вы узнали типы чат-ботов, желаете ознакомиться с плюсами чат-ботов?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✖️ No, thanks",
                                    ru: "✖️ Не интересно"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Yes, please",
                                    ru: "👉 Да, расскажите"
                                },
                                actions: [ {
                                    state: "PREPARE_ADVANTAGES_BOOK"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    HAVE_A_REQUEST: [ {
                        type: "actions",
                        actions: [ {
                            note: "We remember the current state in the slot in order to return from a step used in several steps"
                        }, {
                            slot: "PREV_STATE",
                            value: "'HAVE_A_REQUEST'"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "🔻 To assist you better, we need to understand your chatbot requirements.\n\nHave you already submitted a chatbot development request?",
                            ru: "🔻 Нам нужно понимать ваши требования к чат-боту.\n\nПодскажите, Вы уже оформляли у нас заявку на разработку чат-бота?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    slot: "STATE_AFTER_CUSTOMER",
                                    value: '"weWillContact"'
                                }, {
                                    state: "SCR_CUSTOMER_DATA_BEGIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "No",
                                    ru: "Нет"
                                },
                                actions: [ {
                                    state: "START_POLL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_QUESTION_CATEGORY: [ {
                        type: "text",
                        text: {
                            en: "✍️ Select the topic, and we will answer your questions",
                            ru: "✍️ Выберите, что Вас интересует, и мы ответим на Ваши вопросы"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What Info do I Need to Provide?",
                                    ru: "Что мне нужно Вам предоставить?"
                                },
                                actions: [ {
                                    state: "What info do I need to provide?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot Hosting",
                                    ru: "Хостинг Бота"
                                },
                                actions: [ {
                                    state: "Bot hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Legal Issues",
                                    ru: "Правовые Вопросы"
                                },
                                actions: [ {
                                    state: "Legal issues"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Calculate the Cost and Terms",
                                    ru: "Расcчитать Стоимость и Сроки"
                                },
                                actions: [ {
                                    state: "BOT_HAVE_GRAPHICS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На Главную"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Who owns the bot?": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: Who will have the right in the bot, and under whose account will it be registered?\n\n<b>Answer</b>: You will be the bot owner. We only provide services for the development and programming of bot logic.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Кто будет владельцем бота и под чьим аккаунтом он будет зарегистрирован?\n\n<b>Ответ</b>: Владельцем будете лично Вы. Мы со своей стороны предоставляем услуги по созданию и программированию логики бота.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Is the bot really mine?",
                                    ru: "Бот точно мой?"
                                },
                                actions: [ {
                                    state: "Is the bot really mine?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Show your portfolio",
                                    ru: "Примеры работ"
                                },
                                actions: [ {
                                    state: "Show your portfolio"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Are we signing an NDA?",
                                    ru: "Подписываем NDA?"
                                },
                                actions: [ {
                                    state: "Are we signing an NDA?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Who owns the bot?'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Is the bot really mine?": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: How can I make sure that I own the bot?\n\n<b>Answer</b>: The bot is registered under your account.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Как убедиться, что бот будет принадлежать именно мне?\n\n<b>Ответ</b>: Регистрация бота происходит с вашего аккаунта.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Who owns the bot?",
                                    ru: "Кто владелец бота?"
                                },
                                actions: [ {
                                    state: "Who owns the bot?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Show your portfolio",
                                    ru: "Примеры работ"
                                },
                                actions: [ {
                                    state: "Show your portfolio"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Are we signing an NDA?",
                                    ru: "Подписываем NDA?"
                                },
                                actions: [ {
                                    state: "Are we signing an NDA?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бот"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Is the bot really mine?'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Show your portfolio": [ {
                        type: "text",
                        text: {
                            en: '<b>Question</b>: Where can I check your portfolio of chatbots?\n\n<b>Answer</b>: You can find bot samples and demos on our website <a href="https://qudata.com/en/qubot/features/">https://qudata.com/en/qubot/features/"</a>.\n\n✍️ More questions',
                            ru: "<b>Вопрос</b>: Где я могу посмотреть ваши примеры работ по созданным чат-ботам?\n\n<b>Ответ</b>: С примерами работ и демонстрацией работы ботов вы можете ознакомиться на нашем сайте <a href='https://qudata.com/ru/qubot/features/'>https://qudata.com/ru/qubot/features/</a>.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Who owns the bot?",
                                    ru: "Кто владелец бота?"
                                },
                                actions: [ {
                                    state: "Who owns the bot?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Is the bot really mine?",
                                    ru: "Бот точно мой?"
                                },
                                actions: [ {
                                    state: "Is the bot really mine?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Are we signing an NDA?",
                                    ru: "Подписываем NDA?"
                                },
                                actions: [ {
                                    state: "Are we signing an NDA?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Show your portfolio'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Are we signing an NDA?": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: Do you guarantee that you won't share my idea with other clients? Will we sign an NDA with you?\n\n<b>Answer</b>: Yes, we will sign a non-disclosure agreement covering our terms of service.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Как быть уверенным, что моя идея не уйдет другому клиенту? Мы с вами будем подписывать NDA?\n\n<b>Ответ</b>: Мы подписываем c вами договор о неразглашении условий предоставления услуг.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Who owns the bot?",
                                    ru: "Кто владелец бота?"
                                },
                                actions: [ {
                                    state: "Who owns the bot?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Is the bot really mine?",
                                    ru: "Бот точно мой?"
                                },
                                actions: [ {
                                    state: "Is the bot really mine?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Show your portfolio",
                                    ru: "Примеры работ"
                                },
                                actions: [ {
                                    state: "Show your portfolio"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Are we signing an NDA?'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Legal issues": [ {
                        type: "text",
                        text: {
                            en: "💬 You can ask our bot questions, and it will give you answers from our knowledge base.\n\nThe bot will inform you about hosting, development time and cost, and our company.\n\n✍️ Type your question or press the buttons",
                            ru: "💬 Вы можете задавать вопросы боту, и он ответ вам из нашей базы знаний.\n\nБот проконсультирует Вас по вопросам хостинга, стоимости, времени, компании.\n\n✍️ Задавайте свой вопрос, написав его вручную или выбрав по кнопке"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Who owns the bot?",
                                    ru: "Кто владелец бота?"
                                },
                                actions: [ {
                                    state: "Who owns the bot?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Is the bot really mine?",
                                    ru: "Бот точно мой?"
                                },
                                actions: [ {
                                    state: "Is the bot really mine?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Show your portfolio",
                                    ru: "Примеры работ"
                                },
                                actions: [ {
                                    state: "Show your portfolio"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Are we signing an NDA?",
                                    ru: "Подписываем NDA?"
                                },
                                actions: [ {
                                    state: "Are we signing an NDA?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Legal issues'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "What info do I need to provide?": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: What info do I need to provide?\n\n<b>Answer</b>: What we need for development:\n\n1. Tests of bot message scripts.\n2. Questions the bot is to ask your clients.\n3. Graphics used in the bot.\n4. Description of the bot functionality (technical task)\n\n✍️ Select the topic, and we will answer your questions",
                            ru: "<b>Вопрос</b>: Что мне нужно вам предоставить?\n\n<b>Ответ</b>: Основное, что нам требуется от вас получить:\n\n1. Тесты сценариев сообщений бота.\n2. Вопросы задаваемые вашим клиентам нашим чат-ботом.\n3. Графика используемая в боте.\n4. Описание функционала бота (техническое задание)\n\n✍️ Выберите, что Вас интересует, и мы ответим на ваши вопросы"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot Hosting",
                                    ru: "Хостинг Бота"
                                },
                                actions: [ {
                                    state: "Bot hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Legal Issues",
                                    ru: "Правовые Вопросы"
                                },
                                actions: [ {
                                    state: "Legal issues"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Calculate the Cost and Terms",
                                    ru: "Расcчитать Стоимость и Сроки"
                                },
                                actions: [ {
                                    state: "BOT_HAVE_GRAPHICS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Bot hosting": [ {
                        type: "text",
                        text: {
                            en: "💬 You can ask our bot questions, and it will give you answers from our knowledge base.\n\nThe bot will inform you about hosting, development time and cost, and our company.\n\n✍️ Type your question or press the buttons",
                            ru: "💬 Вы можете задавать вопросы боту, и он ответ вам из нашей базы знаний.\n\nБот проконсультирует Вас по вопросам хостинга, стоимости, времени, компании.\n\n✍️ Задавайте свой вопрос, написав его вручную или выбрав по кнопке"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение Бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Bot hosting'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BOT_HAVE_GRAPHICS: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_MESSENGERS",
                            value: '"PRE_SELECT_LANGUAGES"'
                        }, {
                            slot: "SS_LANGUAGES",
                            value: '"AMOUNT_OF_QUESTIONS"'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Having all the information needed\n\n• texts\n• graphics\n• faqs\n• technical task",
                            ru: "Наличие всей необходимой информации\n\n• тексты\n• графика\n• вопросы и ответы\n• техническое задание"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    slot: "PRICE",
                                    value: "1000"
                                }, {
                                    slot: "DAYS",
                                    value: "1"
                                }, {
                                    state: "HAVE_EXTERNAL_SOURCES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "No, something is missing",
                                    ru: "Нет"
                                },
                                actions: [ {
                                    slot: "PRICE",
                                    value: "2000"
                                }, {
                                    slot: "DAYS",
                                    value: "2"
                                }, {
                                    state: "HAVE_EXTERNAL_SOURCES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "What is hosting?": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: What is hosting?\n\n<b>Answer</b>: Hosting is a service for providing resources for placing information on a server that constantly has access to the network. \n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Что такое хостинг?\n\n<b>Ответ</b>: Хостинг — услуга по предоставлению ресурсов для размещения информации на сервере, постоянно имеющем доступ к сети. ✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'What is hosting?'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ],
                                kind: "button"
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Hosting fee": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: How much does the hosting cost?\n\n<b>Answer</b>: The hosting fee depends on the processing power of the server, where the bot will be hosted. Our rates range $ 19 - $&nbps;99. Other companies offer different prices.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Сколько стоит оплата хостинга?\n\n<b>Ответ</b>: Зависит от самого хостинга и вычислительной мощности сервера, на котором будет располагаться бот. У нас от 19$ до 99$. В других фирмах иные цены.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Hosting fee'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Annual hosting": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: May I pay for hosting a year in advance?\n\n<b>Answer</b>: If you intend to use our servers, yes, we can guarantee such a long-term hosting. If the bot is located elsewhere, it will depend on the hosting terms and conditions.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Хостинг можно оплатить сразу на год?\n\n<b>Ответ</b>: При размещении бота на наших сервера мы сможем обеспечить хостинг на столь продолжительное время. Если выберите иной способ размещения бота, зависит от самого хостинга.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    state: "START_POLL"
                                }, {
                                    slot: "PREV_STATE",
                                    value: "'Annual hosting'"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Annual hosting'"
                                }, {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "I forgot to renew the hosting": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: What happens if I forget to renew my hosting?\n\n<b>Answer</b>: It depends on the hosting company. Some of them warn their that data recovery is impossible. You should pay special attention to the terms of service.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Что будет если я забуду продлить хостинг?\n\n<b>Ответ</b>: Зависит от самого хостинга. Некоторые хостинг компании заранее уведомляют о невозможности восстановления данных. Необходимо внимательно ознакомиться с правилами предоставления услуг.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'I forgot to renew the hosting'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Bot location": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: Where will the bot be hosted?\n\n<b>Answer</b>: The bot may be hosted either on your own servers, or, if that's impossible, on our servers.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Где будет располагаться бот?\n\n<b>Ответ</b>: Бот может располагаться как на Ваших собственных серверах, так и (при отсутствии данной возможности) на наших серверах.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Does the hosting work around the clock?",
                                    ru: "Бот работает круглосуточно?"
                                },
                                actions: [ {
                                    state: "Does the bot work 24/7"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Bot location'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    "Does the bot work 24/7": [ {
                        type: "text",
                        text: {
                            en: "<b>Question</b>: Does the hosting work around the clock?\n\n<b>Answer</b>: Yes, it's objective is to keep the service up and running 24/7.\n\n✍️ More questions",
                            ru: "<b>Вопрос</b>: Хостинг работает круглосуточно?\n\n<b>Ответ</b>: Да, основная его задача - поддерживать работоспособность сервиса круглосуточно.\n\n✍️ Спрашивайте ещё"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Bot location",
                                    ru: "Расположение бота"
                                },
                                actions: [ {
                                    state: "Bot location"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What is hosting?",
                                    ru: "Хостинг - что это?"
                                },
                                actions: [ {
                                    state: "What is hosting?"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Hosting fee",
                                    ru: "Оплата хостинга"
                                },
                                actions: [ {
                                    state: "Hosting fee"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Annual hosting",
                                    ru: "Хостинг на год"
                                },
                                actions: [ {
                                    state: "Annual hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "I forgot to renew the hosting",
                                    ru: "Забыли продлить хостинг?"
                                },
                                actions: [ {
                                    state: "I forgot to renew the hosting"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Submit request for a chatbot",
                                    ru: "👉 Оформить заявку на чат-бота"
                                },
                                actions: [ {
                                    slot: "PREV_STATE",
                                    value: "'Does the bot work 24/7'"
                                }, {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "SELECT_QUESTION_CATEGORY"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_MESSENGERS: [ {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: "'SELECT_MESSENGERS'"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<b>What communication channels need a chatbot support?</b>",
                            ru: "Какие каналы коммуникации вам нужны?\n\n"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<i>Choose at least one and then tap "👉 Next".\nClick to select</i>',
                            ru: "<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Telegram",
                                    ru: "Telegram"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Viber",
                                    ru: "Viber"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Instagram",
                                    ru: "Instagram"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Facebook Messenge",
                                    ru: "Facebook Messenge"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "WhatsApp",
                                    ru: "WhatsApp"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "WebSite",
                                    ru: "WebSite"
                                },
                                actions: [],
                                kind: "check",
                                checked: !0
                            } ]
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Далее"
                                },
                                actions: [ {
                                    script: '// INITIALIZE LIST\nCommunication_Channels = [\n\t{name: "WebChat"},\n\t{name: "Facebook Messenger"},\n\t{name: "Viber"},\n\t{name: "Telegram"},\n\t{name: "WhatsApp"},\n\t{name: "Live Chat"},\n]\n\n// GET CHECKS\nCHECKS = get_check()\ncountChecks = 0\nfor (check in CHECKS) {\n\tif (check == 1) {\n\t\tcountChecks++\n\t}\n}\n\n// CHECK NONE CHOOSEN\nif (countChecks == 0) {\n\tgoto("CHECK_WRONG_CHECKBOX")\n}\n\n// GENERATE CHOOSEN RESULT STRING\nLIST = Communication_Channels\ni = 0\nfirstEl = true\nrezStr = ""\nfor (check in CHECKS) { \n  if (check == 1) {\n    if (firstEl) {\n      rezStr = rezStr + "  • " + LIST[i].name\n      firstEl = false\n    } else {\n\t\t\trezStr = rezStr + "<br>  • " + LIST[i].name\n\t\t}\n  }\n  i++\n}\nrezStr_MESSENGERS = rezStr\n\nif (countChecks > 0) {\n\tPRICE += countChecks * 500\n\tDAYS += countChecks\n}\n\n// CONTINUE\ngoto("PH_MESSENGERS")'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    HAVE_EXTERNAL_SOURCES: [ {
                        type: "text",
                        text: {
                            en: "Availability of external sources\n\n1. Yes - I already have a customer base, or CRM, or other sources\n2. No - It's a brand-new project",
                            ru: "Наличие внешних источников\n\n1. Да - У меня уже есть база клиентов, или CRM, или другие источники\n2. Нет - Новый чистый проект"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    slot: "PRICE",
                                    value: "PRICE + 2000"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 2"
                                }, {
                                    state: "SELECT_MESSENGERS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "No",
                                    ru: "Нет"
                                },
                                actions: [ {
                                    slot: "PRICE",
                                    value: "PRICE + 1000"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                }, {
                                    state: "SELECT_MESSENGERS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    AMOUNT_OF_QUESTIONS: [ {
                        type: "text",
                        text: {
                            en: "Logic complexity: amount of questions",
                            ru: "Сложность логики: количество вопросов"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Up to 15",
                                    ru: "До 15"
                                },
                                actions: [ {
                                    state: "DIALOG_DEPTH"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 150"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Up to 30",
                                    ru: "До 30"
                                },
                                actions: [ {
                                    state: "DIALOG_DEPTH"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 300"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Up to 50",
                                    ru: "До 50"
                                },
                                actions: [ {
                                    state: "DIALOG_DEPTH"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 500"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DIALOG_DEPTH: [ {
                        type: "text",
                        text: {
                            en: "Logic complexity: dialog length (depth), level of nesting",
                            ru: "Сложность логики: длина (глубина) диалогов, уровень вложености диалога"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Up to 2",
                                    ru: "До 2"
                                },
                                actions: [ {
                                    state: "DATA_RECORDING"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 150"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Up to 4",
                                    ru: "До 4"
                                },
                                actions: [ {
                                    state: "DATA_RECORDING"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 300"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Up to 6",
                                    ru: "До 6"
                                },
                                actions: [ {
                                    state: "DATA_RECORDING"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 500"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DATA_RECORDING: [ {
                        type: "text",
                        text: {
                            en: "Logic complexity: data recording",
                            ru: "Сложность логики: запись данных"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Required",
                                    ru: "Необходимо"
                                },
                                actions: [ {
                                    state: "HAVE_DATABASE_OR_CRM"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 300"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 2"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Not necessary",
                                    ru: "Не Нужно"
                                },
                                actions: [ {
                                    state: "HAVE_DATABASE_OR_CRM"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    HAVE_DATABASE_OR_CRM: [ {
                        type: "text",
                        text: {
                            en: "Logic complexity: reading data from your database, CRM",
                            ru: "Сложность логики: чтение данных из базы данных, CRM"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Required",
                                    ru: "Необходимо"
                                },
                                actions: [ {
                                    state: "PROJECT_URGENCY"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Not necessary",
                                    ru: "Не Нужно"
                                },
                                actions: [ {
                                    state: "PROJECT_URGENCY"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 300"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 2"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PROJECT_URGENCY: [ {
                        type: "text",
                        text: {
                            en: "Project urgency",
                            ru: "Срочность проекта"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Extremely urgent",
                                    ru: "Очень Срочно!"
                                },
                                actions: [ {
                                    state: "HOSTING_FOR_BOT"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 2000"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "As soon as possible",
                                    ru: "Как Можно Скорее"
                                },
                                actions: [ {
                                    state: "HOSTING_FOR_BOT"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 1000"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 2"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "No rush",
                                    ru: "Не Горит"
                                },
                                actions: [ {
                                    state: "HOSTING_FOR_BOT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    HOSTING_FOR_BOT: [ {
                        type: "text",
                        text: {
                            en: "Bot hosting\n\n1. Hosting - our computing power\n2. On your side - on your servers with monthly fee",
                            ru: "Размещение бота\n\n1. Хостинг - свои вычислительные мощности\n2. У вас - на ваших серверах, оплачивая месячный тариф"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Own hosting",
                                    ru: "Свой Хостинг"
                                },
                                actions: [ {
                                    state: "BOT_INSTALLATION"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Your server",
                                    ru: "У Вас"
                                },
                                actions: [ {
                                    state: "BOT_PRICE"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 150"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BOT_INSTALLATION: [ {
                        type: "text",
                        text: {
                            en: "Hosting a bot on your servers requires its prior installation. Will you do it yourself?",
                            ru: "Размещение бота на ваших серверах требует его установки. Вы это сделаете самостоятельно?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes, we will",
                                    ru: "Установим Самостоятельно"
                                },
                                actions: [ {
                                    state: "BOT_PRICE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Installation required",
                                    ru: "Требуется Установка"
                                },
                                actions: [ {
                                    state: "BOT_PRICE"
                                }, {
                                    slot: "PRICE",
                                    value: "PRICE + 500"
                                }, {
                                    slot: "DAYS",
                                    value: "DAYS + 1"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BOT_PRICE: [ {
                        type: "text",
                        text: {
                            en: "Bot development according to your criteria.\n💵 Total cost: $PRICE USD\n🗓 Development time: $DAYS days\n\nSubmit an application to create a chatbot for more information",
                            ru: "Разработка бота по вашим критериям.\n💵 Итоговая стоимость: $PRICE USD\n🗓 Срок: $DAYS дней\n\nОтправьте заявку на создание чат бота для получения более подробной информации"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Send Request",
                                    ru: "👉 Отправить Заявку"
                                },
                                actions: [ {
                                    state: "START_POLL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    END_REQUEST: [ {
                        type: "actions",
                        actions: [ {
                            slot: "RANDOM",
                            value: "randint(300, 999)"
                        }, {
                            action: "save",
                            storage: "qudata",
                            key: "Num",
                            value: '{\n  "num"  : RANDOM,\n  "name" : NAME,\n  "email": CUSTOMER_EMAIL,\n  "phone": CUSTOMER_PHONE,\n  "Chatbots Types": rezStrCHATBOT_AREA,\n  "Messangers": rezStr_MESSENGERS,\n  "Languages": rezStr_LANGUAGES,\n  "Have Site": HaveSite,\n  "Domain": domainSiteLink,\n\t"Desc Niche": descNiche,\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "A chatbot development request №$RANDOM has been successfully generated.\n\n👤 Our manager will review the provided information and will contact you shortly.",
                            ru: "✅ Успешно сформирован запрос на разработку чат-бота №$RANDOM.\n\n👤 Наш менеджер изучит вашу потребность и свяжется с Вами в ближайшее время!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START_POLL: [ {
                        type: "actions",
                        actions: [ {
                            slot: "SS_MESSENGERS",
                            value: '"PRE_SELECT_LANGUAGES"'
                        }, {
                            slot: "SS_LANGUAGES",
                            value: '"enterSiteLink"'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Please, submit a request and tell us more about your business.",
                            ru: "Я собираюсь задать вам несколько вопросов относительно разработки чат-бота"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Вернуться"
                                },
                                actions: [ {
                                    state: "$PREV_STATE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "✅ OK",
                                    ru: "✅ Хорошо!"
                                },
                                actions: [ {
                                    slot: "PRICE",
                                    value: "0"
                                }, {
                                    slot: "DAYS",
                                    value: "0"
                                }, {
                                    state: "PRE_SELECT_CHATBOT_AREA"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHECK_WRONG_CHECKBOX: [ {
                        type: "text",
                        text: {
                            en: "⚠️ Please, choose at least one option",
                            ru: "⚠️ Пожалуйста, выберите хотя бы один вариант"
                        }
                    }, {
                        type: "timer",
                        time: "1400",
                        actions: [ {
                            state: "$PREV_STATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCR_CUSTOMER_DATA_BEGIN: [ {
                        type: "actions",
                        actions: [ {
                            note: "Settings by customer manager.\n\nSTATE_AFTER_CUSTOMER - The state where the user will navigate to after filling in the data.\nbuttonBackInCustomer (true/false) - The button to exit the client data collection scenario."
                        }, {
                            if: "not CUSTOMER_PHONE",
                            actions: [ {
                                goto: "ENTER_CUSTOMER_PHONE"
                            } ]
                        }, {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "QUERY_EMAIL"
                            } ]
                        }, {
                            goto: "EXIT_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_GREET: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "In case we need to contact you, would you prefer to be reached by phone or email?",
                            ru: "Если нам понадобится связаться с вами, вы предпочитаете, чтобы с вами связались по телефону или по электронной почте?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "📞 Phone",
                                    ru: "📞 Телефон"
                                },
                                actions: [ {
                                    state: "ENTER_CUSTOMER_PHONE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "💻 Email",
                                    ru: "💻 Почта"
                                },
                                actions: [ {
                                    state: "QUERY_EMAIL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_CUSTOMER_PHONE: [ {
                        type: "text",
                        text: {
                            en: "Please, enter your phone number in the international format: <b>+12121234567</b>",
                            ru: "Пожалуйста, введите свой номер телефона в международном формате: <b>+12121234567</b>"
                        }
                    }, {
                        type: "input",
                        kind: "phone",
                        actions: [ {
                            state: "CUSTOMER_PHONE_WRONG"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "CUSTOMER_PHONE",
                                value: "INPUT"
                            }, {
                                goto: "CUSTOMER_PHONE_RIGHT"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_PHONE_RIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "I saved your phone number: $CUSTOMER_PHONE\n\nThanks! 😊",
                            ru: "Я сохранил ваш номер телефона: $CUSTOMER_PHONE\n\nСпасибо! 😊"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            if: "not CUSTOMER_EMAIL",
                            actions: [ {
                                goto: "QUERY_EMAIL"
                            } ]
                        }, {
                            goto: "SCR_CUSTOMER_DATA_END"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_PHONE_WRONG: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "The entered phone number is invalid.\n\nTry entering the number in the international format: <b>+12121234567</b>",
                            ru: "Введенный номер телефона недействителен.\n\nПопробуйте ввести номер в международном формате: <b>+12121234567</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_CUSTOMER_PHONE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    QUERY_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Would you mind sharing your email?\n\nSometimes we will send you information about our discounts and promotions.",
                            ru: "Не могли бы вы поделиться своей электронной почтой?\n\nИногда мы будем присылать вам информацию о наших скидках и рекламных акциях."
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_CUSTOMER_EMAIL"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CUSTOMER_EMAIL_WRONG: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "The entered email seems invalid. \n\nPlease, try using the <b>name@inbox.com</b> format",
                            ru: "Введенный адрес электронной почты кажется недействительным.\n\nПожалуйста, попробуйте использовать формат <b>name@inbox.com</b>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_CUSTOMER_EMAIL"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_CUSTOMER_EMAIL: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your email address in the format <b>name@inbox.com</b>",
                            ru: "Пожалуйста, введите свой адрес электронной почты в формате <b>name@inbox.com</b>"
                        }
                    }, {
                        type: "input",
                        kind: "email",
                        actions: [ {
                            state: "CUSTOMER_EMAIL_WRONG"
                        }, {
                            if: "INPUT",
                            actions: [ {
                                slot: "CUSTOMER_EMAIL",
                                value: "INPUT"
                            }, {
                                goto: "CUSTOMER_EMAIL_RIGHT"
                            } ]
                        } ]
                    } ],
                    CUSTOMER_EMAIL_RIGHT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "I saved your Email: $CUSTOMER_EMAIL\n\nThanks! 😊",
                            ru: "Я сохранил ваш адрес электронной почты: $CUSTOMER_EMAIL\n\nСпасибо! 😊"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "SCR_CUSTOMER_DATA_END"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCR_CUSTOMER_DATA_END: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you, $NAME",
                            ru: "Спасибо, $NAME"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Cheers",
                                    ru: "Окей"
                                },
                                actions: [ {
                                    state: "EXIT_CUSTOMER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EXIT_CUSTOMER: [ {
                        type: "actions",
                        actions: [ {
                            goto: "$STATE_AFTER_CUSTOMER"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterSiteLink: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Do you have a corporate website?",
                            ru: "У вас есть сайт компании?\n"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Yes",
                                    ru: "Да"
                                },
                                actions: [ {
                                    slot: "HaveSite",
                                    value: '"Yes"'
                                }, {
                                    state: "enterDomainSiteLink"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "No",
                                    ru: "Нет"
                                },
                                actions: [ {
                                    slot: "HaveSite",
                                    value: '"No"'
                                }, {
                                    slot: "domainSiteLink",
                                    value: '"None"'
                                }, {
                                    state: "PH_SiteLink_NO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterDesc: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Why do you need a chatbot?</b>\n\n<i>• What tasks do you expect it to solve?\n• What basic functionality does it have to support?</i>",
                            ru: "<b>Для чего вам чат-бот?</b>\n\n<i>• Какие задачи хотели бы закрыть с его помощью?\n• Какую минимальную задачу должен решать чат-бот?</i>"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            slot: "descNiche",
                            value: "INPUT"
                        }, {
                            state: "GOTO_CUSTOMER_REQUEST"
                        } ]
                    } ],
                    weWillContact: [ {
                        type: "actions",
                        actions: [ {
                            slot: "RANDOM",
                            value: "randint(300, 999)"
                        }, {
                            action: "save",
                            storage: "qudata",
                            key: "Num",
                            value: '{\n  "name" : NAME,\n  "email": CUSTOMER_EMAIL,\n  "phone": CUSTOMER_PHONE,\n}'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Thank you for the information provided! We will contact you shortly.",
                            ru: "👍 Благодарим за предоставленную информацию! Мы свяжемся с вами!"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "✅ Thanks!",
                                    ru: "✅ Спасибо!"
                                },
                                actions: [ {
                                    state: "MAIN_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BOT_TYPES_BOOK: [ {
                        type: "actions",
                        actions: [ {
                            script: "if (INDEX == LEN - 1) {\n goto('MAYBE_ADVANTAGES')\n}"
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        }, {
                            script: "image(URL + BOT_TYPES_LIST[INDEX].im)"
                        }, {
                            script: "pagesCounter = (INDEX + 1) + '/' + LEN"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "$BOT_TYPES_LIST[INDEX].desc[LANGUAGE]",
                            ru: "$BOT_TYPES_LIST[INDEX].desc[LANGUAGE]"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    script: "INDEX--\n\nif (INDEX < 0) {\n\tINDEX = LEN - 1\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "{INDEX + 1}",
                                    ru: "{INDEX + 1}"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    script: "INDEX++\n\nif (INDEX >= LEN) {\n\tINDEX = 0\n}"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Назад"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADVANTAGES_BOOK: [ {
                        type: "actions",
                        actions: [ {
                            script: "if (INDEX == LEN - 1) {\n goto('MAYBE_TYPES')\n}"
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "-1"
                        }, {
                            slot: "pagesCounter",
                            value: '(INDEX + 1) + "/" + LEN'
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "$ADVANTAGES_LIST[INDEX].desc[LANGUAGE]",
                            ru: "$ADVANTAGES_LIST[INDEX].desc[LANGUAGE]"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "◁",
                                    ru: "◁"
                                },
                                actions: [ {
                                    script: "INDEX--\n\nif (INDEX < 0) {\n\tINDEX = LEN - 1\n}"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "{INDEX + 1}",
                                    ru: "{INDEX + 1}"
                                },
                                actions: []
                            }, {
                                type: "button",
                                button: {
                                    en: "▷",
                                    ru: "▷"
                                },
                                actions: [ {
                                    script: "INDEX++\n\nif (INDEX >= LEN) {\n\tINDEX = 0\n}"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⬅️ Back",
                                    ru: "⬅️ Назад"
                                },
                                actions: [ {
                                    state: "MORE_ABOUT_CHATBOTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PREPARE_BOT_TYPES_BOOK: [ {
                        type: "actions",
                        actions: [ {
                            slot: "URL",
                            value: '"https://qudata.com/qubot/im/ts/bot_bot/BotTypes/"'
                        }, {
                            script: 'BOT_TYPES_LIST = [\n\t{im: "parse.png",    \t\t\t\tdesc: {en: "<b>Parser bot</b><br><br>A bot that collects the information you are interested in from any site or service", ru: \'<b>Бот-парсер</b><br><br>Бот, который собирает интересующую вас информацию с любого сайта или сервиса.\'}},\n\t{im: "shop.png", \t\t\t\t\t\tdesc: {en: "<b>Shopping bot</b><br><br>A bot for selling any goods able to process payments", ru: \'<b>Shopping bot</b><br><br>Бот для продажи любых товаров, способный обрабатывать платежи\' }},\n\t{im: "fast-delivery.png",   desc: {en: "<b>Delivery bot</b><br><br>A bot for automating the processes of ordering and logistics for your product", ru: \'<b>Бот для доставки</b><br><br>Бот для автоматизации процессов заказа и логистики вашего продукта\' }},\n\t{im: "consultant.png",  \t\tdesc: {en: "<b>Assistant bot</b><br><br>A bot answering customer questions and helping to make decisions", ru: \'<b>Бот-помощник</b><br><br>Бот, отвечающий на вопросы клиентов и помогающий принимать решения\' }},\n\t{im: "qa.png",   \t\t\t\t\t\tdesc: {en: "<b>FAQ bot</b><br><br>A bot providing answers to frequently asked questions to help you understand the product", ru: \'<b>Бот для часто задаваемых вопросов</b><br><br>Бот, предоставляющий ответы на часто задаваемые вопросы, чтобы помочь вам понять продукт.\' }},\n\t{im: "blockchain.png",   \t\tdesc: {en: "<b>Cryptocurrency bot</b><br><br>A bot for the integration of a decentralized blockchain system", ru: \'<b>Бот для часто задаваемых вопросов</b><br><br>Бот, предоставляющий ответы на часто задаваемые вопросы, чтобы помочь вам понять продукт.\' }},\n\t{im: "corporate.png",   \t\tdesc: {en: "<b>Corporate bot</b><br><br>A bot informing new employees about the processes in the company", ru: \'<b>Корпоративный бот</b><br><br>Бот, информирующий новых сотрудников о процессах в компании\' }},\n\t{im: "horeca.png",   \t\t\t\tdesc: {en: "<b>HoReCa bot</b><br><br>A bot for cafés / bars / restaurants aiming to improve their service quality", ru: \'<b>Бот HoReCa</b><br><br>Бот для кафе/баров/ресторанов с целью улучшения качества обслуживания\' }},\n\t{im: "ai.png",   \t\t\t\t\t\tdesc: {en: "<b>Artificial Intelligence</b><br><br>A bot that simulates intelligent behavior and performs logical tasks", ru: \'<b>Искусственный интеллект</b><br><br>Бот, имитирующий интеллектуальное поведение и выполняющий логические задачи.\' }},\n]\n\nLEN = BOT_TYPES_LIST.length\nINDEX = 0'
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "BOT_TYPES_BOOK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PREPARE_ADVANTAGES_BOOK: [ {
                        type: "actions",
                        actions: [ {
                            script: 'ADVANTAGES_LIST = [\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Meaningful communication</b><br> The script provides for content personalization, thus every user receives the information they request.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Содержательное общение</b><br> Скрипт предусматривает персонализацию контента, благодаря чему каждый пользователь получает запрашиваемую информацию.\'}},\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Cost-effectiveness</b><br> The chatbot is a one-time investment cutting down on personnel expenses.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Экономичность</b><br> Чат-бот — это разовая инвестиция, сокращающая расходы на персонал.\'}},\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Data measurement</b><br> The bot lets you track content delivery and user engagement, as well as segment your audience and collect feedback to further optimize your service.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Измерение данных</b><br> Бот позволяет отслеживать доставку контента и вовлеченность пользователей, а также сегментировать аудиторию и собирать отзывы для дальнейшей оптимизации оказание услуг.\'}},\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Lead generation and processing</b><br> The bot is there 24/7, assisting your customers at each stage of the sales funnel. It also helps to deal with difficult time-consuming customers.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Генерация и обработка лидов</b><br> Бот работает круглосуточно и без выходных, помогая вашим клиентам на каждом этапе воронки продаж. Это также помогает иметь дело с трудными клиентами, отнимающими много времени.\'}},\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Multilingual</b><br> The chatbot can work with global audience in international markets. We provide multilingual support for your clients with language selection.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Многоязычность</b><br> Чат-бот может работать с глобальной аудиторией на международных рынках. Мы обеспечиваем многоязычную поддержку для ваших клиентов с выбором языка.\'}},\n\t{im: "",    desc: {en: "The main advantages of chatbots in marketing: <br><br><b>Additional features</b><br> Your company may keep its clientele and reach new audiences by gradually expanding your chatbot functionality.", ru: \'Основные преимущества чат-ботов в маркетинге: <br><br><b>Дополнительные функции</b><br> Ваша компания может сохранить свою клиентуру и привлечь новую аудиторию, постепенно расширяя функциональность чат-бота.\'}},\n]\n\nLEN = ADVANTAGES_LIST.length\nINDEX = 0'
                        } ]
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ADVANTAGES_BOOK"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SHOW_CHECK_BUTTONS: [ {
                        type: "actions",
                        actions: [ {
                            script: 'for(i, item in checks)\n{\n  buttons()\n  if(item.check)\n  {\n    button("✅ " + item.title[LANGUAGE])\n    {\n      checks[i].check = false\n    }\n  }\n  else\n  {\n    button("◻️ " + item.title[LANGUAGE])\n    {\n      checks[i].check = true\n    }\n  }\n}'
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_SELECT_LANGUAGES: [ {
                        type: "actions",
                        actions: [ {
                            script: '// INITIALIZE LIST\nLANGUAGES = [\n\t{title: {en: "English", ru: "English"}, check: false},\n\t{title: {en: "Spanish", ru: "Spanish"}, check: false},\n\t{title: {en: "German", ru: "German"}, check: false},\n\t{title: {en: "French", ru: "French"}, check: false},\n\t{title: {en: "Ukrainian", ru: "Ukrainian"}, check: false},\n\t{title: {en: "Japanese", ru: "Japanese"}, check: false},\n\t{title: {en: "Russian", ru: "Russian"}, check: false},\n]\nchecks = LANGUAGES'
                        }, {
                            goto: "SELECT_LANGUAGES"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_LANGUAGES: [ {
                        type: "text",
                        text: {
                            en: "🔻 What languages should the chatbot support?\n\nClick to select",
                            ru: "🔻 Какие языки должен поддерживать чат-бот?\n\n"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<i>Select at least one option</i>",
                            ru: "<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: "'SELECT_LANGUAGES'"
                        }, {
                            script: "run('SHOW_CHECK_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Далее"
                                },
                                actions: [ {
                                    script: '// GET CHECKS\ncountChecks = 0\nfor(item in checks) {\n\tif (item.check) {\n\t\tcountChecks++\n\t}\n}\n\n// CHECK NONE CHOOSEN\nif (countChecks == 0) {\n\tgoto("CHECK_WRONG_CHECKBOX")\n}\n\n// GENERATE CHOOSEN RESULT STRING\ni = 0\nfirstEl = true\nrezStr = ""\nfor (item in checks) { \n  if (item.check == 1) {\n    if (firstEl) {\n      rezStr += "  • " + item.title[LANGUAGE]\n      firstEl = false\n    } else {\n\t\t\trezStr += "<br>  • " + item.title[LANGUAGE]\n\t\t}\n  }\n  i++\n}\nrezStr_LANGUAGES = rezStr\n\nif (countChecks > 0) {\n\tPRICE += countChecks * 700\n\tDAYS += countChecks\n}\n\n// CONTINUE\ngoto("PH_SELECT_LANGUAGE")'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_NEW_ITEM: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✍️ Enter other option",
                            ru: "✍️ Введите свой вариант"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            script: "for(item in checks) {\n\tif (INPUT == item.title[LANGUAGE]) {\n\t\trepeat = true\n\t}\n}\n\nif (repeat) {\n\tgoto('ADD_NEW_ITEM_IF_REPEAT')\n} else {\n\tchecks.push({title: {en: INPUT, ru: INPUT}, check: true})\n}"
                        }, {
                            goto: "$PREV_STATE"
                        } ]
                    } ],
                    ADD_NEW_ITEM_IF_REPEAT: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ This option already exists, please, re-enter",
                            ru: "⚠️ Этот вариант уже существует, повторите ввод"
                        }
                    }, {
                        type: "timer",
                        time: "2000",
                        actions: [ {
                            state: "$PREV_STATE"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SELECT_CHATBOT_AREAS: [ {
                        type: "text",
                        text: {
                            en: "🔻 Why do you need a chatbot?\n\nClick to select",
                            ru: "Для чего вам чат-бот?\n\n"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<i>Select at least one option</i>",
                            ru: "<i>Выберите хотя бы один и нажмите «👉 Далее».\nНажмите, чтобы выбрать</i>"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            clear: "0"
                        }, {
                            slot: "PREV_STATE",
                            value: "'SELECT_CHATBOT_AREAS'"
                        }, {
                            script: "run('SHOW_CHECK_BUTTONS')"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "<hr>",
                            ru: "<hr>"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "➕ Add",
                                    ru: "➕ Добавить"
                                },
                                actions: [ {
                                    state: "ADD_NEW_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "👉 Next",
                                    ru: "👉 Далее"
                                },
                                actions: [ {
                                    script: '// GET CHECKS\ncountChecks = 0\nfor(item in checks) {\n\tif (item.check) {\n\t\tcountChecks++\n\t}\n}\n\n// CHECK NONE CHOOSEN\nif (countChecks == 0) {\n\tgoto("CHECK_WRONG_CHECKBOX")\n}\n\n// GENERATE CHOOSEN RESULT STRING\ni = 0\nfirstEl = true\nrezStr = ""\nfor (item in checks) { \n  if (item.check == 1) {\n    if (firstEl) {\n      rezStr += "  • " + item.title[LANGUAGE]\n      firstEl = false\n    } else {\n\t\t\trezStr += "<br>  • " + item.title[LANGUAGE]\n\t\t}\n  }\n  i++\n}\nrezStrCHATBOT_AREA = rezStr\n\n// CONTINUE\ngoto("PH_CHATBOT_AREA")'
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PRE_SELECT_CHATBOT_AREA: [ {
                        type: "actions",
                        actions: [ {
                            script: '// INITIALIZE LIST\nCHATBOT_AREA = [\n\t{title: {en: "HR", ru: "HR"}, check: false},\n\t{title: {en: "Technical Support", ru: "Тех. поддержка"}, check: false},\n\t{title: {en: "Appointment Scheduler", ru: "Запись Клиентов на Время"}, check: false},\n\t{title: {en: "Company Info", ru: "Инфо о компании"}, check: false},\n\t{title: {en: "Sales", ru: "Продажи"}, check: false},\n\t{title: {en: "Time Tracking", ru: "Учет рабочего времени"}, check: false},\n\t{title: {en: "Quests and Polls", ru: "Квесты и опросы"}, check: false},\n\t{title: {en: "Data Collection", ru: "Сбор Информации"}, check: false},\n\t{title: {en: "Processing of Applications", ru: "Обработка заявок"}, check: false},\n]\nchecks = CHATBOT_AREA'
                        }, {
                            goto: "SELECT_CHATBOT_AREAS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PH_CHATBOT_AREA: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You selected:</b>\n\n$rezStrCHATBOT_AREA",
                            ru: "✅ <b>Вы выбрали:</b>\n\n$rezStrCHATBOT_AREA"
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "SELECT_MESSENGERS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PH_MESSENGERS: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You selected:</b>\n\n$rezStr_MESSENGERS",
                            ru: "✅ <b>Вы выбрали:</b>\n\n$rezStr_MESSENGERS"
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "$SS_MESSENGERS"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PH_SELECT_LANGUAGE: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You selected:</b>\n\n$rezStr_LANGUAGES",
                            ru: "✅ <b>Вы выбрали:</b>\n\n$rezStr_LANGUAGES"
                        }
                    }, {
                        type: "timer",
                        time: 1e3,
                        actions: [ {
                            state: "$SS_LANGUAGES"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PH_SiteLink_NO: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You selected:</b>\n\n• $HaveSite",
                            ru: "✅ <b>Вы выбрали:</b>\n\n• $HaveSite"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterDesc"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    enterDomainSiteLink: [ {
                        type: "actions",
                        actions: []
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Enter the domain",
                            ru: "Введите домен"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "WRONG_DOMAIN"
                        }, {
                            if: "INPUT.search(/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/) > -1",
                            actions: [ {
                                slot: "domainSiteLink",
                                value: "INPUT"
                            }, {
                                state: "PH_SiteLink_YES"
                            } ]
                        } ]
                    } ],
                    PH_SiteLink_YES: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "✅ <b>You domain:</b>\n\n• $domainSiteLink",
                            ru: "✅ <b>Вы выбрали:</b>\n\n• $domainSiteLink"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "enterDesc"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ENTER_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Please, enter your name",
                            ru: "Как вас зовут?"
                        }
                    }, {
                        type: "input",
                        kind: "text",
                        actions: [ {
                            state: "WRONG_NAME"
                        }, {
                            if: "INPUT.length > 1",
                            actions: [ {
                                slot: "NAME",
                                value: "INPUT"
                            }, {
                                state: "WELCOME"
                            } ]
                        } ]
                    } ],
                    WRONG_NAME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "⚠️ The name has to be at least two characters",
                            ru: "⚠️ Имя должно содержать хотя бы 2 символа"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "ENTER_NAME"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WELCOME: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Welcome $NAME!",
                            ru: "Добро пожаловать, $NAME!"
                        }
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "MAIN_MENU"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO_CUSTOMER_REQUEST: [ {
                        type: "actions",
                        actions: [ {
                            slot: "STATE_AFTER_CUSTOMER",
                            value: '"BACK_FROM_CUSTOMER_REQUEST"'
                        }, {
                            goto: "SCR_CUSTOMER_DATA_BEGIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BACK_FROM_CUSTOMER_REQUEST: [ {
                        type: "actions",
                        actions: [ {
                            goto: "END_REQUEST"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    WRONG_DOMAIN: [ {
                        type: "text",
                        text: {
                            en: "Please enter the domain format: https://link.com or www.link.com",
                            ru: "Пожалуйста, введите домен формата: https://link.com или www.link.com"
                        }
                    }, {
                        type: "timer",
                        time: "300",
                        actions: [ {
                            state: "enterDomainSiteLink"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: "",
                    PREV_STATE: "",
                    RANDOM: "",
                    CUSTOMER_PHONE: "",
                    CUSTOMER_EMAIL: "",
                    descNiche: "",
                    SS_LANGUAGES: "",
                    SS_MESSENGERS: "",
                    STATE_AFTER_CUSTOMER: "",
                    URL: "",
                    pagesCounter: "",
                    domainSiteLink: "",
                    NAME: "",
                    reg: ""
                },
                cards: {
                    states: {
                        START: {
                            c: 1,
                            r: 0,
                            x: 941,
                            y: 535
                        },
                        MAIN_MENU: {
                            c: 5,
                            r: 0,
                            x: 942,
                            y: 829
                        },
                        CHANGE_LANGUAGE: {
                            c: 0,
                            r: 0,
                            x: 1203,
                            y: 1148
                        },
                        ABOUT: {
                            c: 6,
                            r: 0,
                            x: 469,
                            y: 1132
                        },
                        CONTACTS: {
                            c: 7,
                            r: 0,
                            x: 176,
                            y: 940
                        },
                        MORE_ABOUT_CHATBOTS: {
                            c: 1,
                            r: 1,
                            x: 1510,
                            y: 1158
                        },
                        SHOPPING_BOT_TYPE: {
                            c: 1,
                            r: 3,
                            x: 2073,
                            y: 1114.0000507843577,
                            folder: "Bot types"
                        },
                        PARSER_BOT_TYPE: {
                            c: 0,
                            r: 3,
                            x: 1856,
                            y: 1117.0000507843577,
                            folder: "Bot types"
                        },
                        DELIVERY_BOT_TYPE: {
                            c: 2,
                            r: 3,
                            x: 2305,
                            y: 1124.0000507843577,
                            folder: "Bot types"
                        },
                        ASSISTANT_BOT_TYPE: {
                            c: 3,
                            r: 3,
                            x: 2536,
                            y: 1127.0000507843577,
                            folder: "Bot types"
                        },
                        FAQ_BOT_TYPE: {
                            c: 4,
                            r: 3,
                            x: 1857,
                            y: 1362.0000507843577,
                            folder: "Bot types"
                        },
                        CRYPTOCURRENCY_BOT_TYPE: {
                            c: 5,
                            r: 3,
                            x: 2068,
                            y: 1362.0000507843577,
                            folder: "Bot types"
                        },
                        CORPORATE_BOT_TYPE: {
                            c: 6,
                            r: 3,
                            x: 2284,
                            y: 1366.0000507843577,
                            folder: "Bot types"
                        },
                        HORECA_BOT_TYPE: {
                            c: 7,
                            r: 3,
                            x: 2499,
                            y: 1359.0000507843577,
                            folder: "Bot types"
                        },
                        ARTIFICIAL_BOT_TYPE: {
                            c: 8,
                            r: 3,
                            x: 1854,
                            y: 1587.0000507843577,
                            folder: "Bot types"
                        },
                        CONTACT_MAP: {
                            c: 8,
                            r: 0,
                            x: 27,
                            y: 1203
                        },
                        ADVANTAGE_3: {
                            c: 3,
                            r: 4,
                            x: 2311,
                            y: 2182.0621850286575,
                            folder: "Bot pluses"
                        },
                        ADVANTAGE_1: {
                            c: 2,
                            r: 4,
                            x: 1862,
                            y: 2173.50005456185,
                            folder: "Bot pluses"
                        },
                        ADVANTAGE_2: {
                            c: 1,
                            r: 4,
                            x: 2083,
                            y: 2182.0621850286575,
                            folder: "Bot pluses"
                        },
                        ADVANTAGE_4: {
                            c: 0,
                            r: 4,
                            x: 1865,
                            y: 2377.0621843869462,
                            folder: "Bot pluses"
                        },
                        ADVANTAGE_5: {
                            c: 4,
                            r: 4,
                            x: 2088,
                            y: 2376.0622185232364,
                            folder: "Bot pluses"
                        },
                        ADVANTAGE_6: {
                            c: 5,
                            r: 4,
                            x: 2314,
                            y: 2375.0621843869462,
                            folder: "Bot pluses"
                        },
                        MAYBE_TYPES: {
                            c: 1,
                            r: 5,
                            x: 2335,
                            y: 3129.574744573502
                        },
                        MAYBE_ADVANTAGES: {
                            c: 6,
                            r: 1,
                            x: 2346,
                            y: 2835.558488238908
                        },
                        HAVE_A_REQUEST: {
                            c: 9,
                            r: 0,
                            x: 788,
                            y: 1319
                        },
                        SELECT_QUESTION_CATEGORY: {
                            c: 1,
                            r: 3,
                            x: 1037.3812264947605,
                            y: 1701.4272129533565
                        },
                        "Who owns the bot?": {
                            c: 5,
                            r: 4,
                            x: 1908,
                            y: 5030.563344786755,
                            folder: "Questions_Group_2"
                        },
                        "Is the bot really mine?": {
                            c: 6,
                            r: 4,
                            x: 2108,
                            y: 5550.56336666755,
                            folder: "Questions_Group_2"
                        },
                        "Show your portfolio": {
                            c: 7,
                            r: 4,
                            x: 2308,
                            y: 5550.56336666755,
                            folder: "Questions_Group_2"
                        },
                        "Are we signing an NDA?": {
                            c: 8,
                            r: 4,
                            x: 2508,
                            y: 5550.56336666755,
                            folder: "Questions_Group_2"
                        },
                        "Legal issues": {
                            c: 4,
                            r: 4,
                            x: 1687,
                            y: 4890.5470884521565,
                            folder: "Questions_Group_2"
                        },
                        "What info do I need to provide?": {
                            c: 2,
                            r: 3,
                            x: 1393,
                            y: 1508
                        },
                        "Bot hosting": {
                            c: 3,
                            r: 4,
                            x: 1676,
                            y: 4157.062888379788,
                            folder: "Questions_Group_1"
                        },
                        BOT_HAVE_GRAPHICS: {
                            c: 0,
                            r: 7,
                            x: 1264.9688882800347,
                            y: 4452,
                            folder: "GetCost"
                        },
                        "What is hosting?": {
                            c: 4,
                            r: 4,
                            x: 1881,
                            y: 4651.0791447143865,
                            folder: "Questions_Group_1"
                        },
                        "Hosting fee": {
                            c: 5,
                            r: 4,
                            x: 2081,
                            y: 5171.079166595181,
                            folder: "Questions_Group_1"
                        },
                        "Annual hosting": {
                            c: 6,
                            r: 4,
                            x: 2281,
                            y: 5171.079166595181,
                            folder: "Questions_Group_1"
                        },
                        "I forgot to renew the hosting": {
                            c: 7,
                            r: 4,
                            x: 2481,
                            y: 5171.079166595181,
                            folder: "Questions_Group_1"
                        },
                        "Bot location": {
                            c: 9,
                            r: 4,
                            x: 1960,
                            y: 4350.0791447143865,
                            folder: "Questions_Group_1"
                        },
                        "Does the bot work 24/7": {
                            c: 8,
                            r: 4,
                            x: 2207.015459322177,
                            y: 5497.626018991917,
                            folder: "Questions_Group_1"
                        },
                        SELECT_MESSENGERS: {
                            c: 6,
                            r: 7,
                            x: 2805,
                            y: 230.99999846220396,
                            folder: "Create request"
                        },
                        HAVE_EXTERNAL_SOURCES: {
                            c: 0,
                            r: 7,
                            x: 1515.9688882800347,
                            y: 4472,
                            folder: "GetCost"
                        },
                        AMOUNT_OF_QUESTIONS: {
                            c: 17,
                            r: 7,
                            x: 1241,
                            y: 4666,
                            folder: "GetCost"
                        },
                        DIALOG_DEPTH: {
                            c: 0,
                            r: 8,
                            x: 1469,
                            y: 4648,
                            folder: "GetCost"
                        },
                        DATA_RECORDING: {
                            c: 0,
                            r: 8,
                            x: 1710,
                            y: 4679.999999999998,
                            folder: "GetCost"
                        },
                        HAVE_DATABASE_OR_CRM: {
                            c: 0,
                            r: 8,
                            x: 1977,
                            y: 4664.999979595452,
                            folder: "GetCost"
                        },
                        PROJECT_URGENCY: {
                            c: 18,
                            r: 7,
                            x: 1245.0311117199653,
                            y: 4780.452911424045,
                            folder: "GetCost"
                        },
                        HOSTING_FOR_BOT: {
                            c: 19,
                            r: 7,
                            x: 1479.0311117199653,
                            y: 4772.452911424045,
                            folder: "GetCost"
                        },
                        BOT_INSTALLATION: {
                            c: 20,
                            r: 7,
                            x: 1705.0311117199653,
                            y: 4779.452911424045,
                            folder: "GetCost"
                        },
                        BOT_PRICE: {
                            c: 11,
                            r: 0,
                            x: 1974.0311117199653,
                            y: 4772.452911424045,
                            folder: "GetCost"
                        },
                        END_REQUEST: {
                            c: 1,
                            r: 6,
                            x: 4260,
                            y: 251,
                            folder: "Create request"
                        },
                        START_POLL: {
                            c: 0,
                            r: 6,
                            x: 2280,
                            y: 313.999994518156,
                            folder: "Create request"
                        },
                        CHECK_WRONG_CHECKBOX: {
                            c: 0,
                            r: 8,
                            x: 2540,
                            y: 593.0000016859447,
                            folder: "Create request"
                        },
                        SCR_CUSTOMER_DATA_BEGIN: {
                            c: 0,
                            r: 8,
                            x: 2759,
                            y: 3500.511447896838,
                            folder: "customer"
                        },
                        CUSTOMER_GREET: {
                            c: 8,
                            r: 8,
                            x: 3036,
                            y: 3516.5268383621915,
                            folder: "customer"
                        },
                        ENTER_CUSTOMER_PHONE: {
                            c: 1,
                            r: 8,
                            x: 2619.828958985575,
                            y: 3782.5106034192195,
                            folder: "customer"
                        },
                        CUSTOMER_PHONE_RIGHT: {
                            c: 2,
                            r: 8,
                            x: 3035.828958985575,
                            y: 3698.5106034192195,
                            folder: "customer"
                        },
                        CUSTOMER_PHONE_WRONG: {
                            c: 3,
                            r: 8,
                            x: 3023.828958985575,
                            y: 3788.5106034192195,
                            folder: "customer"
                        },
                        QUERY_EMAIL: {
                            c: 9,
                            r: 8,
                            x: 2607,
                            y: 3953.5268383621915,
                            folder: "customer"
                        },
                        CUSTOMER_EMAIL_WRONG: {
                            c: 4,
                            r: 8,
                            x: 3029,
                            y: 4010.526849751326,
                            folder: "customer"
                        },
                        ENTER_CUSTOMER_EMAIL: {
                            c: 10,
                            r: 8,
                            x: 2608,
                            y: 4063.5268383621915,
                            folder: "customer"
                        },
                        CUSTOMER_EMAIL_RIGHT: {
                            c: 7,
                            r: 8,
                            x: 3034,
                            y: 3920.5268794242256,
                            folder: "customer"
                        },
                        SCR_CUSTOMER_DATA_END: {
                            c: 5,
                            r: 8,
                            x: 2631.828958985575,
                            y: 4170.5106034192195,
                            folder: "customer"
                        },
                        EXIT_CUSTOMER: {
                            c: 6,
                            r: 8,
                            x: 2886,
                            y: 4174.511434473078,
                            folder: "customer"
                        },
                        enterSiteLink: {
                            c: 11,
                            r: 7,
                            x: 3399,
                            y: 222.00000259648778,
                            folder: "Create request"
                        },
                        enterDesc: {
                            c: 16,
                            r: 7,
                            x: 3800,
                            y: 222.00000259648778,
                            folder: "Create request"
                        },
                        weWillContact: {
                            c: 0,
                            r: 5,
                            x: 900,
                            y: 1507
                        },
                        BOT_TYPES_BOOK: {
                            c: 2,
                            r: 1,
                            x: 2058,
                            y: 761
                        },
                        ADVANTAGES_BOOK: {
                            c: 5,
                            r: 1,
                            x: 2059,
                            y: 937
                        },
                        PREPARE_BOT_TYPES_BOOK: {
                            c: 3,
                            r: 1,
                            x: 1827,
                            y: 766
                        },
                        PREPARE_ADVANTAGES_BOOK: {
                            c: 4,
                            r: 1,
                            x: 1831,
                            y: 954
                        },
                        SHOW_CHECK_BUTTONS: {
                            c: 1,
                            r: 7,
                            x: 3320,
                            y: 485.0000007718654,
                            folder: "Create request"
                        },
                        PRE_SELECT_LANGUAGES: {
                            c: 4,
                            r: 7,
                            x: 3083,
                            y: 221.0000089628105,
                            folder: "Create request"
                        },
                        SELECT_LANGUAGES: {
                            c: 0,
                            r: 7,
                            x: 3073,
                            y: 283.0000162396766,
                            folder: "Create request"
                        },
                        ADD_NEW_ITEM: {
                            c: 2,
                            r: 7,
                            x: 3325,
                            y: 557.9999954223955,
                            folder: "Create request"
                        },
                        ADD_NEW_ITEM_IF_REPEAT: {
                            c: 3,
                            r: 7,
                            x: 3330,
                            y: 639.9999954223955,
                            folder: "Create request"
                        },
                        SELECT_CHATBOT_AREAS: {
                            c: 7,
                            r: 7,
                            x: 2534,
                            y: 222.00000168594454,
                            folder: "Create request"
                        },
                        PRE_SELECT_CHATBOT_AREA: {
                            c: 5,
                            r: 7,
                            x: 2541,
                            y: 165,
                            folder: "Create request"
                        },
                        PH_CHATBOT_AREA: {
                            c: 8,
                            r: 7,
                            x: 2539,
                            y: 452.000001261527,
                            folder: "Create request"
                        },
                        PH_MESSENGERS: {
                            c: 9,
                            r: 7,
                            x: 2849,
                            y: 509.99999734331936,
                            folder: "Create request"
                        },
                        PH_SELECT_LANGUAGE: {
                            c: 10,
                            r: 7,
                            x: 3079,
                            y: 488.000002362691,
                            folder: "Create request"
                        },
                        PH_SiteLink_NO: {
                            c: 14,
                            r: 7,
                            x: 3389,
                            y: 351.0000025964878,
                            folder: "Create request"
                        },
                        enterDomainSiteLink: {
                            c: 12,
                            r: 7,
                            x: 3597,
                            y: 220.00000259648778,
                            folder: "Create request"
                        },
                        PH_SiteLink_YES: {
                            c: 15,
                            r: 7,
                            x: 3605,
                            y: 352.0000025964878,
                            folder: "Create request"
                        },
                        ENTER_NAME: {
                            c: 2,
                            r: 0,
                            x: 1404,
                            y: 544
                        },
                        WRONG_NAME: {
                            c: 3,
                            r: 0,
                            x: 1684,
                            y: 488
                        },
                        WELCOME: {
                            c: 4,
                            r: 0,
                            x: 1687,
                            y: 604
                        },
                        GOTO_CUSTOMER_REQUEST: {
                            c: 17,
                            r: 7,
                            x: 4020,
                            y: 231.99999168650865,
                            folder: "Create request"
                        },
                        BACK_FROM_CUSTOMER_REQUEST: {
                            c: 18,
                            r: 7,
                            x: 4026,
                            y: 299.9999916865087,
                            folder: "Create request"
                        },
                        WRONG_DOMAIN: {
                            c: 13,
                            r: 7,
                            x: 3697,
                            y: 320.0000025964878,
                            folder: "Create request"
                        }
                    },
                    folders: {
                        "Bot types": {
                            c: 0,
                            r: 2,
                            x: 1844,
                            y: 1084,
                            openGrid: !1
                        },
                        "Bot pluses": {
                            c: 0,
                            r: 3,
                            x: 1852,
                            y: 2143.500096028443,
                            openGrid: !1
                        },
                        "Create request": {
                            c: 0,
                            r: 4,
                            x: 2270,
                            y: 135,
                            openGrid: !1
                        },
                        Questions_Group_1: {
                            c: 3,
                            r: 3,
                            x: 1683,
                            y: 2621,
                            openGrid: !1
                        },
                        Questions_Group_2: {
                            c: 4,
                            r: 3,
                            x: 1774,
                            y: 2959,
                            openGrid: !1
                        },
                        customer: {
                            c: 0,
                            r: 6,
                            x: 2597,
                            y: 3470.511447896838,
                            openGrid: !1
                        },
                        GetCost: {
                            c: 0,
                            r: 1,
                            x: 1206,
                            y: 2405,
                            openGrid: !1
                        }
                    }
                }
            },
            "system-help": {
                id: 0,
                name: "Virtual Assistant",
                start: "GREET",
                version: "1.0.0",
                view: "grid",
                states: {
                    MAIN: [ {
                        type: "text",
                        text: {
                            en: "Messages that appear in the bot window are called <b>steps</b>. These steps are shown as cards on the right.",
                            ru: "Сообщения, появляющиеся в окне бота, называются <b>шагами</b>. Справа эти шаги изображены в виде карточек."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "You might want to know how to:",
                            ru: "Возможно, Вы хотите узнать, как:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Create steps",
                                    ru: "Создавать шаги"
                                },
                                actions: [ {
                                    state: "CREATE_STEP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Edit steps",
                                    ru: "Редактировать шаги"
                                },
                                actions: [ {
                                    state: "OPEN_PANEL"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: ""
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🦉 FAQ",
                                    ru: "🦉 Частые вопросы"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🌐 Change language",
                                    ru: "🌐 Сменить язык"
                                },
                                actions: [ {
                                    state: "CHANGE_LANGUAGE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    COLOR_STATE: [ {
                        type: "text",
                        text: {
                            en: "The <b>pink</b> card is the one which is currently edited.",
                            ru: "<b>Малиновый цвет</b> означает выбранный шаг, который сейчас редактируется."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "The <b>blue</b> cards mark the steps, where a user may navigate to from the current one, by clicking a button, entering the text or after the timer runs out.",
                            ru: "<b>Голубой цвет</b> имеют карточки шагов, в которые можно перейти из выбранного шага при помощи кнопок, текстового ввода или таймера."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Arrows</b> show navigation upon the button click.",
                            ru: "<b>Стрелки</b> показывают, из каких кнопок происходят переходы."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>Green dots</b> mark the steps which may precede the selected one.",
                            ru: "<b>Зелёные точки</b> показывают шаги, из которых можно попасть в выбранный шаг."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 На главную"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    LINKS: [ {
                        type: "text",
                        text: {
                            en: "To set navigation to any step, click the button in the editor, and then click the <b>step</b> field in the item properties. Then select the card to navigate to upon the button click.",
                            ru: "Чтобы задать переход, кликните на кнопку в редакторе.\nВ свойствах кнопки кликните на поле шага, а затем на карточку того состояния в который нужно перейти при нажатии кнопки."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "Navigation upon text entering, timer and actions are set in the same way.",
                            ru: "Аналогично делаются переходы при вводе текста, в таймере и действиях."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_links.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "LINKS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SCRIPT: [ {
                        type: "text",
                        text: {
                            en: "Scripts are used to process lists or to display dynamic content.",
                            ru: "При помощи скриптов работают со списками или выводят динамический контент."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "Scripts consist of actions, each of which is a function:",
                            ru: "Скрипты состоят из действий, каждое из которых - это функция:"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>action1</b> (arg1, arg2, ...)\n<b>action2</b> (arg1, arg2, ...)",
                            ru: "<b>действие1</b>(аргумент1,аргумент2,...)\n<b>действие2</b>(аргумент1,аргумент2,...)"
                        },
                        pre: 1
                    }, {
                        type: "text",
                        text: {
                            en: "In its tern, some action arguments can be scripts.",
                            ru: "Некоторые аргументы действий, в свою очередь, могут быть скриптами."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Content output",
                                    ru: "Вывод контента"
                                },
                                actions: [ {
                                    state: "SCRIPT_CONTENT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Common actions",
                                    ru: "Общие действия"
                                },
                                actions: [ {
                                    state: "SCRIPT_GENERAL"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "List processing",
                                    ru: "Работа со списками"
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: []
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_CONTENT: [ {
                        type: "text",
                        text: {
                            en: "The visible items are set in the step editor. They can also be created dynamically within scripts.",
                            ru: "Визуальные элементы задаются в редакторе шага. Кроме этого, их можно создавать динамически внутри скриптов."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>text</b>&nbsp;- text output",
                                    ru: "<b>text</b>&nbsp;- вывод текста"
                                },
                                actions: [ {
                                    state: "SCRIPT_TEXT"
                                } ],
                                align: "left",
                                kind: "checkbox"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>image</b>&nbsp;- display images",
                                    ru: "<b>image</b>&nbsp;- вывод изображения"
                                },
                                actions: [ {
                                    state: "SCRIPT_IMAGE"
                                } ],
                                align: "left",
                                kind: "checkbox"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>get_check</b>&nbsp;- add checkbox",
                                    ru: "<b>get_check</b>&nbsp;- чекбоксы"
                                },
                                actions: [ {
                                    state: "SCRIPT_CHECK"
                                } ],
                                kind: "checkbox",
                                checked: !1,
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_LIST: [ {
                        type: "text",
                        text: {
                            en: "Lists are an important slot type. For example, they may store user orders or other data.",
                            ru: "Списки - важный вид слотов. В них можно сохранять, например, сделанный пользователем заказ и другие данные."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>clear</b>&nbsp;- clear the list",
                                    ru: "<b>clear</b>&nbsp;- очистка списка"
                                },
                                actions: [ {
                                    state: "SCRIPT_CLEAR"
                                } ],
                                align: "left",
                                kind: "checkbox"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>len</b>&nbsp;- number of elements",
                                    ru: "<b>len</b>&nbsp;- число элементов "
                                },
                                actions: [ {
                                    state: "SCRIPT_LEN"
                                } ],
                                align: "left",
                                kind: "checkbox"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>push</b>&nbsp;- add in the end",
                                    ru: "<b>push</b>&nbsp;- добавить в конец"
                                },
                                actions: [ {
                                    state: "SCRIPT_PUSH"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>add</b>&nbsp;- add elements",
                                    ru: "<b>add</b>&nbsp;- добавить элементы "
                                },
                                actions: [ {
                                    state: "SCRIPT_ADD"
                                } ],
                                align: "left",
                                kind: "checkbox"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>sum</b>&nbsp;- sum up the values",
                                    ru: "<b>sum</b>&nbsp;- сумма значений"
                                },
                                actions: [ {
                                    state: "SCRIPT_SUM"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>total</b>&nbsp;- expression sum",
                                    ru: "<b>total</b>&nbsp;- сумма выражения"
                                },
                                actions: [ {
                                    state: "SCRIPT_TOTAL"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>get</b>&nbsp;- list element",
                                    ru: "<b>get</b>&nbsp;- элемент списка"
                                },
                                actions: [ {
                                    state: "SCRIPT_GET"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>foreach</b>&nbsp;- for all elements",
                                    ru: "<b>foreach</b>&nbsp;- для всех элементов"
                                },
                                actions: [ {
                                    state: "SCRIPT_FOREACH"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_CLEAR: [ {
                        type: "text",
                        text: {
                            en: "<b> clear </b> (LIST) clears the LIST slot. After that it will be an empty list [].",
                            ru: "<b>clear</b>(LIST) - очищает слот с именем LIST. После этого он будет пустым списком []."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>set</b>  (LIST, [1,2,3,4])\n<b>clear</b>(LIST)",
                            ru: "<b>set</b>  (LIST, [1,2,3,4])\n<b>clear</b>(LIST)"
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_ADD: [ {
                        type: "text",
                        text: {
                            en: '<b>add</b> (list, agrg, keys [, cond], item)  adds the "item" element to the LIST list, which is an object, consisting of keys and values.',
                            ru: "<b>add</b>(list, agrg, keys [, cond], item) - добавить в список list элемент item, являющийся объектом (состоит из ключей и значений). "
                        }
                    }, {
                        type: "text",
                        text: {
                            en: 'The "agrg" list contains the keys to be aggregated (incremented) when an item is added, in case the keys match the values from the "keys" list.\nIf there is no match, then the item is added to the end of the list. If there is a "cond" argument, then it may have a boolean condition containing the keys of the list elements. Adding (or aggregating) will only happen if this condition is true.',
                            ru: "В списке agrg перечислятся ключи, которые необходимо проагрегировать (увеличить) при добавлении item. В списке keys перечисляются ключи, при совпадении с которыми это необходимо делать. Если совпадения не произошло, то item добавляется в конец списка. Если есть аргумент cond, то в нём может быть логическое условие, содержащее ключи элементов списка. Добавление (или агрегирование) произойдёт только, если это условие истинно."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_TEXT: [ {
                        type: "text",
                        text: {
                            en: "<b>text </b> (string) outputs the string to a message. The string can be multilingual, in which case it is passed as an object (in curly brackets) with two-letter language codes and texts as values:",
                            ru: "<b>text</b>(string) - вывод строки в сообщение. Строка может быть мультиязычной. В этом случае она передаётся как объект (в фигурных скобках) с ключами языков (два символа) и текстами в качестве  значений:"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>text</b>("Hello, World!") \n<b>text</b>({\n    en: "Hello, World!",\n    es: "¡Hola, mundo!"\n})',
                            ru: '<b>text</b>("Hello, World!") \n<b>text</b>({\n    en: "Hello, World!",\n    ru: "Привет, мир!"\n})'
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_CONTENT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_IMAGE: [ {
                        type: "text",
                        text: {
                            en: '<b>image</b> (url) displays the image in a message. This action is to be preceded by the <b>images</b> action. All the following "image" items will be displayed in one string.',
                            ru: "<b>image</b>(url) - вывод изображения в сообщение. Перед этим действием, необходимо поставить действие <b>images</b>. Все идущие после него image будут выведены в одну строку."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>set</b>  (URL, "https://qu.com/q/im/")     \n<b>images</b>()     \n<b>image</b>(\\$URL + "owl_a.png")     \n<b>image</b>(\\$URL + "owl_b.png")  ',
                            ru: '<b>set</b>  (URL, "https://qu.com/q/im/")     \n<b>images</b>()     \n<b>image</b>(\\$URL + "owl_a.png")     \n<b>image</b>(\\$URL + "owl_b.png")  '
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_CONTENT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CHANGE_LANGUAGE: [ {
                        type: "actions",
                        actions: [ {
                            state: "MAIN"
                        } ]
                    }, {
                        type: "text",
                        text: {
                            en: "Select the language to proceed.",
                            ru: "На каком языке Вы хотите общаться?",
                            uk: "Якою мовою Ви бажаєте спілкуватись?",
                            de: "In welcher Sprache möchten Sie kommunizieren?",
                            fr: "Dans quelle langue souhaitez-vous communiquer ?",
                            es: "¿En qué idioma quieres comunicarte?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "English",
                                    ru: "English",
                                    uk: "English",
                                    de: "English",
                                    fr: "English",
                                    es: "English"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "en"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Russian",
                                    ru: "Русский",
                                    uk: "Русский",
                                    de: "Русский",
                                    fr: "Русский",
                                    es: "Русский"
                                },
                                actions: [ {
                                    slot: "LANGUAGE",
                                    value: "ru"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START_STEP: [ {
                        type: "text",
                        text: {
                            en: "The bot starts a dialog from the initial cart indicated as <b>start</b> (in the top right). It also has a bold border.",
                            ru: "Бот начинает диалог с начального шага. У такой карточки написано <b>start</b> в правом верхнем углу, и она имеет более жирную рамку."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_start_vis.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "SELECT_START"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GREET: [ {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "text",
                        text: {
                            en: "Welcome to the QuBot editor.",
                            ru: "Добро пожаловать в редактор QuBot."
                        }
                    }, {
                        type: "message",
                        typing: "1000"
                    }, {
                        type: "actions",
                        actions: [ {
                            goto: "MAIN"
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FAQ: [ {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How to set the default language?",
                                    ru: "Как изменить начальный язык?"
                                },
                                actions: [ {
                                    state: "START_LANGUAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Where to get the map embed code?",
                                    ru: "Где взять ссылку для карты?"
                                },
                                actions: [ {
                                    state: "MAP_LINK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Where to copy the image URL?",
                                    ru: "Где взять ссылку для картинки?"
                                },
                                actions: [ {
                                    state: "IMG_LINK"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What do the card colors mean?",
                                    ru: "Что означают цвета карточек ?"
                                },
                                actions: [ {
                                    state: "COLOR_STATE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FOLDERS: [ {
                        type: "text",
                        text: {
                            en: '<b class="green">Folders</b> contain step cards.',
                            ru: '<b class="green">Папки</b> содержат карточки шагов. '
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "In the <b>Grid</b> view mode, you can click on a folder to open it and see all the containing cards.",
                            ru: "В режиме <b>View</b> - <b>Grid</b>, клик на папку открывает или закрывает её. В открытом состоянии видны все карточки, находящиеся внутри папки."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "EDIT_STEPS_IN_DIR"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STEP_POSITION: [ {
                        type: "text",
                        text: {
                            en: "There are two modes of card replacement: <b>Grid</b> and <b>Free</b>. You can swich between them in <b>View</b>.",
                            ru: "Есть два режима упорядочивания карточек шагов: <b>Grid</b> и <b>Free</b>. Они переключаются в меню <b>View</b>."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_view.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "GRID_VIEW"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ITEMS: [ {
                        type: "text",
                        text: {
                            en: "Steps may have <b>visible</b> items, displayed to a user, and <b>logical</b> items, which a user can't see and are only used for the bot logic.",
                            ru: "В шаге могут использовать <b>визуальные</b> элементы, которые видны пользователю, и <b>логические</b> элементы, которые пользователь не видит и которые отвечают за логику бота."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "VISUAL_ITEMS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GOTO: [ {
                        type: "text",
                        text: {
                            en: "There are 3 types of navigation.",
                            ru: "Существует три вида переходов."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b class="green">step</b> is triggered upon an event. It may be set for a button or in the input field properties.',
                            ru: '<b class="green">step</b> - переход по событию. Он задаётся, например, в кнопке или свойствах поля ввода.'
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b class="green">goto</b> is the instant navigation which needs no event. All further properties and items below the "goto" are ignored.',
                            ru: '<b class="green">goto</b> - мгновенный переход без ожидания события. Все дальнейшие свойства и элементы ниже goto игнорируются.'
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b class="green">run</b> runs the selected step (in the current step, all items are displayed and actions are performed). Then we return to where "run" was called.',
                            ru: '<b class="green">run</b> - выполняет указанный шаг (в текущем шаге рисуются его элементы и совершаются его действия). Затем происходит возврат на то место, откуда run был вызван.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "LINKS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DEF_STEP: [ {
                        type: "text",
                        text: {
                            en: 'If the "step" property is not set for a button, text, or timer, then when an event occurs, the current step will run again.',
                            ru: "Если свойство step в  кнопке (тексте, таймере) не задано, то при возникновении события будет повторно показан текущий шаг."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: 'The default navigation can be defined in the "actions" (rocket) at the start of the step. It will be if the event object does not have the "step" property.',
                            ru: "Переход по умолчанию можно  определить в действиях (ракета) в начале шага. Этот переход будет использован, если в событийном объекте нет свойства step."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "LINKS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ACTIONS: [ {
                        type: "text",
                        text: {
                            en: "Actions (rocket) may contain various items: conditions (<b>if</b>), branch statements (<b>switch</b>), setting slots (variables), scripts, etc. All of them are visible when you click the plus panel in the item properties.",
                            ru: "Действия (ракета) могут содержать различные элементы: условия (<b>if</b>), операторы ветвления (<b>switch</b>), установку слотов (переменных), скрипты и т.п. Все они видны при нажатии на плюс панели свойств элемента."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What are scripts?",
                                    ru: "Что такое скрипты?"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAP_LINK: [ {
                        type: "text",
                        text: {
                            en: 'Open <a href="https://www.google.com/maps/"  target="_blank">Google Maps</a>, and click the menu icon (3 horizontal lines) in the top left. Select "Share or embed map", switch to the "Embed a map" tab, and click "COPY HTML". Paste the link to the <b>map</b> item.',
                            ru: 'Необходимо зайти на <a href="https://www.google.com.ua/maps/"  target="_blank">Google Map</a>.  В левом верхнем углу нажать на три параллельные линии. Выбрать "Ссылка/код" и закладку "Встраивание карт". Затем нажать "КОПИРОВАТЬ HTML". Полученную ссылку вставить в элемент <b>map</b>.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMG_LINK: [ {
                        type: "text",
                        text: {
                            en: "You may use any image URL on the web.",
                            ru: "Ссылки на картинки можно вставлять из любых ресурсов интернета."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "It's a good idea to upload images to the WordPress media library and use them for the purpose.",
                            ru: "Хорошей идей является использование изображений, загруженных в медиа галерею WordPress."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    START_LANGUAGE: [ {
                        type: "text",
                        text: {
                            en: "The default language can be set in the start step. Add <b>actions</b> (rocket) as the first item, and set the required language value (en, ru, ...) in the LANGUAGE slot.",
                            ru: "Начальный язык можно задать в стартовом состоянии. Для этого первым элементом ставятся действия (ракета). В них добавляется слот LANGUAGE со значением нужного языка (en, ru, ...)"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FAQ"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_CHECK: [ {
                        type: "text",
                        text: {
                            en: '<b>get_check</b> (CHECKS) places the values of buttons marked as "check" into the CHECKS slot list (see Examples -Checkboxes).',
                            ru: "<b>get_check</b>(CHECKS) - помещает значения кнопок, помеченных как чекбоксы, в слот-список CHECKS.  См. пример Checkboxes."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_CONTENT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_RADIO: [ {
                        type: "text",
                        text: {
                            en: '<b>get_radio</b> (CHECKS) places the values of buttons marked as "radio" into the CHECKS slot list (see Examples -Checkboxes).',
                            ru: "<b>get_radio</b>(CHECKS) - помещает значения кнопок, помеченных как radio,  кнопки в слот-список CHECKS.  См. пример Checkboxes."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_CONTENT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_GENERAL: [ {
                        type: "text",
                        text: {
                            en: "These actions allow you to change slots, check conditions, and perform repetitive actions.",
                            ru: "Эти действия позволяют менять слоты, проверять условия и совершать повторяющиеся действия."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>set</b> &nbsp;- slot value setting",
                                    ru: "<b>set</b>&nbsp;- задание значения слота"
                                },
                                actions: [ {
                                    state: "SCRIPT_SET"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>if</b> &nbsp;- conditional operator",
                                    ru: "<b>if</b> &nbsp;- условный оператор"
                                },
                                actions: [ {
                                    state: "SCRIPT_IF"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "<b>while</b>&nbsp;- loop",
                                    ru: "<b>while</b>&nbsp;- цикл"
                                },
                                actions: [ {
                                    state: "SCRIPT_WHILE"
                                } ],
                                align: "left"
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_IF: [ {
                        type: "text",
                        text: {
                            en: '<b>if</b> (cond, script_true [, script_false])  evaluates the boolean expression of "cond". If it is true, then the "script_true" script is executed. Otherwise the "script_false" script is executed (if applicable).',
                            ru: "<b>if</b>(cond, script_true [, script_false]) - вычисление логического выражения cond. Если оно истинно, то выполняется скрипт script_true, иначе - скрипт script_false (последнего может не быть). "
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "These two scripts have to be separated by a comma.",
                            ru: "Между этими двумя скриптами должна быть запятая."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>if</b>(\\$NUM1 > 1 or \\$STR1 == "Wine", \n    <b>set</b> (NUM2, 5)\n    <b>text</b>("\\$NUM2")\n    ,\n    <b>text</b>("false")\n)',
                            ru: '<b>if</b>(\\$NUM1 > 1 or \\$STR1 == "Wine", \n    <b>set</b> (NUM2, 5)\n    <b>text</b>("\\$NUM2")\n    ,\n    <b>text</b>("false")\n)'
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_GENERAL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_SET: [ {
                        type: "text",
                        text: {
                            en: '<b>set</b> (slot, value) sets the slot named "slot" to "value". If the slot with this name is missing, then it is added to the slot list.',
                            ru: "<b>set</b>(slot, value) - установка слота с именем slot в значение value. Если слота с таким именем не было, то он добавляется в список слотов."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "There is no need to add <b>\\$</b> before the slot name in the first argument. However the second argument has to have it, in case it is an expression aimed to obtain the value of a certain slot.",
                            ru: "Символ \\$ перед именем слота в первом аргументе ставить не нужно. Во втором аргументе он должен быть, если это выражение, в котором нужно получить значение некоторого слота."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>set</b>(NUM1, 3.14)\n<b>set</b>(STR1, "Wine")\n<b>set</b>(NUM2, 2 * \\$NUM1 )\n<b>set</b>(STR2, \\$STR1 + " and cheese" )\n<b>set</b>(LIST, [1, 2, "Wine"] )\n<b>set</b>(OBJ,  { n: 1, s: "Wine"  } )',
                            ru: '<b>set</b>(NUM1, 3.14)\n<b>set</b>(STR1, "Wine")\n<b>set</b>(NUM2, 2 * \\$NUM1 )\n<b>set</b>(STR2, \\$STR1 + " and cheese" )\n<b>set</b>(LIST, [1, 2, "Wine"] )\n<b>set</b>(OBJ,  { n: 1, s: "Wine"  } )'
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_GENERAL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_WHILE: [ {
                        type: "text",
                        text: {
                            en: '<b>while</b> (cond, script) keeps running the "script" script while the boolean expression "cond" is true.',
                            ru: "<b>while</b>(cond, script) - повторное выполнение скрипта script, пока истинно логическое выражение cond. "
                        }
                    }, {
                        type: "text",
                        text: {
                            en: 'The script has to be subject to changes, which in its turn changes the truth of "cond". To be on the safe side, the number of circles is limited to 1000.',
                            ru: "Естественно, в скрипте должны происходить изменения, меняющие истинность cond. Для защиты, число повторов ограничено 1000."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: 'set(INDEX, 1)\nwhile(\\$INDEX <= 10, \n    text("\\$INDEX")\n    set (INDEX, \\$INDEX+1)\n)',
                            ru: '<b>set</b>(INDEX, 1)\n<b>while</b>(\\$INDEX <= 10, \n    <b>text</b>("\\$INDEX")\n    <b>set</b> (INDEX, \\$INDEX+1)\n)'
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_GENERAL"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_SUM: [ {
                        type: "text",
                        text: {
                            en: '<b> sum </b> (list, result) sums up the numeric elements of the LIST, and save the result in the "result" slot.',
                            ru: "<b>sum</b>(list, result) - просуммировать числовые элементы списка list, и поместить результат в слот с именем result."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_TOTAL: [ {
                        type: "text",
                        text: {
                            en: "",
                            ru: "<b>total</b>(list, result, expr) - просуммировать значения выражения expr, применяемого к каждому элементу списка list. Результат помещается в слот с именем result."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>push</b> (LIST, { n: 1, p: 10 } )     \n<b>push</b> (LIST, { n: 2, p: 20 } )     \n<b>total</b>(LIST, TOT, \\$n * \\$p)     ",
                            ru: "<b>push</b> (LIST, { n: 1, p: 10 } )     \n<b>push</b> (LIST, { n: 2, p: 20 } )     \n<b>total</b>(LIST, TOT, \\$n * \\$p)     "
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_FOREACH: [ {
                        type: "text",
                        text: {
                            en: "",
                            ru: "<b>foreach</b>(list [, cond], script) - выполнить скрипт script для каждого элемента списка list, если выполняется условие cond (оно может остутствовать). "
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "",
                            ru: "В действиях скрипта можно использовать ключи элементов списка (ставя перед ними, как обычно, $). Если такого ключа в элементе нет, то ищется слот с таким именем."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>push</b>(LIST, \n{ amount: 1, price: 10, name: "Wine"  } \n)     \n<b>push</b>(LIST, \n{ amount: 2, price: 20, name: "Cheese"} \n)     \n\n<b>foreach</b>(LIST, \n    <b>text</b>("\\$name:  \\{\\{\\$amount * \\$price\\}\\}")\n)     ',
                            ru: '<b>push</b>(LIST, \n{ amount: 1, price: 10, name: "Wine"  } \n)     \n<b>push</b>(LIST, \n{ amount: 2, price: 20, name: "Cheese"} \n)     \n\n<b>foreach</b>(LIST, \n    <b>text</b>("\\$name:  \\{\\{\\$amount * \\$price\\}\\}")\n)     '
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_GET: [ {
                        type: "text",
                        text: {
                            en: "",
                            ru: "<b>get</b>(list, item, index) - получить элемент списка list с номером index и записать его в слот item. Нумерация начинается с нуля. Если index = -1, то это последний элемент списка, -2 предпоследний и т.д."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>push</b>(LIST, { n: 1, p: 10 } )     \n<b>push</b>(LIST, { n: 2, p: 20 } )     \n<b>get</b> (LIST, ITEM, -1)     ",
                            ru: "<b>push</b>(LIST, { n: 1, p: 10 } )     \n<b>push</b>(LIST, { n: 2, p: 20 } )     \n<b>get</b> (LIST, ITEM, -1)     "
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_PUSH: [ {
                        type: "text",
                        text: {
                            en: "<b>push</b> (list, item1 [, item2, ...]) adds item1, item2, etc. elements to the end of the list. If there is no LIST slot, or it is not a list, then it is first created as an empty list, and then the elements are added to it.",
                            ru: "<b>push</b>(list, item1 [, item2,...]) - добавить в конец списка list элементы item1, item2 и т.д. Если слота list нет или он не список, то он сначала создаётся как пустой список, а потом в него помещаются элементы."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: '<b>push</b>(LIST, \n     1, 2, "Wine", \n     {a: 1, b: "cheese"}\n)',
                            ru: '<b>push</b>(LIST, \n     1, 2, "Wine", \n     {a: 1, b: "cheese"}\n)'
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    SCRIPT_LEN: [ {
                        type: "text",
                        text: {
                            en: "<b>len</b> (LIST, SIZE) writes the number of elements of the LIST slot to the SIZE slot:",
                            ru: "<b>len</b>(LIST, SIZE) - число элементов списка (слота)  с именем LIST записывает в слот c именем SIZE:"
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "<b>set</b>(LIST, [1,2,3,4])\n<b>len</b>(LIST, SIZE)\n<b>if</b>(\\$SIZE == 4,\n   <b>text</b>('Two items')\n)",
                            ru: "<b>set</b>(LIST, [1,2,3,4])\n<b>len</b>(LIST, SIZE)\n<b>if</b>(\\$SIZE == 4,\n   <b>text</b>('Two items')\n)"
                        },
                        pre: 1
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ "
                                },
                                actions: [ {
                                    state: "SCRIPT_LIST"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "⚙️",
                                    ru: "⚙️"
                                },
                                actions: [ {
                                    state: "SCRIPT"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 ",
                                    ru: "🏠"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    COPY_STEPS: [ {
                        type: "text",
                        text: {
                            en: "To copy a step, click it and then select <b>Edit Step</b> - <b>Copy</b>.",
                            ru: "Чтобы скопировать шаг, выберите его в списке карточек и нажмите <b>Copy</b> в меню <b>Edit Step</b>"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_copy.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "PASTE_STEPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CREATE_STEP: [ {
                        type: "text",
                        text: {
                            en: "In order to create a new step, hover a step and click the plus icon on the right.",
                            ru: "Чтобы создать новый шаг, наведите мышь на уже существующий шаг в списке карточек и нажмите плюсик справа на рамке."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_new.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "REMOVE_STEP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    REMOVE_STEP: [ {
                        type: "text",
                        text: {
                            en: "Click on the cross in the top right to delete the step.",
                            ru: "Крестик вверху удаляет шаг."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_del.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "CREATE_STEP"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "CREATE_LINE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    CREATE_LINE: [ {
                        type: "text",
                        text: {
                            en: "To start a new line of cards (<b>View</b> - <b>Grid</b>), click the plus icon on the grey menu at the start of the line.",
                            ru: "Чтобы добавить карточку в новый ряд  (меню <b>View</b> - <b>Grid</b>), нажмите плюсик на сером меню в начале ряда."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_line.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "REMOVE_STEP"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ],
                    NEXT_STEP_INFO: [ {
                        type: "text",
                        text: {
                            en: "Learn more about card editing:",
                            ru: "Может быть, Вы хотите узнать о более сложных элементах шагов, например: "
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Select the starting card",
                                    ru: "Задать начальный шаг"
                                },
                                actions: [ {
                                    state: "START_STEP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Copy steps",
                                    ru: "Копировать шаги"
                                },
                                actions: [ {
                                    state: "COPY_STEPS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Replace cards",
                                    ru: "Изменить положение карточки"
                                },
                                actions: [ {
                                    state: "STEP_POSITION"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Edit folders",
                                    ru: "Работа с папками"
                                },
                                actions: [ {
                                    state: "FOLDERS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Templates",
                                    ru: "Шаблоны"
                                },
                                actions: [ {
                                    state: "INSERT_TEMPLATE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    SELECT_START: [ {
                        type: "text",
                        text: {
                            en: "Any step can be assigned as the starting one. Just click the step, and then tick the checkbox in the top right of the editor panel.",
                            ru: "Начальным шагом можно сделать любой шаг. Для этого необходимо кликнуть мышью на шаг и в панели редактора  шага нажать чекбокс в правом верхнем углу."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_start_sel.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "START_STEP"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PASTE_STEPS: [ {
                        type: "text",
                        text: {
                            en: "To paste a copied step after the selected one, click it and then select <b>Edit Step</b> - <b>Paste</b>.",
                            ru: "Чтобы вставить скопированный шаг, выберите шаг, после которого необходимо вставить скопированный и нажмите <b>Paste</b> в <b>Edit Step</b>"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_paste.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "COPY_STEPS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    GRID_VIEW: [ {
                        type: "text",
                        text: {
                            en: 'In the <b class="green">Grid</b>  mode, cards are cards are arranged as a table.',
                            ru: 'В режиме <b class="green">Grid</b>  карточки упорядочены в виде таблицы'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_grid.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "STEP_POSITION"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "FREE_VIEW"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FREE_VIEW: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Free</b> view mode  allows to place cards randomly. ',
                            ru: 'В режиме <b class="green">Free</b>  карточки расположены произвольно.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_free.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "GRID_VIEW"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "DRAG_STEP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DRAG_STEP: [ {
                        type: "text",
                        text: {
                            en: "Hover the top of the card to see a hand icon, then drag and drop the card to replace it. ",
                            ru: "Карточки можно таскать. Для этого нужно нажать на шапку и перетащить в необходимую позицию."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_drag.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FREE_VIEW"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    EDIT_STEPS_IN_DIR: [ {
                        type: "text",
                        text: {
                            en: "Cards in the folder can be edited just the same way as any other cards.",
                            ru: "Когда папка раскрыта, её карточки можно редактировать так же, как и любые карточки вне папки."
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDERS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FOLDER_MENU: [ {
                        type: "text",
                        text: {
                            en: "Learn more about folder editing.",
                            ru: "Может быть, Вы хотите подробнее узнать о работе с папками, например:"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Create / Delete folders",
                                    ru: "Создать / удалить папку"
                                },
                                actions: [ {
                                    state: "CREATE_FOLDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Edit folders",
                                    ru: "Редактировать папку"
                                },
                                actions: [ {
                                    state: "RENAME_FOLDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Copy folders",
                                    ru: "Копировать папку"
                                },
                                actions: [ {
                                    state: "COPY_FOLDER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Add / Remove cards",
                                    ru: "Добавить / удалить карточку"
                                },
                                actions: [ {
                                    state: "STEP_MOVE_IN_DIR"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Menu",
                                    ru: "⇧ В меню"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    CREATE_FOLDER: [ {
                        type: "text",
                        text: {
                            en: "To create a folder, click <b>Edit Step</b> -<b>New folder</b>, enter a name in the popup, and click <b>Ok</b>.",
                            ru: "Чтобы создать папку, нажмите <b>New folder</b> в меню <b>Edit Step</b>, затем введите имя в появившемся окне и нажмите <b>Ok</b>."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_add.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "REMOVE_FOLDERS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    REMOVE_FOLDERS: [ {
                        type: "text",
                        text: {
                            en: "To delete a folder, click on the cross in the top right.",
                            ru: "Чтобы удалить папку, кликните на крестик в верхнем правом углу папки."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_rem.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "CREATE_FOLDER"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    COPY_FOLDER: [ {
                        type: "text",
                        text: {
                            en: "To copy a folder, click to open it, and then select <b>Edit Step</b> - <b>Copy Folder</b>.",
                            ru: "Чтобы копировать папку, раскройте необходимую папку. Нажмите на <b>Copy Folder</b> в меню <b>Edit Step</b>"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_copy.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "PASTE_FOLDER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PASTE_FOLDER: [ {
                        type: "text",
                        text: {
                            en: "To paste a folder after the current card, select <b>Edit Step</b> - <b>Paste Folder</b>.",
                            ru: "Чтобы вставить папку, выберите карточку, после которой будет вставлена папка, и нажмите <b>Paste Folder</b> в меню <b>Edit Step</b>"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_paste.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "COPY_FOLDER"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STEP_MOVE_IN_DIR: [ {
                        type: "text",
                        text: {
                            en: "To place a card in the folder, hover over the top border to see a hand icon, then drag and drop it in the folder.",
                            ru: "Чтобы поместить карточку в папку, нужно схватить за её заголовок и перетащить, отпустив на папке. "
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_step_in_dir.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "FOLDER_LINE"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    STEP_MOVE_OUT_DIR: [ {
                        type: "text",
                        text: {
                            en: "",
                            ru: "Аналогично карточки перетаскиваются из раскрытой папки во внешний список карточек."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_step_out_dir.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDER_LINE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    RENAME_FOLDER: [ {
                        type: "text",
                        text: {
                            en: "To rename a folder, click it and select <b>Edit Step</b> - <b>Rename Folder</b>. Enter the name in the popup and click Ok.",
                            ru: "Чтобы переименовать папку раскройте её, нажмите <b>Rename Folder</b> в меню <b>Edit Step</b>. В появившемся окне введите имя папки и нажмите Ok."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_rename.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "FOLDER_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    FOLDER_LINE: [ {
                        type: "text",
                        text: {
                            en: "To start a new line of cards in the folder (<b>View</b> - <b>Grid</b>), open  the folder, click the plus icon on the grey menu at the start of the line.",
                            ru: "Чтобы добавить карточку в новый ряд внутри папки (меню <b>View</b> - <b>Grid</b>), откройте папку и нажмите плюсик на сером меню в начале ряда."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_folder_new_line.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "STEP_MOVE_IN_DIR"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "STEP_MOVE_OUT_DIR"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INSERT_TEMPLATE: [ {
                        type: "text",
                        text: {
                            en: "The bot editor contains localized step templates (e.g. <b>Add Yes/No</b> and <b>Add Change Language</b>). It helps to easily create most common bot steps.",
                            ru: 'В конструкторе существуют шаблонные шаги, такие как <b>"Да/Нет"</b> и <b>"Выбор языка"</b>, переведённые на поддерживаемые языки. Основное их назначение - ускорение разработки ботов, ведь данные шаги встречаются во многих ботах.'
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "INSERT_YES_NO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INSERT_YES_NO: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Add Yes/No</b> card template adds a step with a text field and the two buttons. включает в себя две кнопки и текст.\nSelect <b>Edit Step</b> - <b>Add Yes/No</b> to create it after the current step.',
                            ru: 'Шаблон шага <b class="green">"Да/Нет"</b> включает в себя две кнопки и текст.\nЧтобы добавить шаг в бота, нажмите <b>Add Yes/No</b> в меню <b>Edit Step</b>'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_yes_no.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "INSERT_TEMPLATE"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "INSERT_ADD_LANGUAGE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INSERT_ADD_LANGUAGE: [ {
                        type: "text",
                        text: {
                            en: '<b class="green">Add Change Language</b> is a step template with 6 language options and a text suggesting to change the language.\nClick a card and select <b>Edit Step</b> - <b>Add Change Language</b> to create it.',
                            ru: 'Шаблон шага <b class="green">"Выбор языка"</b> включает в себя 6 языков и текстовое поле с предложением выбрать язык.\nЧтобы добавить шаг в бота, нажмите <b>Add Change Language</b> в меню <b>Edit Step</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/cr_ch_language.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "INSERT_YES_NO"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "NEXT_STEP_INFO"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    OPEN_PANEL: [ {
                        type: "text",
                        text: {
                            en: "To edit the selected step, click the card on on the right. The step will open in the editor window on the left, where you can modify it.",
                            ru: "Для редактирования выбранного шага, нужно кликнуть на одну из карточек справа. Карточка будет открыта в окне редактора слева, в котором её можно изменить."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_panel.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    EDIT_STEP_MENU: [ {
                        type: "text",
                        text: {
                            en: "Learn more about the step editing.",
                            ru: "Может быть, Вы хотите узнать больше о редактировании шагов?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What does a step contain?",
                                    ru: "Что может быть в шаге?"
                                },
                                actions: [ {
                                    state: "ITEMS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How do I set navigation?",
                                    ru: "Как задавать переходы?"
                                },
                                actions: [ {
                                    state: "LINKS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What are actions?",
                                    ru: "Что такое действия?"
                                },
                                actions: [ {
                                    state: "ACTIONS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        actions: []
                    } ],
                    VISUAL_ITEMS: [ {
                        type: "text",
                        text: {
                            en: "The <b>visible</b> items are typing effects, texts, images, maps and buttons.",
                            ru: "К <b>визуальным</b> элементам относятся эффекты тайпинга, тексты, изображения, карты, кнопки."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_visual.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "LOGICAL_ITEMS"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LOGICAL_ITEMS: [ {
                        type: "text",
                        text: {
                            en: "The <b>logical</b> items are actions, timers and the NLU.",
                            ru: "К <b>логическим</b> элементам относятся действия, таймеры, NLU."
                        }
                    }, {
                        type: "text",
                        text: {
                            en: "Logical items are not displayed in the card previews.",
                            ru: "Логические элементы не видны на предпросмотре."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_logical.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "VISUAL_ITEMS"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ITEMS_MENU: [ {
                        type: "text",
                        text: {
                            en: "Learn more about the item editing.",
                            ru: "Может быть, Вы хотите узнать подробнее о работе с элементами?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How to create an item?",
                                    ru: "Как добавить элемент?"
                                },
                                actions: [ {
                                    state: "ADD_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How to copy an item?",
                                    ru: "Как копировать элемент?"
                                },
                                actions: [ {
                                    state: "COPY_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How to delete an item?",
                                    ru: "Как удалить элемент?"
                                },
                                actions: [ {
                                    state: "REMOVE_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "How to replace an item?",
                                    ru: "Как переместить элемент?"
                                },
                                actions: [ {
                                    state: "DRAG_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "What item properties are used?",
                                    ru: "Подробнее о элементах"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Menu",
                                    ru: "В меню "
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ADD_ITEM: [ {
                        type: "text",
                        text: {
                            en: "To create a new item, click on the plus icon on the left of the previous item, and select the item kind in the popup.",
                            ru: "Чтобы добавить элемент, нажмите на плюсик на серой панели слева элемента, после которого необходимо вставить элемент, а затем выберите элемент в появившемся меню."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_add_item.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    COPY_ITEM: [ {
                        type: "text",
                        text: {
                            en: "To copy the selected item, click the double file icon on the grey popup on its left.",
                            ru: "Чтобы скопировать элемент, нажмите на значок с двумя файлами на серой панели слева элемента, который необходимо скопировать."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_copy_item.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "PASTE_ITEM"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    PASTE_ITEM: [ {
                        type: "text",
                        text: {
                            en: "To paste the copied item, click on the icon featuring a file with an arrow on the left of the previous item.",
                            ru: "Чтобы вставить скопированный объект, нажмите иконку файла со стрелкой на серой панели напротив элемента, после которого нужно вставить скопированный."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_paste_item.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "COPY_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    REMOVE_ITEM: [ {
                        type: "text",
                        text: {
                            en: "To delete an item, click the trash icon on the grey popup panel on the item left.",
                            ru: "Чтобы удалить элемент, нажмите на иконку корзины на серой панели слева от элемента, который необходимо удалить."
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_rem_item.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    DRAG_ITEM: [ {
                        type: "text",
                        text: {
                            en: "Text",
                            ru: "Чтобы переместить элемент нажмите на иконку с точками на серой панели слева от элемента и переместите элемент на необходимую позицию на панели редактирования"
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_drag_item.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Button",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ITEM_PROPERTIES: [ {
                        type: "text",
                        text: {
                            en: "Item properties are differ for each item kind. Which item kind would you like to learn more about?",
                            ru: "В зависимости от типа, у элементов могут быть различные свойства. О каком элементе Вы хотите узнать подробнее?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Text",
                                    ru: "Text"
                                },
                                actions: [ {
                                    state: "TEXT_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Image",
                                    ru: "Image"
                                },
                                actions: [ {
                                    state: "IMAGE_PROP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Map",
                                    ru: "Map"
                                },
                                actions: [ {
                                    state: "MAP_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Block",
                                    ru: "Block"
                                },
                                actions: [ {
                                    state: "BLOCK_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "NLU",
                                    ru: "NLU"
                                },
                                actions: [ {
                                    state: "NLU_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Note",
                                    ru: "Note"
                                },
                                actions: [ {
                                    state: "NOTE_PROP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Actions",
                                    ru: "Actions"
                                },
                                actions: [ {
                                    state: "ACTIONS_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Timer",
                                    ru: "Timer"
                                },
                                actions: [ {
                                    state: "TIMER_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Input",
                                    ru: "Input"
                                },
                                actions: [ {
                                    state: "INPUT_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Buttons",
                                    ru: "Buttons"
                                },
                                actions: [ {
                                    state: "BUTTONS_ITEM"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEMS_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMAGE_PROP: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Image</b> item sets the URL of the dislayed image.\nUplode an image to the WordPress medial library or other online storage, and indicate its URL in the item field.\nThe item has two properties:  <b>width</b> and <b>center</b>.',
                            ru: 'Элемент <b class="green">Image</b> предназначен для вывода изображение клиенту.\nИзображение задаётся ссылкой. То есть Вам нужно загрузить изображение в галерею WordPress (или другой ресурс в интернете) и указать в поле элемента ссылку, по которой изображение открывается.\nУ элемента есть пара фиксированных свойств: <b>width и center</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_img.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "IMAGE_WIDTH"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NOTE_PROP: [ {
                        type: "text",
                        text: {
                            en: '<b class="green">Note</b> is the item used for comments only displayed to a developer. The commentary is very helpful in case of complex bots that require extensive support.\nThe item has no properties.',
                            ru: 'Элемент <b class="green">Note</b> предназначен для комментариев, которые видны только разработчику бота. Комментарии очень важны, если бот сложный и планируется долгосрочная поддержка.\nЭлемент не имеет свойств.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_note.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Text</b> item is the message displayed to your user. It can be localized and may contain HTML-tags (e.g. <b>&lt;b&gt;</b>, <i>&lt;i&gt;</i>, or <u>&lt;u&gt;</u>).\nThe element has a few fixed properties: <b>color, center</b> and <b>pre</b>.',
                            ru: 'Элемент <b class="green">Text</b> предназначен для вывода текста клиенту.\nТекст различается для разных языков, а также может содержать внутри себя HTML-теги (например, <b>&lt;b&gt;</b>, <i>&lt;i&gt;</i>, <u>&lt;u&gt;</u>)\nУ элемента есть несколько фиксированных свойств: <b>color, center, pre</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_text.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "TEXT_COLOR"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT_COLOR: [ {
                        type: "text",
                        text: {
                            en: "The <b>color</b> property sets the message text color. Click the field to open the palette popup.",
                            ru: "Свойство <b>color</b> отвечает за цвет текста, выводимого клиенту. Выбор цвета осуществляется с помощью специального окна выбора цвета."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_text_color.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "TEXT_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next ",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "TEXT_CENTER"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT_CENTER: [ {
                        type: "text",
                        text: {
                            en: "The <b>center</b> checkbox is responsible for text centering, i.e. if it's ticked, the text will be centered.",
                            ru: "Свойство <b>center</b> отвечает за центрирование текста, т.е. если свойство включено, то текст будет располагаться по центру."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_text_center.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "TEXT_COLOR"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "TEXT_PRE"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Skip tutorial",
                                    ru: "Уже знаю"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TEXT_PRE: [ {
                        type: "text",
                        text: {
                            en: "If the <b>pre</b> checkbox is ticked, the text will be typewritten, and all whitespaces will be taken into account. Otherwise, multiple spaces are reduced to one, and the leading spaces are removed in each line.",
                            ru: "Свойство <b>pre</b>. Если включено данное свойство, текст будет машинописным, а также будут учитываться все пробельные отступы. (В выключенном состоянии несколько пробелов превращаются в один, а также удаляются начальные пробелы в каждой строке)"
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            center: 1,
                            url: "https://qudata.com/qubot/im/ts/help/ed_text_pre.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "TEXT_CENTER"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAP_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Map</b> element allows you to embed a map. Insert the URL code from Google Maps to add an &lt;iframe&gt; block.\nThe item has the only property, which is <b>height</b>.',
                            ru: 'Элемент <b class="green">Map</b> предназначен для вывода на карты.\nКарта в блок вставляется из Google maps в виде  &lt;iframe&gt; блока. (При публикации Google предлагает скопировать этот блок)\nУ элемента есть только одно свойство - <b>height</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_map.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "MAP_HEIGHT"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMAGE_CENTER: [ {
                        type: "text",
                        text: {
                            en: "The <b>center</b> property allows you to center the image in the message in case it's size is less than 100%.",
                            ru: "Свойство <b>center</b> отвечает за центрирование изображения в сообщении (если её размер меньше 100%)."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_img_center.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "IMAGE_WIDTH"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    MAP_HEIGHT: [ {
                        type: "text",
                        text: {
                            en: "The <b>height</b> property sets the height of the displayed map iframe in the chatbot.",
                            ru: "Свойство <b>height</b> устанавливает высоту выводимой карты в чат-боте."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_map_height.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "MAP_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    IMAGE_WIDTH: [ {
                        type: "text",
                        text: {
                            en: "The image width is set by the <b>width</b> property.\nThe height is set in proportion to the original.",
                            ru: "Свойство <b>width</b> устанавливает ширину выводимого изображения.\nВысота выставляется пропорционально исходным."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_img_width.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "IMAGE_PROP"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "IMAGE_CENTER"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BLOCK_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Block</b> item allows you to format the current message, split the step into few messages, and set the typing animation duration.\nThe item properies are <b>typing</b> and <b>background color</b>.',
                            ru: 'Элемент <b class="green">Block</b> предназначен для форматирования текущего сообщения, разбиения шага на несколько сообщений или для установки анимации тайпинга (набор текста).\nУ элемента есть пара свойств: <b>typing и background color</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_block.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "BLOCK_TYPING"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BLOCK_TYPING: [ {
                        type: "text",
                        text: {
                            en: "The <b>typing</b> is set in milliseconds. It's the time before a new message appears.",
                            ru: "Свойство <b>typing</b> измеряется в миллисекундах и устанавливает время анимации тайпинга (набор сообщения) до появления сообщения."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_block_typing.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "BLOCK_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Next ",
                                    ru: "Далее"
                                },
                                actions: [ {
                                    state: "BLOCK_COLOR"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BLOCK_COLOR: [ {
                        type: "text",
                        text: {
                            en: "The <b>backbround color</b> property sets the message background color.",
                            ru: "Свойство <b>backbround color</b> устанавливает цвет фона текущего сообщения."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_block_color.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "BLOCK_TYPING"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NLU_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">NLU</b> item is used to create "smart" bots, which can maintain a dialog with a user.\nThe item properties are called <b>"intents"</b>. ',
                            ru: 'Элемент <b class="green">NLU</b> используется для создания "умных" ботов, которые способны отвечать на сообщения клиентов.\nСвойства элемента называются <b>"намерения"</b>. '
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_nlu.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Intents",
                                    ru: "Намерения"
                                },
                                actions: [ {
                                    state: "NLU_INTENTS"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    ACTIONS_ITEM: [ {
                        type: "text",
                        text: {
                            en: '<b class = "green">Actions</b> is a merely logical item, aimed to perform particular <b>"actions"</b> when the item is launched.\nThe item has no properties.\nIt\'s an active item, which means it uses actions.',
                            ru: 'Элемент <b class="green">Actions</b> является полностью логическим и предназначен для выполнения каких-либо <b>"действий"</b> в момент, когда элемент будет запущен.\nУ элемента нет свойств. \nЭлемент является активным, то есть он использует <b>"действия"</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_actions.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TIMER_ITEM: [ {
                        type: "text",
                        text: {
                            en: '<b class="green">Timer</b> is the item aimed to perform particular <b>"actions"</b> when the timer expires.\nThe only property is <b>time</b>. \nIt\'s an active item, which means it uses actions.',
                            ru: 'Элемент <b class="green">Timer</b> предназначен для выполнения каких либо <b>"действий"</b> после истечения заданного интервала времени.\nУ элемента только статическое свойство <b>time</b>. \nЭлемент является активным, то есть он использует действия.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_timer.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "TIMER_TIME"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INPUT_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Input</b> item is used for is used to receive text messages from a user, and process them.\nСhatbot may only have one <b class="green">Input</b> item.\nThe only item property is <b>kind</b>.\nIt\'s an active item, which means it uses actions.',
                            ru: 'Элемент <b class="green">Input</b> используется для получения от клиента текстовых сообщений с последующей их обработкой.\nВ чат-боте всегда есть один <b class="green">Input</b>.\nУ элемента есть только одно свойство - <b>kind</b>.\nЭлемент является активным, то есть он использует <b>"действия"</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_input.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "INPUT_KIND"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BUTTONS_ITEM: [ {
                        type: "text",
                        text: {
                            en: 'The <b class="green">Buttons</b> item contains a set of buttons, which the botton bots are based on. Clicking a button triggers its respective <b>"actions"</b>.\nThe item itself has no properties, but every button has the <b>kind</b> property.\nIt\'s an active item, which means it uses <b>"actions"</b>.',
                            ru: 'Элемент <b class="green">Buttons</b> содержит в себе набор кнопок, которые являются основой кнопочных ботов. Нажатие на кнопку выполняет заданные <b>"действия"</b>.\nСам элемент не имеет свойств, а вот у каждой кнопки есть свойство - <b>kind</b>.\nЭлемент является активным, то есть он использует <b>"действия"</b>.'
                        }
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_buttons.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "Properties",
                                    ru: "Свойства"
                                },
                                actions: [ {
                                    state: "BUTTONS_KIND"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    NLU_INTENTS: [ {
                        type: "text",
                        text: {
                            en: "Each NLU <b>intent</b> has a unique name and a set of examples separated by semicolons. The examples help your bot to learn to distinguish user intents.\nEach supported language requires its set of examples.\nThe intents are used in the Input item.",
                            ru: "Каждое <b>намерение</b> NLU имеет уникальное название и набор примеров, разделённых через точку с запятой. При запуске бот обучается на примерах и способен их различать.\nПримеры намерений различаются для разных языков.\nИспользуются намерения в элементе Input."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_nlu_intents.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "MAP_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    TIMER_TIME: [ {
                        type: "text",
                        text: {
                            en: 'The <b>time</b> property sets the timer countdown time in milliseconds. When the timer runs out, <b>"actions"</b> will be performed.',
                            ru: 'Свойство <b>time</b> измеряется в миллисекундах и устанавливает время отсчёта таймера. Когда таймер отработает, будут выполнены <b>"действия"</b>.'
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_timer_time.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "TIMER_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    INPUT_KIND: [ {
                        type: "text",
                        text: {
                            en: "The <b>kind</b> property sets the expected type of user data. It may be a <i>number, e-mail, phone number, intent</i> or a random text.\nIf a user enters data of inappropriate type, <i>null</i> is returned to the INPUT slot.",
                            ru: "Свойство <b>kind</b> устанавливает тип данных, который необходимо получить от клиента. Это может быть <i>число, телефон, e-mail, намерение</i> или просто любой текст.\nЕсли пользователь введёт текст неподходящего типа, то слот INPUT будет записано <i>null</i>."
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_input_kind.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "INPUT_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    BUTTONS_KIND: [ {
                        type: "text",
                        text: {
                            en: "In the <b>kind</b> property, you can set the button type (button, checkbox or radio), and the position of the text inside the button (left, center, or right).\nWhen the button is clicked, the respective <b>actions</b> will be performed.\nIf the button type is checkbox or radio, the option will be deemed selected.",
                            ru: 'В свойстве <b>kind</b> можно выбрать тип кнопки (кнопка, чекбокс или radio), а также установить расположение текста внутри кнопки (слева, по центру, справа).\nПри клике на кнопку будут выполнены <b>"действия"</b>.\nВ случае, когда тип кнопки чекбокс или radio, кнопка будет выбрана.'
                        },
                        pre: 0
                    }, {
                        type: "images",
                        items: [ {
                            type: "image",
                            url: "https://qudata.com/qubot/im/ts/help/ed_buttons_kind.JPG"
                        } ]
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "BUTTONS_ITEM"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "OK",
                                    ru: "Понятно"
                                },
                                actions: [ {
                                    state: "ITEM_PROPERTIES"
                                } ]
                            } ]
                        } ]
                    }, {
                        type: "input",
                        kind: "text",
                        actions: []
                    } ],
                    LINKS_MENU: [ {
                        type: "text",
                        text: {
                            en: "Learn more about step navigation.",
                            ru: "Может быть, Вы хотите узнать о переходах больше?"
                        }
                    }, {
                        type: "buttons",
                        items: [ {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Types of navigation",
                                    ru: "Виды переходов"
                                },
                                actions: [ {
                                    state: "GOTO"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "Default navigation",
                                    ru: "Переход по умолчанию"
                                },
                                actions: [ {
                                    state: "DEF_STEP"
                                } ]
                            } ]
                        }, {
                            items: [ {
                                type: "button",
                                button: {
                                    en: "⇧ Back",
                                    ru: "⇧ Назад"
                                },
                                actions: [ {
                                    state: "EDIT_STEP_MENU"
                                } ]
                            }, {
                                type: "button",
                                button: {
                                    en: "🏠 Home",
                                    ru: "🏠 В начало"
                                },
                                actions: [ {
                                    state: "MAIN"
                                } ]
                            } ]
                        }, {
                            items: []
                        } ]
                    }, {
                        type: "input",
                        actions: [],
                        kind: "text"
                    } ]
                },
                slots: {
                    LANGUAGE: "en",
                    INPUT: ""
                },
                cards: {
                    states: {
                        MAIN: {
                            c: 1,
                            r: 0,
                            x: 556,
                            y: 185
                        },
                        COLOR_STATE: {
                            c: 2,
                            r: 4,
                            x: 300,
                            y: 49,
                            folder: "FAQ"
                        },
                        LINKS: {
                            c: 1,
                            r: 9,
                            x: 300,
                            y: 211,
                            folder: "EDIT_STEPS"
                        },
                        SCRIPT: {
                            c: 3,
                            r: 3,
                            x: 417,
                            y: 602,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_CONTENT: {
                            c: 2,
                            r: 3,
                            x: 138,
                            y: 758,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_LIST: {
                            c: 4,
                            r: 3,
                            x: 658,
                            y: 761,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_CLEAR: {
                            c: 2,
                            r: 6,
                            x: 814,
                            y: 918,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_ADD: {
                            c: 4,
                            r: 6,
                            x: 3.601104940539246,
                            y: 27.381450582458953,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_TEXT: {
                            c: 1,
                            r: 4,
                            x: 58.00987545665905,
                            y: 22.72608733260142,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_IMAGE: {
                            c: 2,
                            r: 4,
                            x: 14.020614920465402,
                            y: 7.02360216654927,
                            folder: "SCRIPTS"
                        },
                        CHANGE_LANGUAGE: {
                            c: 2,
                            r: 0,
                            x: 867,
                            y: 68
                        },
                        START_STEP: {
                            c: 2,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        GREET: {
                            c: 0,
                            r: 0,
                            x: 535,
                            y: 25
                        },
                        FAQ: {
                            c: 0,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "FAQ"
                        },
                        FOLDERS: {
                            c: 5,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        STEP_POSITION: {
                            c: 1,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        ITEMS: {
                            c: 2,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        GOTO: {
                            c: 2,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        DEF_STEP: {
                            c: 3,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        ACTIONS: {
                            c: 0,
                            r: 9,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        MAP_LINK: {
                            c: 1,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "FAQ"
                        },
                        IMG_LINK: {
                            c: 0,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "FAQ"
                        },
                        START_LANGUAGE: {
                            c: 1,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "FAQ"
                        },
                        SCRIPT_CHECK: {
                            c: 3,
                            r: 4,
                            x: 700,
                            y: 447,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_RADIO: {
                            c: 4,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_GENERAL: {
                            c: 1,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_IF: {
                            c: 2,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_SET: {
                            c: 1,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_WHILE: {
                            c: 3,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_SUM: {
                            c: 5,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_TOTAL: {
                            c: 6,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_FOREACH: {
                            c: 8,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_GET: {
                            c: 7,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_PUSH: {
                            c: 3,
                            r: 6,
                            x: 0,
                            y: 0,
                            folder: "SCRIPTS"
                        },
                        SCRIPT_LEN: {
                            c: 1,
                            r: 6,
                            x: 575,
                            y: 920,
                            folder: "SCRIPTS"
                        },
                        COPY_STEPS: {
                            c: 4,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        CREATE_STEP: {
                            c: 0,
                            r: 2,
                            x: 100,
                            y: 49,
                            folder: "CREATE_STEPS"
                        },
                        REMOVE_STEP: {
                            c: 1,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        CREATE_LINE: {
                            c: 3,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        NEXT_STEP_INFO: {
                            c: 0,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        SELECT_START: {
                            c: 5,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        PASTE_STEPS: {
                            c: 6,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        GRID_VIEW: {
                            c: 2,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        FREE_VIEW: {
                            c: 4,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        DRAG_STEP: {
                            c: 3,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        EDIT_STEPS_IN_DIR: {
                            c: 4,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        FOLDER_MENU: {
                            c: 3,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        CREATE_FOLDER: {
                            c: 2,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        REMOVE_FOLDERS: {
                            c: 1,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        COPY_FOLDER: {
                            c: 1,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        PASTE_FOLDER: {
                            c: 3,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        STEP_MOVE_IN_DIR: {
                            c: 5,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        STEP_MOVE_OUT_DIR: {
                            c: 7,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        RENAME_FOLDER: {
                            c: 0,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        FOLDER_LINE: {
                            c: 6,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        INSERT_TEMPLATE: {
                            c: 0,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        INSERT_YES_NO: {
                            c: 2,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        INSERT_ADD_LANGUAGE: {
                            c: 4,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "CREATE_STEPS"
                        },
                        OPEN_PANEL: {
                            c: 0,
                            r: 7,
                            x: 100,
                            y: 211,
                            folder: "EDIT_STEPS"
                        },
                        EDIT_STEP_MENU: {
                            c: 1,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        VISUAL_ITEMS: {
                            c: 0,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        LOGICAL_ITEMS: {
                            c: 1,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        ITEMS_MENU: {
                            c: 3,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        ADD_ITEM: {
                            c: 2,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        COPY_ITEM: {
                            c: 3,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        PASTE_ITEM: {
                            c: 4,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        REMOVE_ITEM: {
                            c: 4,
                            r: 7,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        DRAG_ITEM: {
                            c: 5,
                            r: 8,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        ITEM_PROPERTIES: {
                            c: 0,
                            r: 10,
                            x: 0,
                            y: 0,
                            folder: "EDIT_STEPS"
                        },
                        IMAGE_PROP: {
                            c: 4,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        NOTE_PROP: {
                            c: 6,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TEXT_ITEM: {
                            c: 1,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TEXT_COLOR: {
                            c: 3,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TEXT_CENTER: {
                            c: 2,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TEXT_PRE: {
                            c: 5,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        MAP_ITEM: {
                            c: 1,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        IMAGE_CENTER: {
                            c: 7,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        MAP_HEIGHT: {
                            c: 2,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        IMAGE_WIDTH: {
                            c: 6,
                            r: 2,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        BLOCK_ITEM: {
                            c: 3,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        BLOCK_TYPING: {
                            c: 4,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        BLOCK_COLOR: {
                            c: 5,
                            r: 3,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        NLU_ITEM: {
                            c: 2,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        ACTIONS_ITEM: {
                            c: 3,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TIMER_ITEM: {
                            c: 3,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        INPUT_ITEM: {
                            c: 2,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        BUTTONS_ITEM: {
                            c: 4,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        NLU_INTENTS: {
                            c: 1,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        TIMER_TIME: {
                            c: 4,
                            r: 4,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        INPUT_KIND: {
                            c: 1,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        BUTTONS_KIND: {
                            c: 5,
                            r: 5,
                            x: 0,
                            y: 0,
                            folder: "ITEMS"
                        },
                        LINKS_MENU: {
                            c: 4,
                            r: 9,
                            x: 100,
                            y: 100,
                            folder: "EDIT_STEPS"
                        }
                    },
                    folders: {
                        CREATE_STEPS: {
                            c: 0,
                            r: 1,
                            x: 100,
                            y: 49,
                            openGrid: !1
                        },
                        SCRIPTS: {
                            c: 1,
                            r: 2,
                            x: 613,
                            y: 515,
                            openGrid: !1
                        },
                        EDIT_STEPS: {
                            c: 0,
                            r: 2,
                            x: 187,
                            y: 182,
                            openGrid: !1
                        },
                        FAQ: {
                            c: 0,
                            r: 3,
                            x: 980,
                            y: 273,
                            openGrid: !1
                        },
                        ITEMS: {
                            c: 1,
                            r: 1,
                            x: 59,
                            y: 322,
                            openGrid: !1
                        }
                    }
                }
            }
        };
    }
}

class QuBotEditorState extends QuBotEditorBase {
    constructor(editor) {
        super(editor), this.caption = null, this.content = null, this.editor = editor, 
        this.items = new QuBotEditorStateItems(editor), this.actions = null, this.updateCard = !0, 
        this.startEditText = !1;
    }
    init() {
        this.actions.init();
    }
    clear() {
        for (;this.content.firstChild; ) this.content.removeChild(this.content.firstChild);
    }
    create() {
        var editorElem = document.getElementById("qubot-state-editor");
        let editor = this.editor, info = this.add(editorElem, "info");
        info.classList.add("qubot-disable-select"), info.id = "qubot-cur_step-title", 
        info.innerHTML = this.editor.locale.get("Current step:");
        var caption = this.add(editorElem, "qubot-caption qubot-card"), menu = (this.caption = this.add(caption, "qubot-list-group-item", "input"), 
        this.caption.setAttribute("placeholder", "Step name here..."), this.caption.onchange = function() {
            editor.stateEditor.onchangeStateName(this);
        }, this.caption.onmouseover = function() {
            editor.help.showHint(this, "hintStateName");
        }, this.caption.onclick = function() {
            editor.stateEditor.startEditText = !0;
        }, this.caption.onmouseout = function() {
            editor.help.hideHint(), editor.stateEditor.startEditText = !1;
        }, this.add(caption, "qubot-disable-select qubot-select-lang")), caption = (this.add(menu, "qubot-list-group-item btn-lang", "button").innerHTML = this.LANGUAGE, 
        menu.onmouseover = function() {
            editor.help.showHint(this, "hintLANGUAGE");
        }, menu.onmouseout = function() {
            editor.help.hideHint();
        }, this.add(caption, "qubot-list-group-item qubot-check"));
        this.startStateChk = this.add(caption, "qudata-checkbox", "input"), this.startStateChk.setAttribute("id", "start-box"), 
        this.startStateChk.setAttribute("name", "start-box"), this.startStateChk.setAttribute("type", "checkbox");
        this.add(caption, "qudata-checkbox", "label").setAttribute("for", "start-box"), 
        this.startStateChk.onchange = function() {
            editor.stateEditor.onchangeStartState(this);
        }, this.startStateChk.onmouseover = function() {
            editor.help.showHint(this, "hintStartState");
        }, this.startStateChk.onmouseout = function() {
            editor.help.hideHint();
        }, this.createLanguageMenu(menu);
        caption = this.add(editorElem, "qubot-editor-content"), this.content = this.add(caption, "qubot-content"), 
        this.content.id = "qubot-items", (info = this.add(caption, "info2")).classList.add("qubot-disable-select"), 
        info.id = "qubot-item_props-title", info.innerHTML = this.editor.locale.get("Item properties:"), 
        menu = this.add(caption, "actions actions-container");
        menu.id = "qubot-actions", this.actions = new QuBotEditorStateActions(menu, this.editor);
    }
    createLanguageMenu(menu) {
        let stateEditor = this, sub = (menu.style.fontFamily = "Courier", this.add(menu, "qubot-card qubot-lang-popup"));
        [ "en", "ru", "uk", "de", "fr", "es", "jp" ].forEach(lang => {
            var a = this.add(sub, "qubot-list-group-item");
            this.LANGUAGE == lang && a.classList.add("active"), a.innerHTML = lang, 
            a.onclick = function() {
                stateEditor.setLangMenu(this, lang);
            };
        });
    }
    setLangMenu(obj, lang) {
        this.LANGUAGE = lang, this.actions.LANGUAGE = lang;
        var langPanel = document.querySelector(".qubot-select-lang");
        langPanel.querySelector(".btn-lang").innerHTML = lang, Array.from(langPanel.querySelectorAll(".qubot-list-group-item.active")).forEach(ob => {
            ob.classList.remove("active");
        }), obj.classList.add("active"), this.activeItem && "intents" === this.activeItem.json.type ? this.actions.show() : this.editor.resetEditorAndAllCards();
    }
    set(items, redraw = !1) {
        this.editor.dontSave = !0, this.items.set(items);
        var messages = this.content.getElementsByClassName("qubot-message");
        if (void 0 !== messages) for (;0 < messages.length; ) messages[0].remove();
        var inputs = this.content.getElementsByClassName("item-input");
        if (void 0 !== inputs) for (;0 < inputs.length; ) inputs[0].remove();
        this.caption.value = this.editor.bot.state, this.startStateChk.checked = this.editor.bot.state === this.editor.bot.start;
        var message = this.add(this.content, "qubot-message");
        let input = null;
        if (items) {
            this.activeItem = this.activeItem && redraw ? this.activeItem : {
                id: 0,
                json: {}
            }, 1 === items.length && items.push({
                type: "actions",
                actions: []
            }), this.addItemsPanel(), this.addPasteMenu();
            for (let i = 0; i < items.length; i++) {
                var item = items[i];
                if ("text" === item.type) this.addText(message, item.text, i, i == this.activeItem.id); else if ("buttons" === item.type) this.addButtons(message, item.items, i, this.activeItem.id); else if ("images" === item.type) this.editor.readonlyBot(!1) ? 1 == item.items.length ? this.addMedia(message, item.items[0], i, "image", "hintImageItem", i == this.activeItem.id) : 1 < item.items.length && this.addImages(message, item.items, i, this.activeItem.id) : this.addImages(message, item.items, i, this.activeItem.id); else if ("gallery" !== item.type) if ("actions" === item.type) this.addActions(message, i, "actions", i == this.activeItem.id); else if ("timer" === item.type) this.addActions(message, i, "timer", i == this.activeItem.id, item); else if ("message" === item.type) this.addActions(message, i, "message", i == this.activeItem.id, item); else if ("intents" === item.type) this.addActions(message, i, "intents", i == this.activeItem.id); else if ("map" === item.type) this.addMap(message, item, i, i == this.activeItem.id); else if ("video" === item.type) this.addMedia(message, item, i, "video", "hintVideoItem", i == this.activeItem.id); else if ("audio" === item.type) this.addMedia(message, item, i, "audio", "hintAudioItem", i == this.activeItem.id); else if ("image" === item.type) this.addMedia(message, item, i, "image", "hintImageItem", i == this.activeItem.id); else {
                    if ("note" !== item.type && "comment" !== item.type) continue;
                    this.addComment(message, item, i, i == this.activeItem.id);
                }
                if (!this.editor.readonlyBot()) {
                    item = document.querySelectorAll(".qubot-message>.qubot-item");
                    if (0 < item.length) {
                        let id = i, edt = this;
                        item[item.length - 1].onmouseover = function(e) {
                            edt.addPasteButtons(this, id);
                        }, item[item.length - 1].onclick = function(e) {
                            e.stopPropagation();
                        };
                    }
                }
            }
            for (let i = items.length - 1; -1 < i; i--) if ("input" === items[i].type) {
                input = items[i];
                break;
            }
            input || (items.splice(items.length - 1, 0, {
                type: "input",
                actions: []
            }), input = items[items.length - 1]);
            let editor = this.editor;
            (redraw = this.add(this.content, "item-input")).id = "qubot-editor-" + (items.length - 1), 
            redraw.innerHTML = this.editor.locale.get("Click to show actions when entering text"), 
            redraw.onclick = function() {
                editor.stateEditor.onclickInput(this);
            }, redraw.onmouseover = function() {
                editor.help.showHint(this, "hintInputItem");
            }, redraw.onmouseout = function() {
                editor.help.hideHint(), editor.dontSave = !1;
            };
        }
        this.editor.dontSave = !1;
    }
    addPasteButtons(item, id) {
        var parent = document.querySelector("#qubot-state-editor .qubot-editor-content");
        let editor = this.editor;
        var items = document.querySelectorAll(".qubot-control-panel");
        if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        var rect = item.getBoundingClientRect(), top = document.createElement("div"), bot = (top.classList.add("qubot-control-panel", "qudata-svg", "qudata-svg-add"), 
        top.style.top = item.offsetTop - 10 + "px", top.setAttribute("for", id), 
        document.createElement("div"));
        bot.classList.add("qubot-control-panel", "qudata-svg", "qudata-svg-add"), 
        bot.style.top = item.offsetTop + rect.height - 10 + "px", bot.setAttribute("for", id + 1), 
        parent.querySelector(".qubot-content").append(top, bot), top.onclick = function(e) {
            editor.showAddMenu(e, document.getElementById("qubot-paste-items-panel"), this.getAttribute("for"), this.getBoundingClientRect());
            var items = document.querySelectorAll(".qubot-control-panel");
            if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        }, bot.onclick = function(e) {
            editor.showAddMenu(e, document.getElementById("qubot-paste-items-panel"), this.getAttribute("for"), this.getBoundingClientRect());
            var items = document.querySelectorAll(".qubot-control-panel");
            if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        };
    }
    addPasteLine(message, ids, kind) {
        var editor = this.editor;
        this.add(message, "qubot-line");
        editor.save();
    }
    addPasteMenu() {
        if (!this.editor.readonlyBot() && !document.getElementById("qubot-paste-panel")) {
            let editor = this.editor;
            var menu = this.add(document.body, "qubot-add-menu");
            menu.setAttribute("id", "qubot-paste-panel"), this.add(menu, "qudata-add-menu-add qudata-svg qudata-svg-add").onclick = function(e) {
                var id = this.parentNode.getAttribute("for");
                editor.showAddMenu(e, document.getElementById("qubot-paste-items-panel"), id - 1, this.getBoundingClientRect());
            }, this.add(menu, "qudata-add-menu-paste qudata-svg qudata-svg-paste").onclick = function() {
                var id = this.parentNode.getAttribute("for");
                editor.stateEditor.items.pasteItemOnID(parseInt(id)), editor.resetEditorAndCard(), 
                editor.save();
            };
        }
    }
    addItemsPanel() {
        var items_menu;
        this.editor.readonlyBot() || document.getElementById("qubot-paste-items-panel") || ((items_menu = this.add(document.body, "")).id = "qubot-paste-items-panel", 
        this.addAddMenu(items_menu));
    }
    addAddMenu(btn_add) {
        let editor = this.editor;
        return this.createAddMenu(btn_add, [ [ "paste", function() {
            var id = this.parentNode.parentNode.getAttribute("for");
            editor.stateEditor.items.pasteItemOnID(parseInt(id)), editor.resetEditorAndCard(), 
            editor.save();
        } ], [ "text", function() {
            editor.stateEditor.items.addTextToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "buttons", function() {
            editor.stateEditor.items.addButtonsToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "image", function() {
            editor.stateEditor.items.addImageToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "gallery", function() {
            editor.stateEditor.items.addImagesToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "actions", function() {
            editor.stateEditor.items.addActionsToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "timer", function() {
            editor.stateEditor.items.addTimerToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "block", function() {
            editor.stateEditor.items.addMessageToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "map", function() {
            editor.stateEditor.items.addMapToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "video", function() {
            editor.stateEditor.items.addVideoToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "audio", function() {
            editor.stateEditor.items.addAudioToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "nlu", function() {
            editor.stateEditor.items.addIntentsToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ], [ "note", function() {
            editor.stateEditor.items.addCommentToStateOnID(this.parentNode.parentNode.getAttribute("for")), 
            editor.save(), editor.resetEditorAndCard();
        } ] ]);
    }
    expandTextarea(elm) {
        elm.style.cssText = "height:auto; padding:0", elm.style.cssText = "height:" + (elm.scrollHeight + 3) + "px";
    }
    addActions(message, id, kind, isActive = !1, item) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item action-item" + (isActive ? " active" : "")), content = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(message, "qubot-items-content")), icon = (content.onclick = function() {
            editor.stateEditor.onclickItemOnID([ id ]);
        }, content.onmouseout = function() {
            editor.help.hideHint(), editor.dontSave = !1;
        }, isActive && content.onclick(), this.add(content, "icon qudata-svg"));
        switch (kind) {
          case "actions":
            icon.classList.add("qudata-svg-actions"), content.onmouseover = function() {
                editor.help.showHint(this, "hintActionItem");
            };
            break;

          case "timer":
            icon.classList.add("qudata-svg-timer"), content.onmouseover = function() {
                editor.help.showHint(this, "hintTimerItem");
            };
            var txtTimer = this.add(icon, "qubot-txt-time");
            txtTimer.id = "qubot-txt-time", "" === item.time && (item.time = 1e3), 
            txtTimer.innerHTML = 0 < item.time ? item.time < 1e3 ? item.time + "ms" : Math.round(item.time / 100) / 10 + "s" : "";
            break;

          case "message":
            icon.classList.add("qudata-svg-block"), content.onmouseover = function() {
                editor.help.showHint(this, "hintMessageItem");
            };
            txtTimer = this.add(icon, "qubot-txt-timeB");
            txtTimer.id = "qubot-txt-timeB", item.typing || (item.typing = 0), txtTimer.innerHTML = 0 < item.typing ? item.typing < 1e3 ? item.typing + "ms" : Math.round(item.typing / 100) / 10 + "s" : "";
            break;

          case "intents":
            icon.classList.add("qudata-svg-nlu"), content.onmouseover = function() {
                editor.help.showHint(this, "hintIntentItem");
            };
            break;

          default:
            icon.classList.add("qudata-svg-unknown");
        }
        this.editor.readonlyBot(!1) && icon.classList.add("single");
        isActive = this.add(message, "controls");
        if (this.editor.readonlyBot()) {
            let copy = this.add(isActive, "copy qudata-svg-copy qudata-svg");
            copy.onclick = function() {
                editor.stateEditor.items.copyItemOnID(id);
            };
        } else {
            kind = this.add(content, "controls");
            this.add(kind, "copy qudata-svg-copy qudata-svg").onclick = function() {
                editor.stateEditor.items.copyItemOnID(id);
            }, this.add(isActive, "remove qudata-svg-remove qudata-svg").onclick = function() {
                editor.stateEditor.items.deleteItemOnID(id);
            };
        }
        editor.save();
    }
    onclickActions(obj, activate = !0) {
        var ids = obj.parentNode.id.substring(13).split("_");
        this.activeItem && "intents" === this.activeItem.json.type && this.editor.resetEditorAndAllCards(), 
        this.activeItem.id = ids, this.activeItem.json = this.editor.bot.states[this.editor.bot.state][ids[0]], 
        this.actions.set(this.activeItem), activate && (document.querySelectorAll(".qubot-item.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), document.querySelectorAll(".item-input.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), this.removeAddClass(obj, "qubot-state-editor-active-item")), this.actions.show();
    }
    onclickActionsOnID(id, j = null) {
        this.activeItem.id = id, this.activeItem.json = null != j ? this.editor.bot.states[this.editor.bot.state][id].items[j] : this.editor.bot.states[this.editor.bot.state][id], 
        this.actions.set(this.activeItem), this.actions.show();
    }
    onclickItemOnID(ids) {
        let item = null;
        if (Array.isArray(ids)) {
            let items = this.editor.bot.states[this.editor.bot.state], id = ids[0];
            for (let i = 1; i < ids.length; i++) items = items[id].items, id = ids[i];
            item = items[id];
        } else item = this.editor.bot.states[this.editor.bot.state][ids];
        this.activeItem.id = ids, this.activeItem.json = item, this.actions.set(this.activeItem), 
        this.actions.show();
    }
    addText(message, value, id, isActive = !1) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item text" + (isActive ? " active" : "")), content = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(message, "qubot-items-content")), content = this.add(content, "", "textarea"), tx = (content.setAttribute("placeholder", "Text this..."), 
        content.setAttribute("spellcheck", "true"), this.getText(value)), value = (tx.length ? content.value = tx : 0 < (tx = this.getNonEmplyText(value)).length && content.setAttribute("placeholder", tx), 
        content.onmouseover = function() {
            editor.help.showHint(this, "hintTextItem");
        }, content.onmouseout = function() {
            editor.help.hideHint(), editor.stateEditor.startEditText = !1, editor.dontSave = !1;
        }, content.onclick = function() {
            editor.stateEditor.onclickItemOnID(id), editor.stateEditor.startEditText = !0;
        }, isActive && content.onclick(), this.editor.readonlyBot() ? (content.setAttribute("disabled", ""), 
        content.setAttribute("readonly", "")) : (content.oninput = function() {
            editor.stateEditor.oninputText(this, id);
        }, content.onchange = function() {
            editor.save();
        }), this.add(message, "controls"));
        this.add(value, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.editor.readonlyBot() || (this.add(value, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        }), editor.save();
    }
    oninputText(obj, id) {
        var card;
        this.editor.readonlyBot() || (card = this.editor.listEditor.findCardByState(this.editor.bot.state), 
        obj && card && (obj = obj.value, this.setText(this.getItem(id).text, obj), 
        this.updateCard) && this.editor.listEditor.openCardState(this.editor.bot.state, card.elem), 
        this.editor.listEditor.onResizeCardEvent(card));
    }
    getItem(id) {
        if (this.editor.bot.state in this.editor.bot.states) return this.editor.bot.states[this.editor.bot.state][id];
    }
    onclickText(obj) {
        this.expandTextarea(obj), this.onclickActions(obj);
    }
    addButtons(message, items, id) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item buttons"), buttons = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(this.add(message, "qubot-items-content"), "buttons"));
        for (let row = 0; row < items.length; row++) 0 == items[row].items.length ? (items.splice(row, 1), 
        row--) : this.addRow(buttons, items[row].items, id, row);
        this.editor.readonlyBot() || this.addRow(buttons, [], id, items.length);
        message = this.add(message, "controls");
        return this.add(message, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.editor.readonlyBot() || (this.add(message, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        }), editor.save(), buttons;
    }
    addRow(message, items, id, row) {
        let editor = this.editor;
        var itemRow = this.add(message, "qubot-item qubot-buttons-row");
        itemRow.id = "qubot-editor-" + id + "_" + row;
        for (let i = 0; i < items.length; i++) this.addButton(itemRow, items[i].button, id, row, i);
        return this.editor.readonlyBot() || (message = this.add(itemRow, "qubot-item qubot-add-button"), 
        this.add(this.add(message, "qubot-items-content"), "qudata-icon qudata-svg qudata-svg-add"), 
        message.onclick = function() {
            editor.stateEditor.items.addButtonToRowOnID(id, row), editor.save(), 
            editor.resetEditorAndCard();
        }), editor.save(), itemRow;
    }
    addButton(message, caption, id, row, j) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item button"), input = (message.id = "qubot-editor-" + id + "_" + row + "_" + j, 
        message.onmousedown = function(e) {
            editor.stateEditor.onclickItem(this, e, 4), editor.stateEditor.onclickButtonOnID([ id, row, j ]);
        }, this.editor.readonlyBot(!1) || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = e => editor.dragStartBtn(e, id)), 
        this.add(message, "", "input")), tx = (input.setAttribute("placeholder", "Button text..."), 
        input.oninput = function() {
            editor.stateEditor.oninputButtonOnID(this, [ id, row, j ]);
        }, input.onchange = function() {
            editor.save();
        }, this.getText(caption));
        return tx.length ? input.value = tx : (tx = this.getNonEmplyText(caption), 
        input.setAttribute("placeholder", tx)), this.editor.readonlyBot(!1) || (caption = this.add(message, "controls single"), 
        this.add(caption, "copy qudata-svg-clone qudata-svg").onclick = function() {
            editor.stateEditor.items.cloneItemOnID([ id, row, j ]);
        }, caption.classList.remove("single"), this.add(caption, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID([ id, row, j ]);
        }), this.editor.readonlyBot(!1) && input.setAttribute("disabled", ""), message;
    }
    btnDisplayNone(obj) {
        var btns = obj.getElementsByClassName("qubot-btn"), btns = obj.parentNode.getElementsByClassName("qubot-btn");
        for (let i = 0; i < btns.length; i++) btns[i].style.display = "none";
    }
    btnDisplayFlex(obj) {
        var btns = obj.getElementsByClassName("qubot-btn"), btns = obj.parentNode.getElementsByClassName("qubot-btn");
        for (let i = 0; i < btns.length; i++) btns[i].style.display = "flex";
    }
    onclickButton(obj) {
        var ids;
        0 !== this.editor.bot.state.length && this.editor.bot.state in this.editor.bot.states && (ids = obj.parentNode.id.substring(13).split("_"), 
        this.activeItem = this.editor.bot.states[this.editor.bot.state][ids[0]].items[ids[1]], 
        this.actions.set(this.activeItem), this.removeAddClass(obj, "qubot-state-editor-active-item"), 
        this.actions.show());
    }
    onclickButtonOnID(ids) {
        0 !== this.editor.bot.state.length && this.editor.bot.state in this.editor.bot.states && (this.activeItem.id = ids, 
        this.activeItem.json = this.editor.bot.states[this.editor.bot.state][ids[0]].items[ids[1]].items[ids[2]], 
        this.actions.set(this.activeItem), this.actions.show());
    }
    oninputButton(obj, i, j) {
        var card;
        this.editor.readonlyBot() || (card = document.getElementById("qubot-state-" + this.editor.bot.state), 
        obj = obj.value, this.setText(this.editor.bot.states[this.editor.bot.state][i].items[j].button, obj), 
        this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card));
    }
    oninputButtonOnID(obj, ids) {
        var card;
        this.editor.readonlyBot() || (card = document.getElementById("qubot-state-" + this.editor.bot.state), 
        obj = obj.value, this.setText(this.editor.bot.states[this.editor.bot.state][ids[0]].items[ids[1]].items[ids[2]].button, obj), 
        this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card));
    }
    addImages(message, items, id) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item images"), images = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(this.add(message, "qubot-items-content"), "images"));
        for (let j = 0; j < items.length; j++) this.addImageToGallery(items[j].image || items[j].url, images, id, j);
        this.editor.readonlyBot(!1) || (add_image = this.add(images, "qubot-item qubot-add-button"), 
        this.add(this.add(add_image, "qubot-items-content"), "qudata-icon qudata-svg qudata-svg-add"), 
        add_image.onclick = function() {
            editor.stateEditor.items.addImageToGalleryOnID(id), editor.save(), editor.resetEditorAndCard();
        });
        var add_image = this.add(message, "controls");
        return this.add(add_image, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.editor.readonlyBot() || (this.add(add_image, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        }), editor.save(), images;
    }
    addImageToGallery(url, images, id, j) {
        let editor = this.editor;
        var images = this.add(images, "qubot-item media"), content = (images.id = "qubot-editor-" + id + "_" + j, 
        images.onmousedown = function(e) {
            editor.stateEditor.onclickItem(this, e, 3);
        }, this.add(images, "qubot-items-content")), notice = this.add(content, "notice"), notice = (this.add(notice, "icon qudata-svg qudata-svg-image"), 
        this.add(content, "", "input")), url = (notice.setAttribute("placeholder", "Image link (https://|ftp://)..."), 
        notice.value = url, notice.onmouseover = function() {
            editor.help.showHint(this, "hintImageItem");
        }, notice.onmouseout = function() {
            editor.help.hideHint(), editor.stateEditor.startEditText = !1, editor.dontSave = !1;
        }, notice.onclick = function() {
            editor.stateEditor.onclickItemOnID([ id, j ]);
        }, this.editor.readonlyBot() ? (notice.setAttribute("disabled", ""), notice.setAttribute("readonly", "")) : notice.onchange = function() {
            editor.stateEditor.onchangeMedia(this, id, j);
        }, this.add(content, "controls"));
        return this.editor.readonlyBot(!1) && url.classList.add("single"), this.editor.readonlyBot() || (this.add(url, "upload qudata-svg-upload qudata-svg").onclick = function() {
            editor.stateEditor.items.uploadMedia(id, "UploadImage", "image", ".jpg, .png", j);
        }), this.add(url, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID([ id, j ]);
        }, this.editor.readonlyBot() || (this.add(url, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID([ id, j ]);
        }), editor.save(), images;
    }
    onclickImage(obj) {
        var ids = obj.parentNode.id.substring(13).split("_");
        this.activeItem.id = ids, this.activeItem.json = this.editor.bot.states[this.editor.bot.state][ids[0]].items[ids[1]], 
        this.actions.set(this.activeItem), this.removeAddClass(obj, "qubot-state-editor-active-item"), 
        this.actions.show();
    }
    onchangeImage(obj, i, j) {
        if (!this.editor.readonlyBot()) {
            let editor = this.editor;
            var card = document.getElementById("qubot-state-" + this.editor.bot.state);
            obj.value = obj.value.replace(/\s+/g, "");
            let item = this.editor.bot.states[this.editor.bot.state][i].items[j];
            if (this.validateUrl(obj.value)) {
                let old_url = item.image;
                var img = new Image();
                img.onload = function() {
                    item.file_width = this.width, item.file_height = this.height, 
                    this.onerror = null, this.src = "";
                }, img.onerror = function() {
                    editor.help.alert("errorImageNotAccess"), item.image = old_url, 
                    obj.value = old_url, editor.save();
                }, img.src = obj.value;
            } else {
                if (0 != obj.value.length) return obj.value = this.items.items[i].items[j].image, 
                void this.editor.help.alert("errorIncorrentImageURL");
                item.file_width = 0, item.file_height = 0;
            }
            item.image = obj.value, this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card), 
            this.editor.save();
        }
    }
    addGallery(message, id) {
        message = this.add(message, "gallery");
        return this.addButtonsMenu(message), this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, document.getElementById("qubot-state-" + this.editor.bot.state)), 
        message;
    }
    addSlide(item, image, i, j) {
        image = this.add(image, "slide");
        image.id = "qubot-editor-" + i + "_" + j;
        let editor = this.editor;
        this.addBtnDel(image, function() {
            editor.stateEditor.items.deleteItem(this.parentNode), editor.resetEditorAndCard(), 
            editor.save();
        }, -2, -2), this.addBtnAdd(image, function() {
            editor.stateEditor.items.addButtonToState(this.parentNode), editor.resetEditorAndCard(), 
            editor.save();
        }, !1, !1, -2, -2), this.addBtnUp(image, function() {
            editor.stateEditor.items.moveItem(this.parentNode, -1), editor.resetEditorAndCard(), 
            editor.save();
        }, 5, -2), this.addBtnDn(image, function() {
            editor.stateEditor.items.moveItem(this.parentNode, 1), editor.resetEditorAndCard(), 
            editor.save();
        }, 5, -2);
        var text = this.add(image, "qubot-text", "textarea");
        return text.onchange = function() {
            editor.stateEditor.onchangeSlide(this, i, j), editor.stateEditor.expandTextarea(this);
        }, text.onclick = function() {
            editor.stateEditor.onclickSlide(this);
        }, text.oninput = function() {
            editor.stateEditor.expandTextarea(this);
        }, text.value = item.image, this.expandTextarea(text), text.onmouseover = function() {
            editor.help.showHint(this, "hintImageItem");
        }, text.onmouseout = function() {
            editor.help.hideHint(), editor.dontSave = !1;
        }, this.updateCard && editor.listEditor.openCardState(editor.bot.state, document.getElementById("qubot-state-" + editor.bot.state)), 
        editor.save(), image;
    }
    onclickSlide(obj) {
        this.expandTextarea(obj);
        var ids = obj.parentNode.id.substring(13).split("_");
        this.activeItem.id = ids, this.activeItem.json = this.editor.bot.states[this.editor.bot.state][ids[0]].items[ids[1]], 
        this.actions.set(this.activeItem), this.removeAddClass(obj, "qubot-state-editor-active-item"), 
        this.actions.show();
    }
    onchangeSlide(obj, i, j) {
        var card;
        this.editor.readonlyBot() || (card = document.getElementById("qubot-state-" + this.editor.bot.state), 
        obj.value = obj.value.replace(/\s+/g, ""), this.editor.bot.states[this.editor.bot.state][i].items[j].image = obj.value, 
        this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card), 
        this.editor.save());
    }
    addMap(message, item, id, isActive = !1) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item media-map" + (isActive ? " active" : "")), content = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(message, "qubot-items-content")), notice = this.add(content, "notice"), notice = (this.add(notice, "icon qudata-svg qudata-svg-map"), 
        this.add(content, "", "input")), item = (notice.setAttribute("placeholder", "Url from Google Map..."), 
        notice.value = item.url || "", notice.onmouseover = function() {
            editor.help.showHint(this, "hintMapItem");
        }, notice.onmouseout = function() {
            editor.help.hideHint(), editor.stateEditor.startEditText = !1, editor.dontSave = !1;
        }, notice.onclick = function() {
            editor.stateEditor.onclickItemOnID(id);
        }, isActive && notice.onclick(), this.editor.readonlyBot() ? (notice.setAttribute("disabled", ""), 
        notice.setAttribute("readonly", "")) : notice.onchange = function() {
            editor.stateEditor.onchangeMap(this, id);
        }, this.add(content, "controls")), isActive = this.add(message, "controls");
        if (this.editor.readonlyBot()) {
            let copy = this.add(isActive, "copy qudata-svg-copy qudata-svg");
            copy.onclick = function() {
                editor.stateEditor.items.copyItemOnID(id);
            };
        } else this.add(item, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.add(isActive, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        };
        editor.save();
    }
    onclickMap(obj) {
        this.onclickActions(obj, !1);
    }
    onchangeMap(obj, id) {
        if (!this.editor.readonlyBot()) {
            var card = document.getElementById("qubot-state-" + this.editor.bot.state);
            if (obj.value = obj.value.trim(), 0 < obj.value) {
                var start = obj.value.search(/(https?)\:\/\//);
                let end = obj.value.indexOf('"', start);
                if (start < 0) return obj.value = this.editor.bot.states[this.editor.bot.state][id].url, 
                void this.editor.help.alert("errorIncorrentMediaURL");
                end < 0 && (end = obj.value.length), obj.value = obj.value.substring(start, end);
            }
            this.editor.bot.states[this.editor.bot.state][id].url = obj.value, this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card), 
            this.editor.save();
        }
    }
    addMedia(message, item, id, className, hint, isActive = !1) {
        let editor = this.editor;
        var message = this.add(message, "qubot-item media" + (isActive ? " active" : "")), content = (message.id = "qubot-editor-" + id, 
        message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), this.add(message, "qubot-items-content")), notice = this.add(content, "notice"), icon = this.add(notice, "icon qudata-svg");
        switch (className) {
          case "audio":
            icon.classList.add("qudata-svg-audio");
            break;

          case "video":
            icon.classList.add("qudata-svg-video");
            break;

          case "image":
            icon.classList.add("qudata-svg-image");
            break;

          case "file":
            icon.classList.add("qudata-svg-file");
            break;

          default:
            icon.classList.add("qudata-svg-unknown");
        }
        var input = this.add(content, "", "input");
        switch (input.value = item.url || "", className) {
          case "audio":
            input.setAttribute("placeholder", "Audio link (https://|ftp://)...");
            break;

          case "video":
            input.setAttribute("placeholder", "Video link (https://|ftp://)...");
            break;

          case "image":
            input.setAttribute("placeholder", "Image link (https://|ftp://)..."), 
            input.value = item.url || item.image || "";
            break;

          case "file":
            input.setAttribute("placeholder", "Link to file (https://|ftp://)...");
            break;

          default:
            input.setAttribute("placeholder", "Media link (https://|ftp://)...");
        }
        input.onmouseover = function() {
            editor.help.showHint(this, hint);
        }, input.onmouseout = function() {
            editor.help.hideHint(), editor.stateEditor.startEditText = !1, editor.dontSave = !1;
        }, input.onclick = function() {
            editor.stateEditor.onclickItemOnID(id);
        }, isActive && input.onclick(), this.editor.readonlyBot() ? (input.setAttribute("disabled", ""), 
        input.setAttribute("readonly", "")) : input.onchange = function() {
            editor.stateEditor.onchangeMedia(this, id);
        };
        notice = this.add(content, "controls");
        if (!this.editor.readonlyBot()) {
            var upload = this.add(notice, "upload qudata-svg-upload qudata-svg");
            switch (className) {
              case "audio":
                upload.onclick = function() {
                    editor.stateEditor.items.uploadMedia(id, "UploadAudio", className, ".mp3");
                };
                break;

              case "video":
                upload.onclick = function() {
                    editor.stateEditor.items.uploadMedia(id, "UploadVideo", className, ".mp4");
                };
                break;

              case "image":
                upload.onclick = function() {
                    editor.stateEditor.items.uploadMedia(id, "UploadImage", className, ".jpg, .png");
                };
                break;

              case "file":
                upload.onclick = function() {
                    editor.stateEditor.items.uploadMedia(id, "UploadFile", className);
                };
                break;

              default:
                upload.onclick = function() {
                    editor.stateEditor.items.uploadMedia(id);
                };
            }
        }
        isActive = this.add(message, "controls");
        if (this.editor.readonlyBot()) {
            let copy = this.add(isActive, "copy qudata-svg-copy qudata-svg");
            copy.onclick = function() {
                editor.stateEditor.items.copyItemOnID(id);
            };
        } else this.add(notice, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.add(isActive, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        };
        editor.save();
    }
    onclickMedia(obj) {
        this.onclickActions(obj, !1);
    }
    onchangeMedia(obj, id, j = null) {
        if (!this.editor.readonlyBot()) {
            let editor = this.editor;
            var card = document.getElementById("qubot-state-" + this.editor.bot.state);
            obj.value = obj.value.replace(/\s+/g, "");
            let item = null;
            if (item = null == j ? this.editor.bot.states[this.editor.bot.state][id] : this.editor.bot.states[this.editor.bot.state][id].items[j], 
            this.validateUrl(obj.value)) {
                let old_url = item.url, media = null;
                switch (item.type) {
                  case "video":
                    media = document.createElement("video");
                    break;

                  case "audio":
                    media = new Audio();
                    break;

                  default:
                    media = document.createElement("img");
                }
                media.onloadedmetadata = function() {
                    item.duration = this.duration, editor.save(), this.onerror = null, 
                    this.src = "";
                }, media.onerror = function() {
                    editor.help.alert("errorMediaNotAccess"), item.url = old_url, 
                    obj.value = old_url, editor.save();
                }, media.src = obj.value;
            } else {
                if (0 != obj.value.length) return obj.value = this.items.items[id].url || this.items.items[id].image || "", 
                void this.editor.help.alert("errorIncorrentMediaURL");
                item.duration = 0, item.size = 0;
            }
            item.url = obj.value, this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, card), 
            this.editor.save();
        }
    }
    validateUrl(url) {
        return 0 != url.length && !!/^(https?|ftp)\:\/\/([a-z0-9]{1})((\.[a-z0-9-])|([a-z0-9-]))*\.([a-z]{2,6})(\/?)/.test(url);
    }
    addComment(message, item, id, isActive = !1) {
        let editor = this.editor;
        message = this.add(message, "qubot-item note" + (isActive ? " active" : "")), 
        message.id = "qubot-editor-" + id, message.onmousedown = function() {
            editor.stateEditor.onclickItem(this);
        }, this.editor.readonlyBot() || (this.add(message, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuOnID(e, id, !0);
        }), isActive = this.add(message, "qubot-items-content"), isActive = this.add(isActive, "", "textarea"), 
        isActive.setAttribute("placeholder", "Comment this..."), isActive.value = item.note || item.comment || "", 
        isActive.onclick = function() {
            editor.stateEditor.onclickItemOnID(id), editor.stateEditor.startEditText = !0;
        }, this.editor.readonlyBot() ? isActive.setAttribute("readonly", "") : (isActive.oninput = function() {
            editor.stateEditor.oninputComment(this, id);
        }, isActive.onchange = function() {
            editor.save();
        }), item = this.add(message, "controls");
        this.add(item, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.items.copyItemOnID(id);
        }, this.editor.readonlyBot() || (this.add(item, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.items.deleteItemOnID(id);
        }), editor.save();
    }
    onclickComment(obj) {
        this.expandTextarea(obj), this.onclickActions(obj);
    }
    onclickItem(obj, e = null, parent = 0) {
        if (document.querySelectorAll(".qubot-item.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), document.querySelectorAll(".item-input.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), obj.classList.add("active"), e) {
            e.stopPropagation();
            for (let i = 0; i < parent; i++) obj = obj.parentNode;
            obj.classList.add("active");
        }
    }
    oninputComment(obj, id) {
        this.editor.readonlyBot() || (this.editor.bot.states[this.editor.bot.state][id].note = obj.value, 
        this.expandTextarea(obj));
    }
    onclickInput(obj) {
        document.querySelectorAll(".qubot-item.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), document.querySelectorAll(".item-input.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), obj.classList.add("active");
        var items = this.editor.bot.states[this.editor.bot.state];
        for (let i = items.length - 1; 0 <= i; i--) if ("input" === items[i].type) {
            "kind" in items[i] || (items[i].kind = "text", this.editor.save()), 
            this.activeItem.id = i, this.activeItem.json = items[i], this.actions.set(this.activeItem), 
            this.actions.show();
            break;
        }
    }
    addButtonsMenu(item) {
        this.addDragMenu(item);
    }
    moveItemInState(obj, dir) {
        obj = obj.id.substring(13);
        this.moveItem(obj, dir), this.set(this.editor.bot.states[this.editor.bot.state]), 
        this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, document.getElementById("qubot-state-" + this.editor.bot.state));
    }
    moveButtonInState(obj, dir) {
        obj = obj.id.substring(13);
        this.moveItem(obj, dir), this.set(this.editor.bot.states[this.editor.bot.state]), 
        this.updateCard && this.editor.listEditor.openCardState(this.editor.bot.state, document.getElementById("qubot-state-" + this.editor.bot.state));
    }
    mouseOutItem(obj) {
        var btns = obj.getElementsByClassName("qubot-btn"), btns = obj.parentNode.getElementsByClassName("qubot-btn");
        for (let i = 0; i < btns.length; i++) btns[i].style.visibility = "visible";
    }
    buttonOnOut(obj) {
        0 !== this.editor.bot.state.length && this.editor.bot.state in this.editor.bot.states && (obj = obj.parentNode.id.substring(13).split("_"), 
        obj = this.items.getState(obj[0], obj[1]), obj = document.getElementById("qubot-state-" + obj)) && obj.classList.remove("qubot-state-link-main");
    }
    removeAddClass(obj, className) {
        Array.from(this.content.getElementsByClassName(className)).forEach(it => {
            it.classList.remove(className);
        }), obj.classList.add(className);
    }
    onclickEditor(obj) {
        var item;
        this.removeSlotsMenu(), this.editor.wasRun || "Help" === this.editor.qb.botName() ? this.editor.wasRun = !1 : this.editor.qb.close(), 
        this.editor.dontSave = !1, this.actions.wasOnClickState ? this.actions.wasOnClickState = !1 : (this.actions.changingState = null, 
        (item = document.querySelector(".qubot-set-btn.on")) && item.classList.remove("on"));
    }
    onchangeStateName(obj) {
        var newState, oldState;
        this.editor.readonlyBot() || (newState = obj.value.trim(), this.editor.bot.state !== newState && (0 === newState.length ? (obj.value = this.editor.bot.state, 
        this.editor.help.alert("NotEmptyState")) : 0 < newState.length && /^[0-9]/.test(newState) ? (obj.value = this.editor.bot.state, 
        this.editor.help.alert("errorIncorrentStateName")) : newState in this.editor.bot.states ? this.editor.help.alert("StateNameExists") : (oldState = this.editor.bot.state, 
        this.editor.renameState(oldState, newState), obj.value = newState, this.editor.init())));
    }
    async onchangeStartState(obj) {
        this.editor.readonlyBot() || (this.editor.bot.start === this.editor.bot.state ? (obj.checked = !0, 
        this.editor.help.alert("SetStartStateInOther")) : await this.editor.help.confirm("DoYouWantChabgeStartState") ? (this.editor.listEditor.setStartState(this.editor.bot.state), 
        obj.checked = !0) : obj.checked = !1);
    }
}

class QuBotEditorStateItems {
    constructor(editor) {
        this.items = null, this.editor = editor;
    }
    set(items) {
        this.items = items;
    }
    getState(row, col) {
        var item = this.items[row];
        if (item && "actions" in item) for (let i = 0; i < item.actions.length; i++) if ("state" in item.actions[i]) return item.actions[i].state;
        return null;
    }
    getStates(items) {
        items = items || this.items;
        let list = [], btnID = 0;
        return items.forEach(item => {
            "buttons" === item.type ? item.items.forEach(row => {
                row.items.forEach(bt => {
                    this.getStatesTree(list, bt.actions, btnID, bt), btnID++;
                });
            }) : "input" === item.type ? this.getStatesTree(list, item.actions, -1, item) : "actions" !== item.type && "timer" !== item.type || this.getStatesTree(list, item.actions, -2, item);
        }), list;
    }
    getStatesTree(list, actions, itemID, item) {
        if (actions) for (let i = 0; i < actions.length; i++) {
            var action = actions[i];
            action && ("state" in action && action.state.length ? list.push({
                state: action.state,
                id: itemID,
                item: item,
                action: action
            }) : "goto" in action && action.goto.length ? list.push({
                state: action.goto,
                id: itemID,
                item: item,
                action: action
            }) : "run" in action && action.run.length ? list.push({
                state: action.run,
                id: itemID,
                item: item,
                action: action
            }) : ("if" in action || "else" in action || "switch" in action || "case" in action || "default" in action) && this.getStatesTree(list, action.actions, itemID, item));
        }
    }
    getSlots(items, slots) {
        items ? items.forEach(item => {
            "actions" in item && this.getSlotsTree(item.actions, slots);
        }) : this.editor.error("!!!> items.getSlots: No items");
    }
    getSlotsTree(actions, slots) {
        actions.forEach(action => {
            "slot" in action ? slots[action.slot.trim()] = "" : "actions" in action && this.getSlotsTree(action.actions, slots);
        });
    }
    insertItem(id, data) {
        this.editor.readonlyBot() || (1 === (id = id.split("_")).length ? this.items.splice(parseInt(id[0]), 0, data) : 2 === id.length && this.items[parseInt(id[0])].items.splice(parseInt(id[1]) + 1, 0, data));
    }
    insertInItem(ids, data) {
        if (!this.editor.readonlyBot()) {
            let items = this.items, id = ids[0];
            for (let i = 1; i < ids.length; i++) items = items[id].items, id = ids[i];
            return items.splice(parseInt(id), 0, data), items[id + 1];
        }
    }
    async deleteItem(obj) {
        if (!this.editor.readonlyBot() && await this.editor.help.delConfirm("RemovedPermanently")) {
            obj = obj.id.substring(13).split("_");
            if (1 === obj.length) this.items.splice(parseInt(obj[0]), 1); else if (2 === obj.length) {
                if (!(1 < this.items[parseInt(obj[0])].items.length)) return void this.editor.help.alert("OneButton");
                this.items[parseInt(obj[0])].items.splice(parseInt(obj[1]), 1);
            }
            this.editor.save(), this.editor.resetEditorAndCard();
        }
    }
    async leaveItemFromRow(obj) {
        obj = obj.id.substring(13).split("_");
        if (1 === obj.length) this.items.splice(parseInt(obj[0]), 1); else if (2 === obj.length) {
            if (!(1 < this.items[parseInt(obj[0])].items.length)) return void this.editor.help.alert("OneButton");
            this.items[parseInt(obj[0])].items.splice(parseInt(obj[1]), 1);
        }
        this.editor.save(), this.editor.resetEditorAndCard();
    }
    async deleteItemOnID(ids) {
        if (!this.editor.readonlyBot() && await this.editor.help.delConfirm("RemovedPermanently")) {
            let items = this.items, id = ids;
            if (Array.isArray(ids)) {
                id = ids[0];
                for (let i = 1; i < ids.length; i++) items = items[id].items, id = ids[i];
            }
            items.splice(id, 1), this.editor.save(), this.editor.resetEditorAndCard();
        }
    }
    moveItem(obj, dir) {
        if (!this.editor.readonlyBot()) {
            obj = obj.id.substring(13).split("_");
            if (1 === obj.length) {
                var item, i = parseInt(obj[0]);
                0 === i && -1 == dir || i === this.items.length - 1 && 1 == dir || (item = this.items[i], 
                this.items.splice(i, 1), this.items.splice(i + dir, 0, item));
            } else if (2 === obj.length) {
                let i = parseInt(obj[0]), j = parseInt(obj[1]);
                if (!(0 === j && -1 == dir || j === this.items[i].items.length - 1 && 1 == dir)) {
                    let item = this.items[i].items[j];
                    this.items[i].items.splice(j, 1), this.items[i].items.splice(j + dir, 0, item);
                }
            }
        }
    }
    copyItem(obj) {
        obj = obj.id.substring(13);
        this.copiedItem = JSON.parse(JSON.stringify(this.items[obj]));
    }
    copyItemOnID(ids) {
        var old = this.copiedItem;
        let items = this.items, id = ids;
        if (Array.isArray(ids)) {
            id = ids[0];
            for (let i = 1; i < ids.length; i++) items = items[id].items, id = ids[i];
        }
        return this.copiedItem = JSON.parse(JSON.stringify(items[id])), old;
    }
    cloneItemOnID(ids) {
        var old = this.copiedItem;
        this.copyItemOnID(ids), this.pasteItemOnID(ids), this.copiedItem = old;
    }
    pasteItem(obj) {
        this.editor.readonlyBot() || (this.copiedItem ? (obj = parseInt(obj.id.substring(13)), 
        this.items.splice(obj + 1, 0, JSON.parse(JSON.stringify(this.copiedItem)))) : this.editor.help.alert("YouDontCopyItemYet"));
    }
    pasteItemOnID(id) {
        this.editor.readonlyBot() || (this.copiedItem ? ("button" == this.copiedItem.type ? Array.isArray(id) ? this.items[id[0]].items[id[1]].items.splice(id[2], 0, JSON.parse(JSON.stringify(this.copiedItem))) : this.addButtonsToStateOnID(id, !0).items[id[0]].items.splice(0, 0, JSON.parse(JSON.stringify(this.copiedItem))) : this.items.splice(id, 0, JSON.parse(JSON.stringify(this.copiedItem))), 
        this.editor.save(), this.editor.resetEditorAndCard()) : this.editor.help.alert("YouDontCopyItemYet"));
    }
    changeItemPosition(curPos, newPos) {
        var item;
        this.editor.readonlyBot() || 0 <= curPos && curPos < this.items.length && 0 <= newPos && newPos < this.items.length && (item = this.items[curPos], 
        this.items.splice(curPos, 1), this.items.splice(newPos, 0, item)), this.editor.resetEditorAndCard();
    }
    changeButtonPosition(curPos, newPos, id, row) {
        var item;
        this.editor.readonlyBot() || (item = this.items[id].items[row].items[curPos], 
        this.items[id].items[row].items.splice(curPos, 1), this.items[id].items[row].items.splice(newPos, 0, item)), 
        this.editor.resetEditorAndCard();
    }
    changeButtonRow(id, row, curBtn, targetRow, newPos) {
        var item;
        this.editor.readonlyBot() || (item = this.items[id].items[row].items[curBtn], 
        this.items[id].items[row].items.splice(curBtn, 1), this.items[id].items.length === targetRow ? this.items[id].items.push({
            items: [ item ]
        }) : this.items[id].items[targetRow].items.splice(newPos, 0, item)), this.editor.resetEditorAndCard();
    }
    changeImagePosition(curPos, newPos, image) {
        var curItem;
        null !== this.editor.myBots.botNumber || this.editor.dontSave ? (image = image.parentNode, 
        image = parseInt(image.id.substring(13)), 0 <= curPos && curPos < this.items[image].items.length && 0 <= newPos && newPos < this.items[image].items.length && (curItem = this.items[image].items[curPos], 
        this.items[image].items.splice(curPos, 1), this.items[image].items.splice(newPos, 0, curItem))) : this.editor.help.alert("YouCannotEdit"), 
        this.editor.resetEditorAndCard();
    }
    addMessageToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "message"
        });
    }
    addMessageToStateOnID(id) {
        this.insertItem(id, {
            type: "message"
        });
    }
    addTextToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "text",
            text: {
                en: "Text."
            }
        });
    }
    addTextToStateOnID(id) {
        this.insertItem(id, {
            type: "text",
            text: {
                en: "Text."
            }
        });
    }
    addButtonsToStateOnID(id, empty = !1) {
        return empty ? this.insertInItem([ id ], {
            type: "buttons",
            items: [ {
                items: []
            } ]
        }) : this.insertInItem([ id ], {
            type: "buttons",
            items: [ {
                items: [ {
                    type: "button",
                    button: {
                        en: "Button"
                    },
                    actions: [ {
                        state: ""
                    } ]
                } ]
            } ]
        });
    }
    addRowToButtonsOnID(id) {
        this.insertInItem([ id, this.items[id].items.length ], {
            items: [ {
                type: "button",
                button: {
                    en: "Button"
                },
                actions: [ {
                    state: ""
                } ]
            } ]
        });
    }
    addButtonToRowOnID(id, row) {
        this.items[id].items.length > row ? this.insertInItem([ id, row, this.items[id].items[row].items.length ], {
            type: "button",
            button: {
                en: "Button"
            },
            actions: [ {
                state: ""
            } ]
        }) : this.addRowToButtonsOnID(id);
    }
    addButtonToStateFromDrag(prev_btn, currentRow) {
        currentRow = currentRow.id.substring(13);
        this.insertItem(currentRow + "_0", {
            ...prev_btn.data
        });
    }
    addActionsToState(prev_row) {
        prev_row = prev_row.id.substring(13);
        this.insertItem(prev_row, {
            type: "actions",
            actions: []
        });
    }
    addActionsToStateOnID(id) {
        this.insertItem(id, {
            type: "actions",
            actions: []
        });
    }
    addIntentsToState(prev_row) {
        prev_row = prev_row.id.substring(13);
        this.insertItem(prev_row, {
            type: "intents",
            actions: [ {
                intent: "",
                words: {}
            } ]
        });
    }
    addIntentsToStateOnID(id) {
        this.insertItem(id, {
            type: "intents",
            actions: [ {
                intent: "",
                words: {}
            } ]
        });
    }
    addTimerToState(prev_row) {
        prev_row = prev_row.id.substring(13);
        this.insertItem(prev_row, {
            type: "timer",
            time: "",
            actions: [ {
                state: ""
            } ]
        });
    }
    addTimerToStateOnID(id) {
        this.insertItem(id, {
            type: "timer",
            time: "",
            actions: [ {
                state: ""
            } ]
        });
    }
    addCommentToState(prev_row) {
        prev_row = prev_row.id.substring(13);
        this.insertItem(prev_row, {
            type: "note",
            note: ""
        });
    }
    addCommentToStateOnID(id) {
        this.insertItem(id, {
            type: "note",
            note: ""
        });
    }
    addImageToState(prev) {
        prev = prev.id.substring(13);
        this.insertItem(prev, {
            type: "image",
            url: "https://qudata.com/qubot/im/owl_a.png"
        });
    }
    addImageToStateOnID(id) {
        this.insertItem(id, {
            type: "image",
            url: "https://qudata.com/qubot/im/owl_a.png"
        });
    }
    addImagesToState(prev) {
        prev = prev.id.substring(13);
        this.insertItem(prev, {
            type: "images",
            items: [ {
                type: "image",
                url: "https://qudata.com/qubot/im/owl_a.png"
            } ]
        });
    }
    addImagesToStateOnID(id) {
        this.insertItem(id, {
            type: "images",
            items: [ {
                type: "image",
                url: "https://qudata.com/qubot/im/owl_a.png"
            } ]
        });
    }
    addImageToImages(prev) {
        prev = prev.id.substring(13);
        this.insertItem(prev, {
            type: "image",
            url: ""
        });
    }
    addImageToGalleryOnID(id) {
        this.insertItem(id + "_" + (this.items[id].items.length - 1), {
            type: "image",
            url: ""
        });
    }
    addMapToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "map",
            url: ""
        });
    }
    addMapToStateOnID(id) {
        this.insertItem(id, {
            type: "map",
            url: ""
        });
    }
    addVideoToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "video",
            url: "https://qudata.com/qubot/qudata.mp4",
            stop: 1,
            play: 1
        });
    }
    addVideoToStateOnID(id) {
        this.insertItem(id, {
            type: "video",
            url: "https://qudata.com/qubot/qudata.mp4",
            stop: 1,
            play: 1
        });
    }
    addAudioToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "audio",
            url: "https://qudata.com/qubot/QuOwl.mp3",
            stop: 1,
            play: 1
        });
    }
    addAudioToStateOnID(id) {
        this.insertItem(id, {
            type: "audio",
            url: "https://qudata.com/qubot/QuOwl.mp3",
            stop: 1,
            play: 1
        });
    }
    addGalleryToState(obj) {
        obj = obj.id.substring(13);
        this.insertItem(obj, {
            type: "gallery",
            items: [ {
                type: "slide",
                image: "",
                actions: [ {
                    state: ""
                } ]
            }, {
                type: "slide",
                image: "",
                actions: [ {
                    state: ""
                } ]
            } ]
        });
    }
    exportYAML(items, skip) {
        if (items) {
            let res = "";
            return items.forEach(item => {
                "items" in item ? (res += skip + `  - ${item.type}:
`, item.items.forEach(it => {
                    "button" === it.type ? (res += skip + "      - button: " + JSON.stringify(it.button) + "\n", 
                    it.kind && (res += skip + "        kind: " + it.kind + "\n"), 
                    it.align && (res += skip + "        align: " + it.align + "\n"), 
                    res = (res += skip + "        actions:\n") + this.actionsYAML(it.actions, skip + skip + skip)) : "image" === it.type ? (res = (res += skip + "      - image:\n") + skip + "            src: " + JSON.stringify(it.image) + "\n", 
                    "center" in it && (res += skip + "            center: " + it.center + "\n"), 
                    "width" in it && (res += skip + '            width: "' + it.width + '"\n')) : res += skip + "       - " + JSON.stringify(it) + "\n";
                })) : "text" === item.type ? (res += skip + "  - text: " + JSON.stringify(item.text) + "\n", 
                "center" in item && (res += skip + "    center: " + item.center + "\n"), 
                "color" in item && (res += skip + '    color: "' + item.color + '"\n')) : "actions" === item.type ? res = (res += skip + "  - actions:\n") + this.actionsYAML(item.actions, skip + skip) : "timer" === item.type ? res = (res = (res = (res += skip + "  - timer:\n") + skip + "        time: " + item.time + "\n") + skip + "        actions:\n") + this.actionsYAML(item.actions, skip + skip + skip) : "intents" === item.type ? res = (res += skip + "  - intents:\n") + this.actionsYAML(item.actions, skip + skip) : "input" === item.type ? res = (res = (res = (res += skip + "  - input:\n") + skip + "        kind: " + item.kind + "\n") + skip + "        actions:\n") + this.actionsYAML(item.actions, skip + skip + skip) : "note" === item.type ? res += skip + `  - note: "${item.note}"
` : res += skip + "  - " + JSON.stringify(item) + "\n";
            }), (res += skip + "#--------------------------------------------------------------------------\n") + "\n";
        }
        this.editor.error("exportYAML: undefined items");
    }
    actionsYAML(actions, skip) {
        if (actions) {
            let res = "";
            for (let i = 0; i < actions.length; i++) {
                var keys, action = actions[i];
                action ? "if" in action ? res = (res = res + (skip + "  - if: " + JSON.stringify(action.if)) + "\n" + skip + "    actions:\n") + this.actionsYAML(action.actions, skip + "    ") : "else" in action ? res = (res = res + (skip + "  - else: " + JSON.stringify(action.else)) + "\n" + skip + "    actions:\n") + this.actionsYAML(action.actions, skip + "    ") : "switch" in action ? res = (res = res + (skip + "  - switch: " + JSON.stringify(action.switch)) + "\n" + skip + "    actions:\n") + this.actionsYAML(action.actions, skip + "    ") : "case" in action ? res = (res = res + (skip + "  - case: " + JSON.stringify(action.case)) + "\n" + skip + "    actions:\n") + this.actionsYAML(action.actions, skip + "    ") : "default" in action ? res = (res = res + (skip + "  - default: \n") + skip + "    actions:\n") + this.actionsYAML(action.actions, skip + "    ") : "intent" in action ? res = (res += skip + `  - intent: ${action.intent}
`) + skip + `    words:  ${JSON.stringify(action.words)}
` : "slot" in action ? res = (res += skip + `  - slot: ${action.slot}
`) + skip + `    value: ${JSON.stringify(action.value)}
` : 1 === (keys = Object.keys(action)).length ? res += skip + "  - " + keys[0] + ": " + JSON.stringify(action[keys[0]]) + "\n" : res += skip + "  - " + JSON.stringify(action) + "\n" : res += skip + "  - action: null !!! \n";
            }
            return res;
        }
        this.editor.error("actionsYAML: undefined actions");
    }
    async uploadImage(e) {
        var url, i;
        await this.editor.help.loadFile("UploadImage", "Upload image", "Upload", ".jpg, .png") && this.editor.help.inputFileType.startsWith("image") && (url = await this.editor.env.saveFile({
            botID: this.editor.bot.id,
            fileName: this.editor.help.inputFileName,
            arrayBuffer: this.editor.help.inputFileContent
        }), i = (e = e.target.closest(".image").id.substr(13).split("_"))[0], e = e[1], 
        this.editor.bot.states[this.editor.bot.state][i].items[e].image = url, this.editor.save(), 
        this.editor.resetEditorAndCard());
    }
    async uploadMedia(id, hint = "UploadFile", kind = "file", ext = "*.*", j = null) {
        if (await this.editor.help.loadFile(hint, "Upload " + kind, "Upload", ext)) {
            let mime = "";
            "image" === kind && (mime = kind), this.editor.help.inputFileType.startsWith(mime) && (hint = await this.editor.env.saveFile({
                botID: this.editor.bot.id,
                fileName: this.editor.help.inputFileName,
                arrayBuffer: this.editor.help.inputFileContent
            }), null != j ? this.editor.bot.states[this.editor.bot.state][id].items[j].url = hint : this.editor.bot.states[this.editor.bot.state][id].url = hint, 
            this.editor.save(), this.editor.resetEditorAndCard());
        }
    }
}

class QuBotEditorStateActions extends QuBotEditorBase {
    constructor(container, editor) {
        super(editor), this.container = container, this.init();
    }
    init() {
        this.wasOnClickState = !1, this.changingState = null, this.item = null, 
        this.actionID = null, this.actions = [];
    }
    getObjID(obj) {
        return parseInt(obj.id.substring(obj.id.lastIndexOf("-") + 1));
    }
    set(item) {
        item.json || console.log("error"), this.item = item.json;
    }
    clear(container) {
        for (void 0 === container && (container = this.container); container.childElementCount; ) container.lastChild.remove();
    }
    show(item, container, actionID) {
        if (item = item || this.item, container = container || this.container, null == actionID && (actionID = 0), 
        "text" === item.type) this.clear(container), this.showTextParams(this.add(container, "qubot-params"), item); else if ("image" === item.type) this.clear(container), 
        this.showImageParams(this.add(container, "qubot-params"), item); else if ("button" === item.type) {
            this.clear(container);
            var params = this.add(container, "qubot-params");
            params.style.borderStyle = "none none solid none", params.style.marginBottom = "8px", 
            this.showButtonParams(params, item, actionID), this.showActions(container, item.actions, actionID);
        } else if ("input" === item.type) {
            this.clear(container);
            let params = this.add(container, "qubot-params");
            params.style.borderStyle = "none none solid none", params.style.marginBottom = "8px", 
            params.id = "qubot-params-container", this.showInputParams(params, item), 
            this.showActions(container, item.actions, actionID);
        } else if ("actions" === item.type) this.clear(container), this.showActions(container, item.actions, actionID); else if ("timer" === item.type) {
            this.clear(container);
            let params = this.add(container, "qubot-params");
            params.style.borderStyle = "none none solid none", params.style.marginBottom = "8px", 
            this.showTimerParams(params, item), this.showActions(container, item.actions, actionID);
        } else "intents" === item.type ? (this.clear(container), this.addIntentsInterface(container, item.actions, actionID)) : "message" === item.type ? (this.clear(container), 
        this.showMessageParams(this.add(container, "qubot-params"), item)) : "map" === item.type ? (this.clear(container), 
        this.showMapParams(this.add(container, "qubot-params"), item, actionID)) : "video" === item.type || "audio" === item.type ? (this.clear(container), 
        this.showMediaParams(this.add(container, "qubot-params"), item, actionID)) : "if" in item || "else" in item || "switch" in item || "case" in item || "default" in item ? (this.clear(container), 
        this.showActions(container, item.actions, actionID)) : ("note" in item || "comment" in item) && this.clear(container);
    }
    showActions(container, actions, actionID, parentIDs = []) {
        void 0 === actionID && (actionID = 0);
        let stateID = 0;
        if (actions) if (0 === actions.length) this.addAddAction(container, 0, parentIDs); else {
            this.addItemsPanel(), this.addPasteMenu();
            for (let i = 0; i < actions.length; i++) {
                let lastItem = null;
                var action = actions[i];
                if (action && ("state" in action ? (this.addStateInterface(container, action.state, stateID, actionID, "state", [ ...parentIDs, i ]), 
                stateID++, actionID++) : "goto" in action ? (this.addStateInterface(container, action.goto, stateID, actionID, "goto", [ ...parentIDs, i ]), 
                stateID++, actionID++) : "run" in action ? (this.addStateInterface(container, action.run, stateID, actionID, "run", [ ...parentIDs, i ]), 
                stateID++, actionID++) : "slot" in action && !("model" in action) ? (this.addSlotInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "script" in action ? (this.addScriptInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "note" in action || "comment" in action ? (this.addCommentInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "clear" in action ? (this.addActionClearInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "action" in action ? "load" === action.action ? (this.addActionLoadInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "save" === action.action ? (this.addActionSaveInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "event" === action.action ? (this.addActionEventInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "operator" === action.action ? (this.addActionOperatorInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "model" === action.action && (this.addActionModelInterface(container, action, actionID, [ ...parentIDs, i ]), 
                actionID++) : "if" in action ? (actionID = this.addIfInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]), 
                lastItem = document.querySelectorAll("#qubot-actions>.qubot-action-if")) : "else" in action ? (actionID = action.else.length ? this.addElifInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]) : this.addElseInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]), 
                lastItem = document.querySelectorAll("#qubot-actions>.qubot-action-if")) : "switch" in action ? (actionID = this.addSwitchInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]), 
                lastItem = document.querySelectorAll("#qubot-actions>.qubot-action-if")) : "case" in action ? (actionID = this.addCaseInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]), 
                lastItem = document.querySelectorAll("#qubot-actions>.qubot-action-if")) : "default" in action && (actionID = this.addDefaultInterface(container, action, actionID, actions, i, [ ...parentIDs, i ]), 
                lastItem = document.querySelectorAll("#qubot-actions>.qubot-action-if")), 
                !this.editor.readonlyBot(!1) && 0 < (lastItem = null == lastItem ? document.querySelectorAll("#qubot-actions>.qubot-item") : lastItem).length)) {
                    let id = i, edt = this;
                    lastItem[lastItem.length - 1].onmouseover = function(e) {
                        e.stopPropagation(), edt.addPasteButtons(this, id, "actions");
                    }, lastItem[lastItem.length - 1].onclick = function(e) {
                        e.stopPropagation();
                    };
                }
            }
        } else this.item.actions = [], this.addAddAction(container, actionID, parentIDs);
        return actionID;
    }
    addPasteLine(message, ids, kind) {
        var editor = this.editor;
        this.add(message, "qubot-line");
        editor.save();
    }
    addPasteMenu() {
        if (!this.editor.readonlyBot(!1) && !document.getElementById("qubot-paste-panel")) {
            let editor = this.editor;
            var menu = this.add(document.body, "qubot-add-menu");
            menu.setAttribute("id", "qubot-paste-panel"), this.add(menu, "qudata-add-menu-add qudata-svg qudata-svg-add").onclick = function(e) {
                var id = this.parentNode.getAttribute("for");
                editor.showAddMenu(e, document.getElementById("qubot-paste-actions-panel"), id, this.getBoundingClientRect());
            }, this.add(menu, "qudata-add-menu-paste qudata-svg qudata-svg-paste").onclick = function() {
                var id = this.parentNode.getAttribute("for");
                editor.stateEditor.actions.pasteActionOnID(id), editor.save();
            };
        }
    }
    addPasteIntentsMenu() {
        if (!this.editor.readonlyBot(!1) && !document.getElementById("qubot-paste-panel")) {
            let editor = this.editor;
            var menu = this.add(document.body, "qubot-add-menu");
            menu.setAttribute("id", "qubot-paste-panel"), this.add(menu, "qudata-add-menu-add qudata-svg qudata-svg-add").onclick = function(e) {
                var id = this.parentNode.getAttribute("for");
                editor.showAddMenu(e, document.getElementById("qubot-paste-intents-panel"), id, this.getBoundingClientRect());
            }, this.add(menu, "qudata-add-menu-paste qudata-svg qudata-svg-paste").onclick = function() {
                this.parentNode.getAttribute("for");
                editor.save();
            };
        }
    }
    addItemsPanel() {
        var actions_menu;
        if (!this.editor.readonlyBot(!1) && (document.getElementById("qubot-paste-actions-panel") || ((actions_menu = this.add(document.body, "")).id = "qubot-paste-actions-panel", 
        this.addAddMenuWith(actions_menu)), !document.getElementById("qubot-paste-intents-panel"))) {
            let actions_menu = this.add(document.body, "");
            actions_menu.id = "qubot-paste-intents-panel", this.addIntentsMenu(actions_menu);
        }
    }
    addPasteButtons(item, id, kind = "items") {
        var parent = document.querySelector("#qubot-state-editor .qubot-editor-content");
        let editor = this.editor;
        var items = document.querySelectorAll(".qubot-control-panel");
        if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        var rect = item.getBoundingClientRect(), top = document.createElement("div"), bot = (top.classList.add("qubot-control-panel", "qudata-svg", "qudata-svg-add"), 
        top.style.top = item.offsetTop - 12 + "px", top.setAttribute("for", id), 
        document.createElement("div"));
        bot.classList.add("qubot-control-panel", "qudata-svg", "qudata-svg-add"), 
        bot.style.top = item.offsetTop + rect.height - 12 + "px", bot.setAttribute("for", id + 1), 
        parent.querySelector("#qubot-actions").append(top, bot), top.onclick = function(e) {
            switch (kind) {
              case "actions":
                editor.showAddMenu(e, document.getElementById("qubot-paste-actions-panel"), this.getAttribute("for"), this.getBoundingClientRect());
                break;

              case "intent":
                editor.showAddMenu(e, document.getElementById("qubot-paste-intents-panel"), this.getAttribute("for"), this.getBoundingClientRect());
            }
            var items = document.querySelectorAll(".qubot-control-panel");
            if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        }, bot.onclick = function(e) {
            switch (kind) {
              case "actions":
                editor.showAddMenu(e, document.getElementById("qubot-paste-actions-panel"), this.getAttribute("for"), this.getBoundingClientRect());
                break;

              case "intent":
                editor.showAddMenu(e, document.getElementById("qubot-paste-intents-panel"), this.getAttribute("for"), this.getBoundingClientRect());
            }
            var items = document.querySelectorAll(".qubot-control-panel");
            if (items) for (let i = 0; i < items.length; i++) items[i].parentNode.removeChild(items[i]);
        };
    }
    addAddAction(container, id, parentIDs = null) {
        if (!this.editor.readonlyBot(!1)) {
            let editor = this.editor, edt = this, a = this.add(container, "action");
            (a = this.add(a, "action-add")).id = "qubot-action-add-" + (id - 1), 
            parentIDs ? (parentIDs.push(id), a.onclick = function(e) {
                document.getElementById("qubot-paste-actions-panel") || (edt.addItemsPanel(), 
                document.getElementById("qubot-paste-actions-panel")), editor.showAddMenu(e, document.getElementById("qubot-paste-actions-panel"), parentIDs, this.getBoundingClientRect());
            }) : a.onclick = function(e) {
                editor.showAddMenu(e, document.getElementById("qubot-paste-actions-panel"), id, this.getBoundingClientRect());
            }, (a = this.add(a, "qubot-icon-plus-row-add")).style.filter = "none";
        }
    }
    runAddAddMenu(obj) {
        var obj = this.editor.stateEditor.actions.addAddMenu(obj), rect = (obj.style.top = "-5px", 
        obj.style.left = "-1px", obj.style.display = "flex", obj.getBoundingClientRect()), wWidth = document.documentElement.clientWidth, wHeight = document.documentElement.clientHeight;
        rect.bottom > wHeight && (obj.style.top = wHeight - rect.bottom - 20 + "px"), 
        rect.right > wWidth && (obj.style.right = wWidth - rect.right - 20 + "px");
    }
    getActions(ids) {
        let id = (ids = Array.isArray(ids) ? ids : [ ids ])[0], actions = this.item.actions;
        for (let i = 1; i < ids.length; i++) actions = actions[id].actions, id = ids[i];
        return {
            actions: actions,
            id: id
        };
    }
    getAction(actions, actionID, totID = {
        id: 0
    }) {
        for (let i = 0; i < actions.length; i++) {
            if (actionID === totID.id) return actions[i];
            if ("if" in actions[i]) {
                totID.id++;
                var action = this.getAction(actions[i].actions, actionID, totID);
                if (action) return action;
            } else if ("else" in actions[i]) {
                totID.id++;
                let action = this.getAction(actions[i].actions, actionID, totID);
                if (action) return action;
            } else if ("switch" in actions[i]) {
                totID.id++;
                let action = this.getAction(actions[i].actions, actionID, totID);
                if (action) return action;
            } else if ("case" in actions[i]) {
                totID.id++;
                let action = this.getAction(actions[i].actions, actionID, totID);
                if (action) return action;
            } else if ("default" in actions[i]) {
                totID.id++;
                let action = this.getAction(actions[i].actions, actionID, totID);
                if (action) return action;
            } else totID.id++;
        }
        return null;
    }
    addAddMenuWith(btn_add, disabled = []) {
        let editor = this.editor;
        var menu = [ [ "paste", function() {
            var id = this.parentNode.parentNode.getAttribute("for");
            editor.stateEditor.actions.pasteActionOnID(id), editor.save();
        } ], [ "step", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "state");
        } ], [ "goto", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "goto");
        } ], [ "run", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "run");
        } ], [ "slot", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "slot");
        } ], [ "script", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "script");
        } ], [ "if", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "if");
        } ], [ "else", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "else");
        } ], [ "elif", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "elif");
        } ], [ "clear", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "clear");
        } ], [ "switch", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "switch");
        } ], [ "case", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "case");
        } ], [ "default", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "default");
        } ], [ "save", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "save");
        } ] ];
        return "wp" != this.editor.env.type && (menu.push([ "load", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "load");
        } ]), menu.push([ "model", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "model");
        } ]), menu.push([ "operator", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "operator");
        } ])), menu.push([ "event", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "event");
        } ]), menu.push([ "note", function() {
            editor.stateEditor.actions.addActionOnID(this.parentNode.parentNode.getAttribute("for"), "note");
        } ]), this.createAddMenu(btn_add, menu, disabled);
    }
    addIntentsMenu(btn_add, disabled = []) {
        let editor = this.editor;
        return this.createAddMenu(btn_add, [ [ "paste", function() {
            var id = this.parentNode.parentNode.getAttribute("for");
            editor.stateEditor.actions.pasteIntentOnID(id), editor.save();
        } ], [ "add", function() {
            var id = this.parentNode.parentNode.getAttribute("for");
            editor.stateEditor.actions.addNewIntent(id), editor.save();
        } ] ], disabled);
    }
    onclickAction(obj) {
        return;
    }
    addHint(obj, nick) {
        let help = this.editor.help;
        obj.onmouseover = function() {
            help.showHint(this, nick);
        }, obj.onmouseout = function() {
            help.hideHint();
        };
    }
    expandTextarea(elm) {
        var elem = document.querySelector(".qubot-editor-content"), scrollTop = elem ? elem.scrollTop : 0;
        elm.style.cssText = "height:auto; padding:0", elm.style.cssText = "height:" + (elm.scrollHeight + 2) + "px", 
        elem.scrollTop = scrollTop;
    }
    expandCode(elm) {
        var elem = document.querySelector(".qubot-editor-content"), scrollTop = elem ? elem.scrollTop : 0;
        elm.style.cssText = "height:auto; padding:0", elm.style.cssText = "height:" + elm.codeHeight() + "px", 
        elem.scrollTop = scrollTop;
    }
    valudateInput(item) {
        switch (item.kind) {
          case "int":
          case "float":
            item.params = {
                type: item.kind
            }, item.kind = "number";
            break;

          case "MMDDYYYY":
          case "DDMMYYYY":
            item.params = {
                format: item.kind,
                time: "date"
            }, item.kind = "datetime";
            break;

          case "time":
            item.params = {
                format: "MMDDYYYY",
                time: "time"
            }, item.kind = "datetime";
        }
        return item;
    }
    showInputParams(container, item) {
        var id = 0;
        let editor = this.editor;
        let titles = [], icons = [], values = [];
        [ [ "text", "✍🏽", "--", "text: any text..." ], [ "number", "🔢", "--", "number: 131, 3.14" ], [ "range", "🔢", "--", "range: 1 ... N" ], [ "datetime", "📆", "--", "datetime: 06/05/2023" ], [ "email", "📧", "--", "email: info@qudata.com" ], [ "phone", "📞", "--", "phone: +380 99 0864712" ], [ "intent", "🙊", "--", 'intent: "I would like.."' ], [ "ai", "🤖", "wp", "AI model: ChatGPT" ], [ "geo", "🌐", "--", "location" ], [ "file", "📎", "wp", "file" ] ].forEach(x => {
            this.editor.env.type != x[2] && (values.push(x[0]), icons.push(x[1]), 
            titles.push(x[3]));
        }), item = this.valudateInput(item);
        id = this.addInterfaceFrameSelect(this.add(container, "qubot-param"), "kind", values, +id, "", titles, icons, item.kind || "text");
        this.addHint(id, "hintInputKind"), id.onchange = function() {
            editor.stateEditor.actions.onchangeInputKind(this, container);
        }, this.createSubFields(container, item, 1), this.editor.readonlyBot(!1) && id.setAttribute("disabled", "");
    }
    createSubFields(container, item, id) {
        this.editor.readonlyBot() || (this.addNumberInterface(container, item, id++, "number" == item.kind ? "flex" : "none"), 
        this.addRangeInterface(container, item, id++, "range" == item.kind ? "flex" : "none"), 
        this.addDateTimeInterface(container, item, id++, "datetime" == item.kind ? "flex" : "none"), 
        this.addPhoneInterface(container, item, id++, "phone" == item.kind ? "flex" : "none"), 
        this.addGeoInterface(container, item, id++, "geo" == item.kind ? "flex" : "none"), 
        "wp" != this.editor.env.type && (this.addAIInterface(container, item, id++, "ai" == item.kind ? "flex" : "none"), 
        this.addFileInterface(container, item, id++, "file" == item.kind ? "flex" : "none")));
    }
    onchangeInputKind(obj) {
        if (!this.editor.readonlyBot()) {
            var items = {
                text: [],
                number: [ "qubot-number-type" ],
                range: [ "qubot-range-interface" ],
                datetime: [ "qubot-datetime-format", "qubot-datetime-time" ],
                email: [],
                phone: [ "qubot-phone-interface" ],
                intent: [],
                geo: [ "qubot-geo-interface" ],
                ai: [ "qubot-ai-model", "qubot-ai-system" ],
                file: [ "qubot-file-interface", "qubot-dbox-cont", "qubot-gdrive-id", "qubot-gdrive-file" ]
            }, params = this.item.params;
            delete this.item.params;
            let kind = obj.getAttribute("data");
            for (let key in items) 0 < items[key].length && items[key].forEach(x => {
                x = document.getElementById(x);
                x && (x.style.display = key == kind ? "flex" : "none");
            });
            switch (kind) {
              case "text":
                break;

              case "number":
                this.item.params = {
                    type: params && params.type ? params.type : "int"
                };
                break;

              case "range":
                this.item.params = {
                    min: params && params.min ? params.min : 1,
                    max: params && params.max ? params.max : 3
                };
                break;

              case "datetime":
                this.item.params = {
                    format: params && params.format ? params.format : "MMDDYYYY",
                    time: params && params.time ? params.time : "datetime"
                };
                break;

              case "email":
                break;

              case "phone":
                this.item.params = {
                    myPhoneText: params && params.myPhoneText ? params.myPhoneText : {}
                };
                break;

              case "intent":
                break;

              case "geo":
                this.item.params = {
                    getGeoButtonText: params && params.getGeoButtonText ? params.getGeoButtonText : {}
                };
                break;

              case "ai":
                this.item.params = {
                    model: params && params.model ? params.model : "chat_gpt",
                    system: params && params.system ? params.system : ""
                };
                break;

              case "file":
                this.item.params = {
                    storage: params && params.storage ? params.storage : "dropbox"
                }, document.getElementById("qubot-file-storage").onchange();
            }
            this.item.kind = kind, this.editor.listEditor.openCardCurState(), this.editor.save();
        }
    }
    addNumberInterface(container, item, id, display = "none") {
        let editor = this.editor;
        container = this.add(container, "qubot-param"), container.style.display = display, 
        container.id = "qubot-number-type", this.addHint(container, "hintInputNumberType"), 
        display = this.addInterfaceFrameSelect(container, "type", [ "int", "float" ], id++, "", [ "Integer", "Double" ], null, item.params && item.params.type ? item.params.type : "int");
        return display.id = "qubot-number-type-value", display.onchange = function() {
            editor.stateEditor.actions.onChangeNumberType(this);
        }, this.editor.readonlyBot(!1) && input.setAttribute("disabled", ""), container;
    }
    onChangeNumberType(item) {
        this.editor.readonlyBot() || (this.item.params.type = item.getAttribute("data"), 
        this.editor.save());
    }
    addRangeInterface(container, item, id, display = "none") {
        container = this.add(container, "qubot-param"), container.style.display = display, 
        container.id = "qubot-range-interface", this.addHint(container, "hintInputRange"), 
        display = this.addInterfaceFrameNumber(container, "range", id++), display.id = "qubot-range-min", 
        display.value = item.params && item.params.min ? item.params.min : 1, display.onchange = e => {
            this.onChangeRangeValues(e);
        }, this.addHint(display, "hintInputRangeFrom"), display = this.addInterfaceFrameNumber(container, "to", id++);
        return document.querySelector('label[for="' + display.id + '"]').style.justifyContent = "center", 
        display.id = "qubot-range-max", display.value = item.params && item.params.max ? item.params.max : 3, 
        display.onchange = e => {
            this.onChangeRangeValues(e);
        }, this.addHint(display, "hintInputRangeTo"), container;
    }
    onChangeRangeValues(e) {
        if (!this.editor.readonlyBot()) {
            let target = e.target, minValue = this.item.params ? this.item.params.min : 1, maxValue = this.item.params ? this.item.params.max : 3;
            "qubot-range-min" === target.id && (minValue = target.value), "qubot-range-max" === target.id && (maxValue = target.value), 
            this.item.params = {
                min: +minValue,
                max: +maxValue
            }, this.editor.listEditor.openCardCurState(), this.editor.save();
        }
    }
    addDateTimeInterface(container, item, id, display = "none") {
        let editor = this.editor, param = this.add(container, "qubot-param");
        param.style.display = display, param.id = "qubot-datetime-time", this.addHint(param, "hintInputDateTimeTime");
        this.addInterfaceFrameSelect(param, "use", [ "datetime", "date", "time" ], id++, "", [ "date and time", "only date", "only time" ], null, item.params && item.params.time ? item.params.time : "datetime").onchange = function() {
            editor.stateEditor.actions.onChangeDateTimeTime(this);
        }, (param = this.add(container, "qubot-param")).style.display = display, 
        param.id = "qubot-datetime-format", this.addHint(param, "hintInputDateTimeFormat");
        container = this.addInterfaceFrameSelect(param, "format", [ "MMDDYYYY", "DDMMYYYY" ], id++, "", [ "mm/dd/yyyy", "dd/mm/yyyy" ], null, item.params && item.params.format ? item.params.format : "MMDDYYYY");
        return container.id = "qubot-datetime-format-value", container.onchange = function() {
            editor.stateEditor.actions.onChangeDateTimeFormat(this);
        }, this.editor.readonlyBot(!1) && input.setAttribute("disabled", ""), param;
    }
    onChangeDateTimeFormat(item) {
        this.editor.readonlyBot() || (this.item.params.format = item.getAttribute("data"), 
        this.editor.save());
    }
    onChangeDateTimeTime(item) {
        this.editor.readonlyBot() || (this.item.params.time = item.getAttribute("data"), 
        this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    addPhoneInterface(container, item, id, display = "none") {
        container = this.add(container, "qubot-param"), container.style.display = display, 
        container.id = "qubot-phone-interface", this.addHint(container, "hintInputPhoneMyPhone"), 
        display = this.addInterfaceFrameText(container, "My phone", id++);
        return display.setAttribute("placeholder", 'Text in "Send my phone" button...'), 
        display.value = item.params && item.params.myPhoneText && item.params.myPhoneText[this.LANGUAGE] || "", 
        display.onchange = e => {
            e = e.target.value;
            this.item.params.myPhoneText = {
                ...this.item.params.myPhoneText,
                [this.LANGUAGE]: e
            }, "" === e && delete this.item.params.myPhoneText[this.LANGUAGE], this.editor.listEditor.openCardCurState(), 
            this.editor.save();
        }, this.editor.readonlyBot(!1) && display.setAttribute("disabled", ""), 
        container;
    }
    addGeoInterface(container, item, id, display = "none") {
        container = this.add(container, "qubot-param"), container.style.display = display, 
        container.id = "qubot-geo-interface", this.addHint(container, "hintInputLocationGetText"), 
        display = this.addInterfaceFrameText(container, "Submit text", id++);
        return display.setAttribute("placeholder", 'Text in "Send my location" button...'), 
        display.value = item.params && item.params.getGeoButtonText && item.params.getGeoButtonText[this.LANGUAGE] || "", 
        display.onchange = e => {
            e = e.target.value;
            this.item.params.getGeoButtonText = {
                ...this.item.params.getGeoButtonText,
                [this.LANGUAGE]: e
            }, "" === e && delete this.item.params.getGeoButtonText[this.LANGUAGE], 
            this.editor.listEditor.openCardCurState(), this.editor.save();
        }, this.editor.readonlyBot(!1) && display.setAttribute("disabled", ""), 
        container;
    }
    addAIInterface(container, item, id, display = "none") {
        let editor = this.editor;
        container = this.add(container, "qubot-param"), container.style.display = display, 
        container.id = "qubot-ai-model", this.addHint(container, "hintInputAIModel"), 
        display = this.addInterfaceFrameSelect(container, "model", [ "chat_gpt", "stream_gpt" ], id++, "", [ "ChatGPT", "StreamGPT" ], [ "qubot-svg-chat-gpt", "qubot-svg-chat-gpt" ], item.params && item.params.model ? item.params.model : "chat_gpt");
        return display.id = "qubot-ai-model-value", display.onchange = function() {
            editor.stateEditor.actions.onChangeModel(this);
        }, this.editor.readonlyBot(!1) && input.setAttribute("disabled", ""), container;
    }
    onChangeModel(item) {
        this.editor.readonlyBot() || (this.item.params.model = item.getAttribute("data"), 
        this.editor.save());
    }
    onChangeSystem(item) {
        this.editor.readonlyBot() || (this.item.params.system = item.value, this.editor.save());
    }
    addFileInterface(container, item, id, display = "none") {
        let editor = this.editor, param, result;
        (param = result = this.add(container, "qubot-param")).style.display = display, 
        param.id = "qubot-file-interface", param.style.display = "file" == item.kind ? "flex" : "none", 
        this.addHint(param, "hintInputFileStorage");
        var storage = this.addInterfaceFrameSelect(param, "storage", [ "dropbox", "google_drive" ], id++, "", [ "Dropbox", "Google Drive" ], null, item.params && item.params.storage ? item.params.storage : "dropbox"), dbxPath = (storage.id = "qubot-file-storage", 
        storage.onchange = function() {
            editor.stateEditor.actions.onChangeStorage(this);
        }, (param = this.add(container, "qubot-param")).style.display = display, 
        param.id = "qubot-dbox-cont", param.style.display = "file" == item.kind && "dropbox" == storage.getAttribute("data") ? "flex" : "none", 
        this.addHint(param, "hintInputFileDropboxPath"), this.addInterfaceFrameText(param, "path", id++)), gdrFolderID = (dbxPath.setAttribute("placeholder", "Path to file in dropbox..."), 
        dbxPath.value = item.params && item.params.path ? item.params.path : "", 
        dbxPath.onchange = function(e) {
            item.params.path = e.target.value, editor.listEditor.openCardCurState(), 
            editor.save();
        }, (param = this.add(container, "qubot-param")).style.display = display, 
        param.id = "qubot-gdrive-id", param.style.display = "file" == item.kind && "google_drive" == storage.getAttribute("data") ? "flex" : "none", 
        this.addHint(param, "hintInputFileGoogleDriveFolderID"), this.addInterfaceFrameText(param, "folder ID", id++)), container = (gdrFolderID.setAttribute("placeholder", "Google drive folder url..."), 
        gdrFolderID.value = item.params && item.params.folder_id ? item.params.folder_id : "", 
        gdrFolderID.onchange = function(e) {
            editor.stateEditor.actions.onChangeInputFileGoogleDrive(e, item), editor.listEditor.openCardCurState(), 
            editor.save();
        }, (param = this.add(container, "qubot-param")).style.display = display, 
        param.id = "qubot-gdrive-file", param.style.display = "file" == item.kind && "google_drive" == storage.getAttribute("data") ? "flex" : "none", 
        this.addHint(param, "hintInputFileGoogleDriveFileName"), this.addInterfaceFrameText(param, "path", id++));
        return container.setAttribute("placeholder", "File name in google drive..."), 
        container.value = item.params && item.params.path ? item.params.path : "", 
        container.onchange = function(e) {
            item.params.path = e.target.value, editor.listEditor.openCardCurState(), 
            editor.save();
        }, this.editor.readonlyBot(!1) && (storage.setAttribute("disabled", ""), 
        dbxPath.setAttribute("disabled", ""), gdrFolderID.setAttribute("disabled", ""), 
        container.setAttribute("disabled", "")), result;
    }
    onChangeStorage(item) {
        if (!this.editor.readonlyBot()) {
            var elems = [ "qubot-dbox-cont", "qubot-gdrive-id", "qubot-gdrive-file" ];
            if ("dropbox" === item.getAttribute("data")) {
                var vals = [ "", "none", "none" ];
                for (let i = 0; i < elems.length; i++) {
                    var elem = document.getElementById(elems[i]);
                    elem && (elem.style.display = vals[i]);
                }
                this.item.params.storage = "dropbox", this.item.params.path && delete this.item.params.path, 
                this.item.params.folder_id && delete this.item.params.folder_id;
            } else if ("google_drive" === item.getAttribute("data")) {
                let vals = [ "none", "", "" ];
                for (let i = 0; i < elems.length; i++) {
                    let elem = document.getElementById(elems[i]);
                    elem && (elem.style.display = vals[i]);
                }
                this.item.params.storage = "google_drive", this.item.params.path && delete this.item.params.path;
            }
            this.editor.save();
        }
    }
    onChangeInputFileGoogleDrive(e, item) {
        var find;
        this.editor.readonlyBot() || (-1 < (find = e.target.value.lastIndexOf("/")) && (e.target.value = e.target.value.substring(find + 1)), 
        item.params.folder_id = e.target.value, this.editor.save());
    }
    showButtonParams(container, item, actionID) {
        var id = 0;
        let editor = this.editor;
        this.addInterfaceFrameSelect(this.add(container, "qubot-param"), "kind", [ "button", "check", "radio", "url" ], id++, "", null, [ " ", " ", " ", " " ], item.kind || "button").onchange = function() {
            editor.stateEditor.actions.onchangeButtonKind(this);
        };
        this.addInterfaceFrameSelect(this.add(container, "qubot-param"), "align", [ "center", "left", "right" ], id++, "", null, [ "", "", "" ], item.align || "center").onchange = function() {
            editor.stateEditor.actions.onchangeButtonAlign(this);
        };
        var param = this.add(container, "qubot-param"), param = (param.id = "cont-input-url", 
        param.style.display = "url" === item.kind ? "flex" : "none", this.addInterfaceFrameText(param, "url", id++)), param = (param.value = item.url || "", 
        param.setAttribute("placeholder", "Link (https://, ftp://)"), param.onchange = function() {
            editor.stateEditor.actions.onChangeUrl();
        }, this.addInterfaceFrameText(this.add(container, "qubot-param"), "icon", id++));
        param.value = item.params && item.params.icon ? item.params.icon : "", param.setAttribute("placeholder", "Link to image (https://, ftp://)"), 
        param.onchange = function() {
            editor.stateEditor.actions.onchangeButtonIcon(this);
        };
        this.addInterfaceFrameSelect(this.add(container, "qubot-param"), "border-style", [ "default", "solid", "dashed", "dotted" ], id++, "", null, [ "", " ", " ", " " ], item.params && item.params.border && item.params.border.style ? item.params.border.style : "default").onchange = function() {
            editor.stateEditor.actions.onchangeButtonBorderStyle(this);
        };
        param = this.addInterfaceFrameNumber(this.add(container, "qubot-param"), "border-size", +id, ""), 
        param.min = 0, param.max = 4, param.value = item.params && item.params.border && item.params.border.size ? item.params.border.size : 1, 
        param.onchange = function() {
            editor.stateEditor.actions.onchangeButtonBorderSize(this);
        }, id = this.addInterfaceFrameColor(this.add(container, "qubot-param"), "border-color", 6);
        id.value = item.params && item.params.border && item.params.border.color ? item.params.border.color : "#000000", 
        id.onchange(), id.onchange = function() {
            editor.stateEditor.actions.onchangeButtonBorderColor(this);
        };
    }
    onChangeUrl() {
        var input;
        this.editor.readonlyBot() || (input = document.querySelector("#cont-input-url input"), 
        this.item.url = input ? input.value : "", this.editor.save());
    }
    onchangeButtonKind(obj) {
        var inputURL;
        this.editor.readonlyBot() || (obj.getAttribute("data") && (this.item.kind = obj.getAttribute("data")), 
        obj = document.getElementById("cont-input-url"), inputURL = document.querySelector("#cont-input-url input"), 
        "url" === this.item.kind ? (obj.style.display = "flex", this.item.url = inputURL.value) : (obj.style.display = "none", 
        delete this.item.url), this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    onchangeButtonAlign(obj) {
        this.editor.readonlyBot() || (obj.getAttribute("data") && (this.item.align = obj.getAttribute("data")), 
        this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    onchangeButtonIcon(obj) {
        if (!this.editor.readonlyBot()) {
            obj.value = obj.value.replace(/\s+/g, "");
            let old_url = this.item.params && this.item.params.icon ? this.item.params.icon : "", editor = this.editor, item = this.item;
            if (this.editor.stateEditor.validateUrl(obj.value)) {
                var img = new Image();
                img.onload = function() {
                    this.onerror = null, this.src = "";
                }, img.onerror = function() {
                    editor.help.alert("errorImageNotAccess"), obj.value = old_url, 
                    item.params || (item.params = {}), item.params.icon = old_url, 
                    editor.save();
                }, img.src = obj.value;
            } else if (0 != obj.value.length) return obj.value = old_url, void this.editor.help.alert("errorIncorrentImageURL");
            this.item.params || (this.item.params = {}), this.item.params.icon = obj.value, 
            this.editor.listEditor.openCardCurState(), this.editor.save();
        }
    }
    onchangeButtonBorderStyle(obj) {
        this.editor.readonlyBot() || (this.item.params || (this.item.params = {}), 
        this.item.params.border || (this.item.params.border = {}), this.item.params.border.style = obj.getAttribute("data"), 
        this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    onchangeButtonBorderSize(obj) {
        this.editor.readonlyBot() || (this.item.params || (this.item.params = {}), 
        this.item.params.border || (this.item.params.border = {}), this.item.params.border.size = obj.value, 
        this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    onchangeButtonBorderColor(obj) {
        this.editor.readonlyBot() || (this.item.params || (this.item.params = {}), 
        this.item.params.border || (this.item.params.border = {}), this.item.params.border.color = obj.value, 
        this.editor.listEditor.openCardCurState(), this.editor.save());
    }
    showMapParams(container, item, actionID) {
        var id = 0;
        let editor = this.editor;
        var param = this.add(container, "qubot-param"), height = (this.addHint(param, "hintMapHight"), 
        this.addInterfaceFrameNumber(param, "height (px)", id++)), id = (height.id = "qubot-map-height", 
        height.min = "0", height.max = "1000", item.height || (item.height = "200"), 
        height.value = item.height, height.onchange = function() {
            editor.stateEditor.actions.onchangeHeightMap(this);
        }, param = this.add(container, "qubot-param"), this.addHint(param, "hintMapLongitude"), 
        this.addInterfaceFrameNumber(param, "longitude", +id)), container = (id.id = "qubot-map-longitude", 
        id.value = item.longitude || "0", id.onchange = function() {
            editor.stateEditor.actions.onchangeLongitudeMap(this);
        }, param = this.add(container, "qubot-param"), this.addHint(param, "hintMapLatitude"), 
        this.addInterfaceFrameNumber(param, "latitude", 2));
        return container.id = "qubot-map-latitude", container.value = item.latitude || "0", 
        container.onchange = function() {
            editor.stateEditor.actions.onchangeLatitudeMap(this);
        }, this.editor.readonlyBot(!1) && (height.setAttribute("disabled", ""), 
        id.setAttribute("disabled", ""), container.setAttribute("disabled", "")), 
        height;
    }
    onchangeHeightMap(obj) {
        var val;
        this.editor.readonlyBot() || ((val = obj.value) < 1 && (obj.value = 1), 
        1e3 < val && (obj.value = 1e3), this.item.height = obj.value.trim(), this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    onchangeLongitudeMap(obj) {
        this.editor.readonlyBot() || (this.item.longitude = obj.value.trim(), this.editor.save());
    }
    onchangeLatitudeMap(obj) {
        this.editor.readonlyBot() || (this.item.latitude = obj.value.trim(), this.editor.save());
    }
    showMediaParams(container, item) {
        var id = 0;
        let editor = this.editor;
        var param = this.add(container, "qubot-param"), stop = this.addInterfaceFrameCheck(param, "stop on event", id++), stop = (stop.checked = item.stop || !0, 
        stop.onchange = function() {
            editor.stateEditor.actions.onchangeMediaStop(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "autoplay", id++)), stop = (stop.checked = item.play || !0, 
        stop.onchange = function() {
            editor.stateEditor.actions.onchangeMediaPlay(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "controls", +id)), id = (stop.checked = item.control || !1, 
        stop.onchange = function() {
            editor.stateEditor.actions.onchangeMediaControl(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "loop", 3));
        return id.checked = item.loop || !1, id.onchange = function() {
            editor.stateEditor.actions.onchangeMediaLoop(this);
        }, param;
    }
    onchangeMediaStop(obj) {
        this.editor.readonlyBot() || (this.item.stop = obj.checked ? 1 : 0, this.editor.save());
    }
    onchangeMediaPlay(obj) {
        this.editor.readonlyBot() || (this.item.play = obj.checked ? 1 : 0, this.editor.save());
    }
    onchangeMediaControl(obj) {
        this.editor.readonlyBot() || (this.item.control = obj.checked ? 1 : 0, this.editor.save());
    }
    onchangeMediaLoop(obj) {
        this.editor.readonlyBot() || (this.item.loop = obj.checked ? 1 : 0, this.editor.save());
    }
    showMessageParams(container, item) {
        var result, id = 0;
        let editor = this.editor;
        param = result = this.add(container, "qubot-param"), this.addHint(param, "hintMessageType");
        this.addInterfaceFrameSelect(param, "kind", [ "normal", "disappear" ], id++, "", null, null, item.kind || "normal").onchange = function() {
            editor.stateEditor.actions.onchangeMessageKind(this, container);
        }, param = this.add(container, "qubot-param"), this.addHint(param, "hintMessageTyping");
        var param, id = this.addInterfaceFrameNumber(param, "typing (ms)", +id), id = (id.min = "0", 
        id.id = "qubot-message-typing", item.typing || (item.typing = "0"), id.value = item.typing, 
        id.onchange = function() {
            editor.stateEditor.actions.onchangeMessageTyping(this);
        }, param = this.add(container, "qubot-param"), this.addHint(param, "hintMessageBack"), 
        this.addInterfaceFrameColor(param, "background", 2));
        return "back" in item && item.back.length ? id.value = item.back : (param = getComputedStyle(document.documentElement).getPropertyValue("--qubot-message-background").trim(), 
        id.value = param || "#f7f7f7"), id.onchange(), id.oninput = function() {
            editor.stateEditor.actions.onchangeMessageBack(this);
        }, result;
    }
    onchangeMessageTyping(obj) {
        var val;
        this.editor.readonlyBot() || (val = obj.value, isNaN(val) && (obj.value = "0"), 
        this.item.typing = obj.value, document.getElementById("qubot-items").getElementsByClassName("active")[0].querySelector("#qubot-txt-timeB").innerHTML = 0 < obj.value ? obj.value < 1e3 ? obj.value + "ms" : Math.round(obj.value / 100) / 10 + "s" : "", 
        this.editor.save(), this.editor.resetEditorAndCard());
    }
    onchangeMessageBack(obj) {
        this.editor.readonlyBot() || (this.item.back = obj.value, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    onchangeMessageKind(obj) {
        this.editor.readonlyBot() || (this.item.kind = obj.getAttribute("data"), 
        this.editor.save());
    }
    showTimerParams(container, item) {
        let editor = this.editor;
        container = this.add(container, "qubot-param"), this.addHint(container, "hintTime"), 
        container = this.addInterfaceFrameText(container, "time (ms)", 0);
        return container.id = "qubot-timer-time", item.time || (item.time = "1000"), 
        container.value = item.time, container.onchange = function() {
            editor.stateEditor.actions.onchangeTimerTime(this);
        }, this.editor.readonlyBot(!1) && container.setAttribute("disabled", ""), 
        container;
    }
    onchangeTimerTime(obj) {
        var val;
        this.editor.readonlyBot() || (val = obj.value, /^[0-9]*$/.test(val) && (isNaN(val) || val < 100) && (obj.value = "100"), 
        this.item.time = obj.value, document.getElementById("qubot-items").getElementsByClassName("active")[0].querySelector("#qubot-txt-time").innerHTML = 0 < obj.value ? obj.value < 1e3 ? obj.value + "ms" : Math.round(obj.value / 100) / 10 + "s" : "", 
        this.editor.save());
    }
    addIntentsInterface(container, actions, actionID, parentIDs = []) {
        let editor = this.editor;
        0 === actions.length && actions.push({
            intent: "",
            words: {
                en: ""
            }
        }), this.addItemsPanel(), this.addPasteIntentsMenu();
        for (let i = 0; i < actions.length; i++) {
            let id = i;
            var intent = actions[i], content = this.createContentFrame(container, "action-intent", actionID, [ ...parentIDs, i ], !0, {
                id: "qubot-action-" + actionID,
                hint: "hintIntent"
            }).querySelector(".qubot-items-content"), item = (content.style.flexDirection = "column", 
            this.createContentItem(content, "intent-name", 2));
            if (this.addContentItemText(item, "qudata-svg-nlu", {
                placeholder: "Intent name...",
                maxlength: "128",
                value: intent.intent || "",
                hint: "hintIntentName",
                id: "qubot-intent-name" + id
            }).onchange = function() {
                editor.stateEditor.actions.onchangeIntentName(this, id);
            }, item = this.createContentItem(content, "intents", 2), this.addContentItemTextField(item, "", {
                placeholder: "Intent examples...",
                value: this.getText(intent.words) || "",
                hint: "hintIntentWords",
                id: "qubot-intent-words" + id
            }).onchange = function() {
                editor.stateEditor.actions.onchangeIntentWords(this, id);
            }, !this.editor.readonlyBot(!1)) {
                content = document.querySelectorAll("#qubot-actions>.qubot-item");
                if (0 < content.length) {
                    let id = i, edt = this;
                    content[content.length - 1].onmouseover = function(e) {
                        edt.addPasteButtons(this, id, "intent");
                    }, content[content.length - 1].onclick = function(e) {
                        e.stopPropagation();
                    };
                }
            }
            editor.save(), actionID++;
        }
        return actionID;
    }
    onchangeIntentName(elem, id) {
        this.editor.readonlyBot() || (id = this.getAction(this.item.actions, id), 
        elem = elem.value.trim(), id.intent = elem, this.editor.save());
    }
    onchangeIntentWords(elem, id) {
        this.editor.readonlyBot() || (id = this.getAction(this.item.actions, id), 
        elem = elem.value.trim(), id.words[this.LANGUAGE] = elem, this.editor.save());
    }
    addNewIntent(id) {
        this.editor.readonlyBot() || this.addActionOnID(id, "intent");
    }
    addCommentInterface(container, item, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "note", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID
        }).querySelector(".qubot-items-content"), parentIDs = this.addContentItemTextField(container, "", {
            value: item.note || item.comment || "",
            placeholder: "Comment this...",
            hint: "hintComment"
        }, !0);
        parentIDs.style.height = "100%", parentIDs.onchange = function() {
            editor.stateEditor.actions.onchangeCommentOnID(this, actionID);
        }, editor.save();
    }
    onchangeComment(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).note = obj.value.trim(), 
        this.editor.save());
    }
    onchangeCommentOnID(elem, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).note = elem.value.trim(), 
        this.editor.save());
    }
    showTextParams(container, item) {
        var id = 0;
        let editor = this.editor;
        var param = this.add(container, "qubot-param"), param = this.addInterfaceFrameColor(param, "color", id++), param = (param.value = item.color || getComputedStyle(document.documentElement).getPropertyValue("--qubot-message-color").trim() || "#212529", 
        param.onchange(), param.onchange = function() {
            editor.stateEditor.actions.onchangeTextColor(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "center", +id)), id = (param.checked = item.center || !1, 
        param.onchange = function() {
            editor.stateEditor.actions.onchangeTextCenter(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "pre", 2));
        id.checked = item.pre || !1, id.onchange = function() {
            editor.stateEditor.actions.onchangeTextPre(this);
        };
    }
    onchangeTextCenter(obj) {
        this.editor.readonlyBot() || (this.item.center = obj.checked ? 1 : 0, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    onchangeTextColor(obj) {
        this.editor.readonlyBot() || (this.item.color = obj.value, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    onchangeTextPre(obj) {
        this.editor.readonlyBot() || (this.item.pre = obj.checked ? 1 : 0, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    showImageParams(container, image) {
        var id = 0;
        let editor = this.editor;
        var param = this.add(container, "qubot-param"), param = this.addInterfaceFrameNumber(param, "width (%)", +id), id = (param.min = "0", 
        param.max = "100", image.width || (image.width = "100"), param.value = image.width, 
        param.onchange = function() {
            editor.stateEditor.actions.onchangeImageWidth(this);
        }, this.addInterfaceFrameCheck(this.add(container, "qubot-param"), "center", 1));
        id.checked = image.center || !1, id.onchange = function() {
            editor.stateEditor.actions.onchangeImageCenter(this);
        };
    }
    onchangeImageWidth(obj) {
        var val;
        this.editor.readonlyBot() || ((val = obj.value) < 1 ? obj.value = 1 : 100 < val && (obj.value = 100), 
        this.item.width = obj.value, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    onchangeImageCenter(obj) {
        this.editor.readonlyBot() || (this.item.center = obj.checked ? 1 : 0, this.editor.listEditor.openCardCurState(), 
        this.editor.save());
    }
    addStateInterface(container, state, stateID, actionID, caption, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "action-step", actionID, parentIDs, "thin", {
            id: "qubot-action-" + actionID
        }), this.addHint(container, "hintActionLoad"), container = container.querySelector(".qubot-items-content");
        let icon = "", hint = "";
        switch (caption) {
          case "state":
          case "step":
            icon = "qudata-svg-step", hint = "hintState";
            break;

          case "run":
            icon = "qudata-svg-run", hint = "hintRun";
            break;

          case "goto":
            icon = "qudata-svg-goto", hint = "hintGoto";
        }
        var state = this.addContentItemText(container, icon, {
            value: state || "",
            placeholder: "Enter card name...",
            hint: hint
        }, !0);
        state.onclick = function() {
            editor.stateEditor.actions.onclickInputState(null, actionID, caption);
        }, state.onchange = function() {
            editor.stateEditor.actions.onchangeInputState(this, actionID, caption);
        }, this.editor.readonlyBot(!1) && state.setAttribute("disabled", ""), this.editor.readonlyBot(!1) || (state = this.add(container, "controls"), 
        this.addContentInnerControls(state, "qudata-svg-zap", parentIDs, !0, [ "copy" ]).onclick = function() {
            this.classList.contains("on") ? (editor.stateEditor.actions.wasOnClickState = !1, 
            this.classList.remove("on")) : (this.classList.add("on"), editor.stateEditor.actions.wasOnClickState = !0, 
            editor.stateEditor.actions.changingState = caption, editor.stateEditor.actions.onclickInputState(this, actionID, caption));
        }), editor.save();
    }
    onclickInputState(obj, actionID, caption) {
        this.actionID = parseInt(actionID);
    }
    onchangeInputState(obj, actionID, caption) {
        var val;
        this.editor.readonlyBot() || (actionID = this.getAction(this.item.actions, actionID), 
        (val = obj.value.trim()).length ? val != this.editor.bot.state && val in this.editor.bot.states || "$" === val[0] || val.indexOf(!1) && 1 < val.indexOf("}") ? (this.changeState(val, caption), 
        this.wasOnClickState = !0, this.changingState = !0) : (this.editor.help.alert("UnknownState"), 
        obj.value = actionID[caption]) : (actionID[caption] = "", this.wasOnClickState = !0, 
        this.changingState = !0), 0 === val.length && (this.changingState = caption), 
        this.editor.listEditor.setCurState(), this.editor.save());
    }
    changeState(newState, caption) {
        this.editor.readonlyBot() || newState === this.editor.bot.state || (this.changeStateTree(newState, this.item.actions, 0, caption), 
        this.editor.dontSave = !1, this.editor.save());
    }
    changeStateTree(newState, actions, actionID, caption) {
        for (let i = 0; i < actions.length; i++) {
            if (actionID === this.actionID) return void (actions[i][caption] = newState);
            "if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? actionID = this.changeStateTree(newState, actions[i].actions, actionID + 1, caption) : actionID++;
        }
        return actionID;
    }
    addSlotInterface(container, slot, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "action-slot", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID,
            hint: "hintSlot"
        }).querySelector(".qubot-items-content"), container.style.flexDirection = "column", 
        parentIDs = this.createContentItem(container, "slot-name", 2);
        this.addContentItemText(parentIDs, "qudata-svg-slot", {
            placeholder: "Slot name...",
            maxlength: "128",
            value: slot.slot || "",
            hint: "hintSlotName"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeSlotName(this, actionID);
        }, parentIDs = this.createContentItem(container, "slot-value", 2), this.addContentItemCodeField(parentIDs, "", {
            placeholder: "Slot value...",
            value: slot.value || "",
            hint: "hintSlotValue"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeSlotValue(this, actionID);
        }, editor.save();
    }
    onchangeSlotName(obj, id) {
        if (!this.editor.readonlyBot()) {
            id = this.getAction(this.item.actions, id);
            let slot = obj.value.trim();
            0 < slot.length && /^[0-9]/.test(slot) ? (obj.value = id.slot, this.editor.help.alert("errorIncorrentSlotName")) : (slot.length && "$" === slot[0] && (slot = slot.substring(1), 
            obj.value = slot), id.slot = slot, id.slot in this.editor.bot.slots || (this.editor.bot.slots[id.slot] = ""), 
            this.editor.save());
        }
    }
    onchangeSlotValue(obj, id) {
        this.editor.readonlyBot() || (id = this.getAction(this.item.actions, id), 
        obj = obj.value.trim(), (id.value = obj).length && "$" !== obj[0] && "[" !== obj[0] && "{" !== obj[0] && isNaN(obj), 
        this.editor.save());
    }
    addScriptInterface(container, item, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "text", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID
        }).querySelector(".qubot-items-content"), parentIDs = this.addContentItemCodeField(container, "", {
            value: item.script || "",
            placeholder: "Script this...",
            hint: "hintScript"
        }, !0);
        parentIDs.onkeydown = editor.stateEditor.onkeydownText.bind(this), parentIDs.onclick = function() {
            editor.stateEditor.actions.expandCode(this);
        }, parentIDs.oninput = function() {
            editor.stateEditor.actions.expandCode(this);
        }, parentIDs.onchange = function() {
            editor.stateEditor.actions.onchangeScript(this, actionID);
        }, editor.save();
    }
    onchangeScript(obj, actionID) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, actionID).script = obj.value.trim(), 
        this.editor.save());
    }
    addIfInterface(container, actionIf, actionID, actions, id, parentIDs = null) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        this.addHint(id, "hintIf"), container = this.add(id, "qubot-item"), container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-if"), this.addHint(id, "hintIf"), 
        container.setAttribute("lang", "qb"), container.setAttribute("spellcheck", "false"), 
        container.onchange = function() {
            editor.stateEditor.actions.onchangeIF(this);
        }, container.setAttribute("placeholder", "Enter boolean expression"), container.value = actionIf.if || "", 
        container.id = "qubot-action-if-" + actionID, container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionIf.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionIf.actions, actionID, [ ...parentIDs ]), 
        0 < actionIf.actions.length) && this.addAddAction(actions, actionIf.actions.length, parentIDs), 
        actionID;
    }
    onchangeIF(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).if = obj.value, 
        this.editor.save());
    }
    addElifInterface(container, actionIf, actionID, actions, id, parentIDs = []) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        container = this.add(id, "qubot-item"), container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-elif"), this.addHint(id, "hintElIf"), 
        container.setAttribute("lang", "qb"), container.setAttribute("spellcheck", "false"), 
        container.onchange = function() {
            editor.stateEditor.actions.onchangeIF(this);
        }, container.setAttribute("placeholder", "Enter boolean expression..."), 
        container.value = actionIf.if || "", container.id = "qubot-action-elif-" + actionID, 
        container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionIf.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionIf.actions, actionID, [ ...parentIDs ]), 
        0 < actionIf.actions.length) && this.addAddAction(actions, actionIf.actions.length, parentIDs), 
        actionID;
    }
    onchangeELIF(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).else = obj.value.trim(), 
        this.editor.save());
    }
    addElseInterface(container, actionElse, actionID, actions, id, parentIDs = []) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        this.addHint(id, "hintElse"), container = this.add(id, "qubot-item"), container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-else"), container.setAttribute("placeholder", "Triggered if the previous condition is false"), 
        container.setAttribute("disabled", !0), container.setAttribute("readonly", !0), 
        container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionElse.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionElse.actions, actionID, [ ...parentIDs ]), 
        0 < actionElse.actions.length) && this.addAddAction(actions, actionElse.actions.length, parentIDs), 
        actionID;
    }
    onchangeElse(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).if = obj.value, 
        this.editor.save());
    }
    addSwitchInterface(container, actionIf, actionID, actions, id, parentIDs) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        this.addHint(id, "hintSwitch"), container = this.add(id, "qubot-item"), 
        container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-switch"), 
        this.addHint(id, "hintIf"), container.setAttribute("lang", "qb"), container.setAttribute("spellcheck", "false"), 
        container.onchange = function() {
            editor.stateEditor.actions.onchangeSwitch(this);
        }, container.setAttribute("placeholder", "Enter boolean expression"), container.value = actionIf.switch || "", 
        container.id = "qubot-action-switch-" + actionID, container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionIf.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionIf.actions, actionID, [ ...parentIDs ]), 
        0 < actionIf.actions.length) && this.addAddAction(actions, actionIf.actions.length, parentIDs), 
        actionID;
    }
    onchangeSwitch(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).switch = obj.value.trim(), 
        this.editor.save());
    }
    addCaseInterface(container, actionIf, actionID, actions, id, parentIDs) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        this.addHint(id, "hintCase"), container = this.add(id, "qubot-item"), container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-case"), this.addHint(id, "hintIf"), 
        container.setAttribute("lang", "qb"), container.setAttribute("spellcheck", "false"), 
        container.onchange = function() {
            editor.stateEditor.actions.onchangeCase(this);
        }, container.setAttribute("placeholder", "Enter boolean expression"), container.value = actionIf.case || "", 
        container.id = "qubot-action-case-" + actionID, container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionIf.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionIf.actions, actionID, [ ...parentIDs ]), 
        0 < actionIf.actions.length) && this.addAddAction(actions, actionIf.actions.length, parentIDs), 
        actionID;
    }
    onchangeCase(obj) {
        var id;
        this.editor.readonlyBot() || (id = this.getObjID(obj), this.getAction(this.item.actions, id).case = obj.value.trim(), 
        this.editor.save());
    }
    addDefaultInterface(container, actionIf, actionID, actions, id, parentIDs) {
        let editor = this.editor, disabled = [ "case", "default" ];
        id + 1 < actions.length && "else" in actions[id + 1] && (disabled = disabled.concat([ "step", "goto", "run", "slot", "script", "clear", "if", "switch", "save", "event" ]));
        actions = this.add(container, "qubot-action-if");
        if (actions.id = "qubot-action-" + actionID, !this.editor.readonlyBot(!1)) {
            let cid = actionID;
            this.add(actions, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
                1 == e.buttons && editor.mousedownDragMenuActions(e, cid, !1, parentIDs);
            };
        }
        id = this.addInterfaceFrame(actions, "", actionID, !0, disabled), id.classList.add("qubot-if"), 
        this.addHint(id, "hintDefault"), container = this.add(id, "qubot-item"), 
        container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, 2);
        }, container = this.addContentItemText(container, "qudata-svg-default"), 
        container.setAttribute("placeholder", "Triggered if the previous condition is false"), 
        container.setAttribute("disabled", !0), container.setAttribute("readonly", !0), 
        container = this.add(actions, "controls");
        return this.add(container, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }, this.editor.readonlyBot(!1) || (this.add(container, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), actionID++, actionIf.actions && (actions = this.add(id, "actions"), 
        actionID = this.showActions(actions, actionIf.actions, actionID, [ ...parentIDs ]), 
        0 < actionIf.actions.length) && this.addAddAction(actions, actionIf.actions.length, parentIDs), 
        actionID;
    }
    addActionClearInterface(container, clear, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "action-clear", actionID, parentIDs, "thin", {
            id: "qubot-action-" + actionID
        }), this.addHint(container, "hintActionLoad"), container = container.querySelector(".qubot-items-content"), 
        this.addContentItemNumber(container, "qudata-svg-clear", {
            value: clear.clear || "",
            placeholder: "The number of recent messages (-1 is all)...",
            hint: "hintClear",
            min: -1,
            max: 10
        }, !0).onchange = function() {
            editor.stateEditor.actions.onchangeInputClear(this, actionID);
        }, clear = this.add(container, "controls");
        this.addContentInnerControls(clear, "", parentIDs, !0, [ "copy" ]), editor.save();
    }
    onchangeInputClear(obj, actionID) {
        this.editor.readonlyBot() || (actionID = this.getAction(this.item.actions, actionID), 
        obj = obj.value.trim(), actionID.clear = obj, this.editor.save());
    }
    addActionLoadInterface(container, action, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "action-load", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID
        });
        this.addHint(container, "hintActionLoad");
        let content = container.querySelector(".qubot-items-content");
        content.style.flexDirection = "column";
        parentIDs = this.createContentItem(content, "storage", 2);
        let titles = [ "Google Sheets", "Google Drive", "Dropbox" ], values = [ "google_sheets", "google_drive", "dropbox" ];
        "wp" == this.editor.env.type && (titles = [ "The load is not supported in WP" ], 
        values = [ "wp" ]), action.storage || (action.storage = values[0]);
        container = this.addContentItemSelect(parentIDs, "qudata-svg-load", titles, values, {
            value: action.storage
        });
        switch (container.onchange = function() {
            editor.stateEditor.actions.onChangeActionLoadStorage(content, actionID, this.value);
        }, this.addHint(container, "hintActionLoadStorage"), container.value) {
          case "google_sheets":
            this.addActionLoadGoogleSheetsInterface(content, action, actionID);
            break;

          case "google_drive":
            this.addActionLoadGoogleDriveInterface(content, action, actionID);
            break;

          case "dropbox":
            this.addActionLoadDropboxInterface(content, action, actionID);
        }
        editor.save();
    }
    onChangeActionLoadStorage(container, actionID, value) {
        if (!this.editor.readonlyBot()) if ("dashboard" == this.editor.env.type || "local" == this.editor.env.type || "qudata" !== obj.value && "sheets" !== obj.value) {
            for (var action = this.getAction(this.item.actions, actionID), children = (action.storage = value, 
            container.children), i = children.length - 1; 0 < i; i--) container.removeChild(children[i]);
            switch (action.storage) {
              case "google_sheets":
                this.addActionLoadGoogleSheetsInterface(container, action, actionID);
                break;

              case "google_drive":
                this.addActionLoadGoogleDriveInterface(container, action, actionID);
                break;

              case "dropbox":
                this.addActionLoadDropboxInterface(container, action, actionID);
            }
            this.editor.save();
        } else this.editor.help.alert("storageNeedQudata");
    }
    addActionLoadGoogleSheetsInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "field-id", 2), tableURL = this.addContentItemText(item, "", {
            placeholder: "Google Sheets table url...",
            maxlength: "128",
            value: action.table_url || ""
        }), tableURL = (this.addHint(tableURL, "hintActionLoadGoogleSheetsTableURL"), 
        tableURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadGSTableURL(this, actionID);
        }, item = this.createContentItem(container, "slot-name", 2), this.addContentItemText(item, "", {
            placeholder: "Slot name...",
            maxlength: "128",
            value: action.slot_name || ""
        })), tableURL = (this.addHint(tableURL, "hintActionLoadGoogleSheetsSlotName"), 
        tableURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadGSSlot(this, actionID);
        }, item = this.createContentItem(container, "data-filter", 2), this.addContentItemCodeField(item, "", {
            placeholder: "Data filter...",
            maxlength: "128",
            value: action.data_filter || ""
        }));
        this.addHint(tableURL, "hintActionLoadGoogleSheetsFilter"), tableURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadGSFilter(this, actionID);
        };
    }
    onchangeActionLoadGSTableURL(obj, id) {
        if (!this.editor.readonlyBot()) {
            var action = this.getAction(this.item.actions, id), url = obj.value.trim(), tokens = url.split("/");
            if (0 == tokens[0].length) obj.value = ""; else if (5 < tokens.length) {
                {
                    let id = tokens[5];
                    if (id.length < 20) return obj.value = "", void this.editor.help.alert("errorIncorrentGoogleSheetsTableURL");
                    action.table_url = url, action.table_id = id;
                }
                id = url.indexOf("gid=");
                0 < id && (tokens = url.substring(id + 4), action.table_sheet_id = tokens), 
                this.editor.save();
            } else obj.value = "", this.editor.help.alert("errorIncorrentGoogleSheetsTableURL");
        }
    }
    onchangeActionLoadGSSlot(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).slot_name = obj.value.trim(), 
        this.editor.save());
    }
    onchangeActionLoadGSFilter(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).data_filter = obj.value.trim(), 
        this.editor.save());
    }
    addActionLoadGoogleDriveInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "field-id", 2), fileURL = this.addContentItemText(item, "", {
            placeholder: "Google Drive file url...",
            maxlength: "128",
            value: action.file_url || ""
        }), fileURL = (this.addHint(fileURL, "hintActionLoadGoogleDriveFileURL"), 
        fileURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadGDFileURL(this, actionID);
        }, item = this.createContentItem(container, "slot-name", 2), this.addContentItemText(item, "", {
            placeholder: "Slot name...",
            maxlength: "128",
            value: action.slot_name || ""
        }));
        this.addHint(fileURL, "hintActionLoadGoogleDriveSlotName"), fileURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadGDSlot(this, actionID);
        };
    }
    onchangeActionLoadGDFileURL(obj, id) {
        if (!this.editor.readonlyBot()) {
            var action = this.getAction(this.item.actions, id), url = obj.value.trim(), tokens = url.split("/");
            if (5 < tokens.length) {
                {
                    let id = tokens[5];
                    if (id.length < 20) return obj.value = "", void this.editor.help.alert("errorIncorrentGoogleDriveFileURL");
                    action.file_url = url, action.file_id = id;
                }
                this.editor.save();
            } else obj.value = "", this.editor.help.alert("errorIncorrentGoogleDriveFileURL");
        }
    }
    onchangeActionLoadGDSlot(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).slot_name = obj.value.trim(), 
        this.editor.save());
    }
    addActionLoadDropboxInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "path", 2), fileURL = this.addContentItemText(item, "", {
            placeholder: "Path to file in dropbox...",
            maxlength: "128",
            value: action.path || ""
        }), fileURL = (this.addHint(fileURL, "hintActionLoadDropboxFilePath"), fileURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadDropboxPath(this, actionID);
        }, item = this.createContentItem(container, "slot-name", 2), this.addContentItemText(item, "", {
            placeholder: "Slot name...",
            maxlength: "128",
            value: action.slot_name || ""
        }));
        this.addHint(fileURL, "hintActionLoadDropboxSlotName"), fileURL.onchange = function() {
            editor.stateEditor.actions.onchangeActionLoadDropboxSlot(this, actionID);
        };
    }
    onchangeActionLoadDropboxPath(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).path = obj.value.trim(), 
        this.editor.save());
    }
    onchangeActionLoadDropboxSlot(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).slot_name = obj.value.trim(), 
        this.editor.save());
    }
    addActionModelInterface(container, action, actionID, parentIDs = []) {
        let editor = this.editor;
        let content = this.createContentFrame(container, "action-model", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID,
            hint: "hintActionModel"
        }).querySelector(".qubot-items-content");
        content.style.flexDirection = "column";
        container = this.createContentItem(content, "model", 2), parentIDs = [ "chat_gpt" ], 
        action.model || (action.model = parentIDs[0]), container = this.addContentItemSelect(container, "qudata-svg-model", [ "ChatGPT" ], parentIDs, {
            value: action.model,
            hint: "hintActionModel"
        });
        container.onchange = function() {
            editor.stateEditor.actions.onchangeActionModelModel(content, actionID, this.value);
        }, "chat_gpt" === container.value && this.addActionModelParamsInterface(content, action, actionID), 
        editor.save();
    }
    onchangeActionModelModel(container, id, value) {
        if (!this.editor.readonlyBot()) {
            for (var id = this.getAction(this.item.actions, id), children = (id.model = value, 
            container.children), i = children.length - 1; 0 < i; i--) container.removeChild(children[i]);
            "chat_gpt" === id.storage && this.addActionModelParamsInterface(content, id, actionID), 
            this.editor.save();
        }
    }
    addActionModelParamsInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "model-system-field", 2);
        let dataField = this.addContentItemCodeField(item, "", {
            placeholder: "System prompt...",
            value: action?.system || "",
            hint: "hintActionModelSystem"
        });
        dataField.onchange = function() {
            editor.stateEditor.actions.onchangeActionModelSystem(this, actionID);
        }, item = this.createContentItem(container, "model-value-field", 3), (dataField = this.addContentItemCodeField(item, "", {
            placeholder: "Text message...",
            value: action?.text || "",
            hint: "hintActionModelText"
        })).onchange = function() {
            editor.stateEditor.actions.onchangeActionModelValue(this, actionID);
        }, item = this.createContentItem(container, "model-slot-field", 4), (dataField = this.addContentItemCodeField(item, "", {
            placeholder: "Output slot...",
            value: action?.slot || "",
            hint: "hintActionModelSlot"
        })).onchange = function() {
            editor.stateEditor.actions.onchangeActionModelSlot(this, actionID);
        };
    }
    onchangeActionModelSystem(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).system = obj.value.trim(), 
        this.editor.dontSave = !1, this.editor.save());
    }
    onchangeActionModelValue(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).text = obj.value.trim(), 
        this.editor.dontSave = !1, this.editor.save());
    }
    onchangeActionModelSlot(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).slot = obj.value.trim(), 
        this.editor.dontSave = !1, this.editor.save());
    }
    addActionSaveInterface(container, action, actionID, parentIDs = []) {
        let editor = this.editor;
        let content = this.createContentFrame(container, "action-save", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID,
            hint: "hintActionSave"
        }).querySelector(".qubot-items-content");
        content.style.flexDirection = "column";
        container = this.createContentItem(content, "storage", 2);
        let titles = [ "QuData.com", "Google Sheets" ], values = [ "qudata", "google_sheets" ];
        "wp" == this.editor.env.type && (titles = [ "Word Press", "QuData.com" ], 
        values = [ "wp", "qudata" ]), action.storage || (action.storage = values[0]);
        parentIDs = this.addContentItemSelect(container, "qudata-svg-save", titles, values, {
            value: action.storage,
            hint: "hintActionSaveStorage"
        });
        switch (parentIDs.onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveStorage(content, actionID, this.value);
        }, parentIDs.value) {
          case "qudata":
            this.addActionSaveQuDataInterface(content, action, actionID);
            break;

          case "wp":
            this.addActionSaveWPInterface(content, action, actionID);
            break;

          case "google_sheets":
            this.addActionSaveGoogleSheetsInterface(content, action, actionID);
        }
        editor.save();
    }
    onchangeActionSaveStorage(container, id, value) {
        if (!this.editor.readonlyBot()) if ("dashboard" == this.editor.env.type || "local" == this.editor.env.type || "qudata" !== value && "google_sheets" !== value) {
            for (var action = this.getAction(this.item.actions, id), children = (action.storage = value, 
            container.children), i = children.length - 1; 0 < i; i--) container.removeChild(children[i]);
            switch (action.storage) {
              case "qudata":
                this.addActionSaveQuDataInterface(container, action, id);
                break;

              case "wp":
                this.addActionSaveWPInterface(container, action, id);
                break;

              case "google_sheets":
                this.addActionSaveGoogleSheetsInterface(container, action, id);
            }
            this.editor.save();
        } else this.editor.help.alert("storageNeedQudata");
    }
    addActionSaveQuDataInterface(container, action, actionID) {
        let editor = this.editor;
        container = this.createContentItem(container, "data-field", 2);
        this.addContentItemCodeField(container, "", {
            placeholder: "Data value...",
            value: action.value || "",
            hint: "hintActionSaveValue"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveValue(this, actionID);
        };
    }
    addActionSaveWPInterface(container, action, actionID) {
        let editor = this.editor;
        container = this.createContentItem(container, "data-field", 2);
        this.addContentItemCodeField(container, "", {
            placeholder: "Data value...",
            value: action.value || "",
            hint: "hintActionSaveValue"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveValue(this, actionID);
        };
    }
    addActionSaveGoogleSheetsInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "table-id", 2);
        this.addContentItemText(item, "", {
            placeholder: "Google Sheets table url...",
            maxlength: "128",
            value: action.table_url || "",
            hint: "hintActionLoadGoogleSheetsTableURL"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveGSTableURL(this, actionID);
        }, item = this.createContentItem(container, "data-field", 2), this.addContentItemCodeField(item, "", {
            placeholder: "Data value...",
            value: action.value || "",
            hint: "hintActionSaveGoogleSheetsValue"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveValue(this, actionID);
        }, item = this.createContentItem(container, "qubot-item data-filter"), this.addContentItemCodeField(item, "", {
            placeholder: "Data filter...",
            value: action.data_filter || "",
            hint: "hintActionSaveGoogleSheetsFilter"
        }).onchange = function() {
            editor.stateEditor.actions.onchangeActionSaveGSFilter(this, actionID);
        };
    }
    onchangeActionSaveGSTableURL(obj, id) {
        if (!this.editor.readonlyBot()) {
            var action = this.getAction(this.item.actions, id), url = obj.value.trim(), tokens = url.split("/");
            if (0 == tokens[0].length) obj.value = ""; else if (5 < tokens.length) {
                {
                    let id = tokens[5];
                    if (id.length < 20) return obj.value = "", void this.editor.help.alert("errorIncorrentGoogleSheetsTableURL");
                    action.table_url = url, action.table_id = id;
                }
                id = url.indexOf("gid=");
                0 < id && (tokens = url.substring(id + 4), action.table_sheet_id = tokens), 
                this.editor.save();
            } else obj.value = "", this.editor.help.alert("errorIncorrentGoogleSheetsTableURL");
        }
    }
    onchangeActionSaveValue(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).value = obj.value.trim(), 
        this.editor.dontSave = !1, this.editor.save());
    }
    onchangeActionSaveGSFilter(obj, id) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, id).data_filter = obj.value.trim(), 
        this.editor.dontSave = !1, this.editor.save());
    }
    addActionEventInterface(container, action, actionID, parentIDs = []) {
        let editor = this.editor;
        var container = this.createContentFrame(container, "action-event", actionID, parentIDs, "thin", {
            id: "qubot-action-" + actionID,
            hint: "hintActionEvent"
        }).querySelector(".qubot-items-content"), check = (this.addContentItemText(container, "qudata-svg-event", {
            value: action.key || "",
            placeholder: "Enter event key...",
            hint: "hintActionEventKey"
        }, !0).onchange = function() {
            editor.stateEditor.actions.onchangeActionEventKey(this, actionID);
        }, this.add(container, "qubot-check")), check = this.addInterfaceFrameCheck(check, "Is target", actionID), action = (check.checked = action.target || !1, 
        check.onchange = function() {
            editor.stateEditor.actions.onchangeActionEventTarget(this, actionID);
        }, this.addHint(check, "hintActionEventTarget"), this.add(container, "controls"));
        this.addContentInnerControls(action, "", parentIDs, !0, [ "copy" ]), editor.save();
    }
    onchangeActionEventKey(obj, actionID) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, actionID).key = obj.value.trim(), 
        this.editor.save());
    }
    onchangeActionEventTarget(obj, actionID) {
        this.editor.readonlyBot() || (this.getAction(this.item.actions, actionID).target = obj.checked, 
        this.editor.save());
    }
    addActionOperatorInterface(container, action, actionID, parentIDs = []) {
        let editor = this.editor;
        container = this.createContentFrame(container, "action-operator", actionID, parentIDs, !0, {
            id: "qubot-action-" + actionID
        });
        this.addHint(container, "hintActionOperator");
        let content = container.querySelector(".qubot-items-content");
        content.style.flexDirection = "column";
        parentIDs = this.createContentItem(content, "operator", 2), action.op_adapter || (action.op_adapter = "livechat"), 
        container = this.addContentItemSelect(parentIDs, "qudata-svg-operator", [ "LiveChat" ], [ "livechat" ], {
            value: action.op_adapter
        });
        container.onchange = function() {
            editor.stateEditor.actions.onChangeActionOperatorAdapter(content, this.value, actionID);
        }, this.addHint(container, "hintActionOperatorAdapter"), "livechat" === container.value && this.addActionOperatorStateProps(content, action, actionID), 
        editor.save();
    }
    onChangeActionOperatorAdapter(container, value, actionID) {
        if (!this.editor.readonlyBot()) {
            for (var action = this.getAction(this.item.actions, actionID), children = (action.op_adapter = value, 
            container.children), i = children.length - 1; 0 < i; i--) container.removeChild(children[i]);
            this.addActionOperatorStateProps(container, action, actionID), this.editor.save();
        }
    }
    addActionOperatorLiveChatInterface(container, action, actionID) {}
    addActionOperatorStateProps(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "op-state", 2), item = (action.op_state || (action.op_state = "start"), 
        this.addContentItemSelect(item, "", [ "Start", "Wait", "Close" ], [ "start", "wait", "close" ], {
            value: action.op_state
        }));
        switch (this.addHint(item, "hintActionOperatorState"), item.onchange = function() {
            editor.stateEditor.actions.onChangeActionOperatorState(container, actionID, this.value);
        }, item.value) {
          case "start":
            this.addActionOperatorStateStartInterface(container, action, actionID);
            break;

          case "wait":
            this.addActionOperatorStateWaitInterface(container, action, actionID);
            break;

          case "close":
            this.addActionOperatorStateCloseInterface(container, action, actionID);
        }
    }
    onChangeActionOperatorState(container, actionID, value) {
        if (!this.editor.readonlyBot()) {
            for (var action = this.getAction(this.item.actions, actionID), children = (action.op_state = value, 
            container.children), i = children.length - 1; 1 < i; i--) container.removeChild(children[i]);
            switch (action.op_state) {
              case "start":
                this.addActionOperatorStateStartInterface(container, action, actionID);
                break;

              case "wait":
                this.addActionOperatorStateWaitInterface(container, action, actionID);
                break;

              case "close":
                this.addActionOperatorStateCloseInterface(container, action, actionID);
            }
            this.editor.save();
        }
    }
    addActionOperatorStateStartInterface(container, action, actionID) {
        let editor = this.editor;
        var item = this.createContentItem(container, "op-name", 2), operatorName = this.addContentItemCode(item, "", {
            placeholder: "User name...",
            value: action.user_name || ""
        }), operatorName = (this.addHint(operatorName, "hintActionOperatorUserName"), 
        operatorName.onchange = function() {
            editor.stateEditor.actions.onchangeActionOperatorUserName(actionID, this.value);
        }, item = this.createContentItem(container, "op-message", 2), this.addContentItemCodeField(item, "", {
            placeholder: "Invite message...",
            value: action.user_message || ""
        }));
        this.addHint(operatorName, "hintActionOperatorMessage"), operatorName.onchange = function() {
            editor.stateEditor.actions.onchangeActionOperatorUserMessage(actionID, this.value);
        };
    }
    onchangeActionOperatorUserName(actionID, value) {
        this.editor.readonlyBot() || ((actionID = this.getAction(this.item.actions, actionID)) && (actionID.user_name = value.trim()), 
        this.editor.save());
    }
    onchangeActionOperatorUserMessage(actionID, value) {
        this.editor.readonlyBot() || ((actionID = this.getAction(this.item.actions, actionID)) && (actionID.user_message = value.trim()), 
        this.editor.save());
    }
    addActionOperatorStateWaitInterface(container, action, actionID) {}
    addActionOperatorStateCloseInterface(container, action, actionID) {}
    addAction(obj, type) {
        if (!this.editor.readonlyBot()) if (0 !== this.item.actions.length && obj) {
            if ("action-add" === obj.className) {
                let idStr = obj.id.substring(17);
                var id = parseInt(idStr), id = this.getAction(this.item.actions, id);
                if (id && id.actions) return this.insertAction(0, id.actions, type), 
                void this.editor.save();
            }
            let idStr;
            if ((idStr = obj.id.substring(13)).length && !isNaN(idStr)) {
                let id = parseInt(idStr);
                this.addAcionTree(this.item.actions, 0, id, type), this.editor.save();
            }
            this.editor.listEditor.openCardCurState();
        } else this.addAcionTree(this.item.actions, 0, 0, type), this.editor.save();
    }
    addActionOnID(ids, type) {
        if (!this.editor.readonlyBot()) {
            ids = ids.split(",");
            for (let i = 0; i < ids.length; i++) ids[i] = parseInt(ids[i]);
            let actions = this.item.actions, id = 0;
            for (let i = 1; i < ids.length && actions[ids[i - 1]].actions; i++) actions = actions[ids[i - 1]].actions, 
            id = i;
            this.insertAction(ids[id], actions, type), this.editor.save(), this.editor.listEditor.openCardCurState();
        }
    }
    addActionInTree(ids, cnt, actions, type) {
        for (let i = 0; i < actions.length; i++) {
            var id;
            switch (i == ids[0] && (id = ids[0], ids.splice(0, 1), this.addActionInTree(ids, cnt, actions[id].actions, type)), 
            actions[i]) {
              case "if":
              case "else":
              case "case":
              case "default":
                cnt = this.addActionInTree();
            }
        }
    }
    addAcionTree(actions, totID, id, type) {
        if (!(id < totID)) for (let i = 0; i < actions.length; i++) {
            if (totID === id) return this.insertAction(i + 1, actions, type), totID + 1;
            actions[i] && ("if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? totID = this.addAcionTree(actions[i].actions, totID + 1, id, type) : totID++);
        }
        return totID;
    }
    insertAction(i, actions, type, value = 0) {
        let data = null;
        switch (type) {
          case "state":
            data = {
                state: ""
            };
            break;

          case "goto":
            data = {
                goto: ""
            };
            break;

          case "run":
            data = {
                run: ""
            };
            break;

          case "slot":
            data = {
                slot: "",
                value: ""
            };
            break;

          case "clear":
            data = {
                clear: ""
            };
            break;

          case "save":
            data = {
                action: "save",
                storage: "",
                key: "",
                value: ""
            };
            break;

          case "load":
            data = {
                action: "load",
                storage: ""
            };
            break;

          case "event":
            data = {
                action: "event",
                key: "",
                target: !1
            };
            break;

          case "script":
            data = {
                script: ""
            };
            break;

          case "operator":
            data = {
                action: "operator",
                op_adapter: ""
            };
            break;

          case "note":
            data = {
                note: ""
            };
            break;

          case "if":
            data = {
                if: "",
                actions: []
            };
            break;

          case "else":
            data = {
                else: "",
                actions: []
            };
            break;

          case "elif":
            data = {
                else: " ",
                actions: []
            };
            break;

          case "switch":
            data = {
                switch: "",
                actions: [ {
                    case: "",
                    actions: []
                } ]
            };
            break;

          case "case":
            data = {
                case: "",
                actions: []
            };
            break;

          case "default":
            data = {
                default: "",
                actions: []
            };
            break;

          case "intent":
            data = {
                intent: "",
                words: {}
            };
            break;

          case "model":
            data = {
                action: "model",
                model: "chat_gpt",
                system: "",
                text: "",
                slot: ""
            };
        }
        actions.length > i ? actions.splice(i, 0, data) : actions.push(data), this.show(), 
        this.editor.listEditor.openCardCurState();
    }
    delActionOnID(id) {
        this.editor.readonlyBot() || (this.delActionTree(this.item.actions, 0, id), 
        this.editor.listEditor.openCardCurState());
    }
    removeAction(ids) {
        this.editor.readonlyBot() || ((ids = this.getActions(ids)).actions.splice(ids.id, 1), 
        this.editor.save(), this.editor.stateEditor.actions.show());
    }
    delActionTree(actions, totID, id) {
        for (let i = 0; i < actions.length; i++) if (actions[i]) {
            if (totID === id) return actions.splice(i, 1), void this.show();
            "if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? totID = this.delActionTree(actions[i].actions, totID + 1, id) : totID++;
        }
        return totID;
    }
    changeActionPosition(startPos, curPos, newPos) {
        this.editor.readonlyBot() || (this.changeActionPositionTree(this.item.actions, 0, startPos, curPos, newPos), 
        this.show());
    }
    changeActionPositionOnID(ids, newPos) {
        if (!this.editor.readonlyBot()) {
            let id = (ids = Array.isArray(ids) ? ids : [ ids ])[0], actions = this.item.actions;
            for (let i = 1; i < ids.length; i++) actions = actions[id].actions, 
            id = ids[i];
            var action = actions[id];
            action && (actions.splice(id, 1), actions.splice(newPos, 0, action)), 
            this.show();
        }
    }
    changeActionPositionTree(actions, totID, startPos, curPos, newPos) {
        for (let i = 0; i < actions.length; i++) if (actions[i]) {
            var action;
            if (totID === startPos) return void ((action = actions[curPos]) && (actions.splice(curPos, 1), 
            actions.splice(newPos, 0, action)));
            "actions" in actions[i] ? totID = this.changeActionPositionTree(actions[i].actions, totID + 1, startPos, curPos, newPos) : totID++;
        }
        return totID;
    }
    changeActionPositionInTree(actions, totID, startPos, curPos, newPos) {
        for (let i = 0; i < actions.length; i++) if (actions[i]) {
            var action;
            if (totID === startPos) return void ((action = actions[curPos]) && (actions.splice(curPos, 1), 
            actions.splice(newPos, 0, action)));
            "actions" in actions[i] ? totID = this.changeActionPositionTree(actions[i].actions, totID + 1, startPos, curPos, newPos) : totID++;
        }
        return totID;
    }
    moveAction(obj, dir) {
        this.editor.readonlyBot() || (obj = parseInt(obj.parentNode.id.substring(13)), 
        this.moveActionTree(this.item.actions, 0, obj, dir), this.editor.save());
    }
    moveActionTree(actions, totID, id, dir) {
        for (let i = 0; i < actions.length; i++) {
            var item;
            if (totID === id) return 0 === id && -1 == dir || id === actions.length - 1 && 1 == dir ? void 0 : (item = actions[i], 
            actions.splice(i, 1), actions.splice(i + dir, 0, item), void this.show());
            "if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? totID = this.moveActionTree(actions[i].actions, totID + 1, id, dir) : totID++;
        }
        return totID;
    }
    copyAction(ids) {
        ids = this.getActions(ids);
        this.copiedAction = JSON.parse(JSON.stringify(ids.actions[ids.id]));
    }
    copyActionOnID(id) {
        this.copyActionTree(this.item.actions, 0, id);
    }
    copyActionTree(actions, totID, id) {
        for (let i = 0; i < actions.length; i++) {
            if (totID === id) return void (this.copiedAction = JSON.parse(JSON.stringify(actions[i])));
            "if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? totID = this.copyActionTree(actions[i].actions, totID + 1, id) : totID++;
        }
        return totID;
    }
    pasteAction(obj) {
        this.editor.readonlyBot() || (this.copiedAction ? (obj = this.getObjID(obj), 
        this.pasteActionTree(this.item.actions, 0, obj)) : this.editor.help.alert("YouDontCopyActionYet"), 
        this.show());
    }
    pasteActionOnID(ids) {
        if (!this.editor.readonlyBot()) if (!this.copiedAction || "intent" in this.copiedAction) this.editor.help.alert("YouDontCopyActionYet"), 
        this.show(); else {
            ids = ids.split(",");
            for (let i = 0; i < ids.length; i++) ids[i] = parseInt(ids[i]);
            let actions = this.item.actions, id = 0;
            for (let i = 1; i < ids.length && actions[ids[i - 1]].actions; i++) actions = actions[ids[i - 1]].actions, 
            id = i;
            actions.splice(ids[id], 0, JSON.parse(JSON.stringify(this.copiedAction))), 
            this.editor.save(), this.editor.stateEditor.actions.show();
        }
    }
    pasteIntentOnID(ids) {
        if (!this.editor.readonlyBot()) if (this.copiedAction && "intent" in this.copiedAction) {
            ids = ids.split(",");
            for (let i = 0; i < ids.length; i++) ids[i] = parseInt(ids[i]);
            let actions = this.item.actions, id = 0;
            for (let i = 1; i < ids.length && actions[ids[i - 1]].actions; i++) actions = actions[ids[i - 1]].actions, 
            id = i;
            actions.splice(ids[id], 0, JSON.parse(JSON.stringify(this.copiedAction))), 
            this.editor.save(), this.editor.stateEditor.actions.show();
        } else this.editor.help.alert("YouDontCopyActionYet"), this.show();
    }
    pasteActionTree(actions, totID, id) {
        for (let i = 0; i < actions.length; i++) {
            if (totID === id) return void actions.splice(i, 0, JSON.parse(JSON.stringify(this.copiedAction)));
            "if" in actions[i] || "else" in actions[i] || "switch" in actions[i] || "case" in actions[i] || "default" in actions[i] ? totID = this.pasteActionTree(actions[i].actions, totID + 1, id) : totID++;
        }
        return totID;
    }
    onclickAction(obj, e = null, parent = 0) {
        if (this.activeItem = obj, document.querySelectorAll("#qubot-actions .qubot-item.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), document.querySelectorAll("#qubot-actions .qubot-action-if.active").forEach(item => {
            item != obj && item.classList.remove("active");
        }), obj.classList.add("active"), e) {
            e.stopPropagation();
            for (let i = 0; i < parent; i++) obj = obj.parentNode;
            obj.classList.add("active");
        }
    }
    createContentItem(container, className = "", up = 0) {
        let editor = this.editor;
        container = this.add(container, "qubot-item " + className);
        return container.onclick = function(e) {
            editor.stateEditor.actions.onclickAction(this, e, up);
        }, container;
    }
    createContentFrame(container, className, actionID, parentIDs, controlType = !0, params = []) {
        let editor = this.editor;
        container = this.add(container, "qubot-item " + className), container.onmousedown = function() {
            editor.stateEditor.actions.onclickAction(this, !1);
        }, this.setContentParams(container, params), this.editor.readonlyBot(!1) || (this.add(container, "drag qudata-svg-drag qudata-svg").onmousedown = function(e) {
            1 == e.buttons && editor.mousedownDragMenuActions(e, actionID, !1, parentIDs);
        }), this.add(container, "qubot-items-content"), className = this.add(container, "controls");
        return "thin" == controlType && !this.editor.readonlyBot(!1) || (this.add(className, "copy qudata-svg-copy qudata-svg").onclick = function() {
            editor.stateEditor.actions.copyAction(parentIDs);
        }), this.editor.readonlyBot(!1) || (this.add(className, "remove qudata-svg-remove qudata-svg").onclick = function() {
            editor.stateEditor.actions.removeAction(parentIDs);
        }), container;
    }
    addContentItemContainer(container, iconClass = "", inner = !1) {
        inner = inner ? container : this.add(container, "qubot-items-content");
        return iconClass && this.add(this.add(inner, "notice"), "icon qudata-svg " + iconClass), 
        inner;
    }
    addContentInnerControls(controls, iconClass = "", parentIDs = [], readonly = !1, types = [ "copy" ]) {
        let editor = this.editor, control = null;
        !iconClass || readonly && this.editor.readonlyBot(!1) || (control = this.add(controls, "qubot-set-btn " + iconClass));
        for (let i = 0; i < types.length; i++) switch (types[i]) {
          case "copy":
            this.add(controls, "copy qudata-svg-copy qudata-svg").onclick = function() {
                editor.stateEditor.actions.copyAction(parentIDs);
            };
            break;

          case "remove":
            this.add(controls, "remove qudata-svg-remove qudata-svg").onclick = function() {
                editor.stateEditor.actions.removeAction(parentIDs);
            };
        }
        return control;
    }
    addContentItemText(container, iconClass = "", params = {}, inner = !1) {
        container = this.addContentItemContainer(container, iconClass, inner), iconClass = this.add(container, "", "input");
        return this.setContentParams(iconClass, params), this.editor.readonlyBot(!1) && (iconClass.setAttribute("readonly", ""), 
        iconClass.setAttribute("disabled", "")), iconClass;
    }
    addContentItemTextField(container, iconClass = "", params = {}, inner = !1) {
        container = this.addContentItemContainer(container, iconClass, inner), iconClass = this.add(container, "", "textarea");
        return this.setContentParams(iconClass, params), this.editor.readonlyBot() && (iconClass.setAttribute("readonly", ""), 
        iconClass.setAttribute("disabled", "")), iconClass;
    }
    addContentItemNumber(container, iconClass = "", params = {}, inner = !1) {
        container = this.addContentItemContainer(container, iconClass, inner), iconClass = this.add(container, "", "input");
        return iconClass.type = "number", this.setContentParams(iconClass, params), 
        this.editor.readonlyBot(!1) && (iconClass.setAttribute("readonly", ""), 
        iconClass.setAttribute("disabled", "")), iconClass;
    }
    addContentItemSelect(container, iconClass, items, values = [], params = {}, icons = []) {
        var container = this.addContentItemContainer(container, iconClass), select = this.add(container, "", "select");
        for (let i = 0; i < items.length; i++) {
            var item = this.add(select, "", "option");
            item.value = (values.length > i && values[i] ? values : items)[i], icons.length < i && icons[i] && this.add(item, "qudata-svg " + icons[i], "div"), 
            item.innerHTML += items[i];
        }
        return this.setContentParams(select, params), this.editor.readonlyBot(!1) && (select.setAttribute("readonly", ""), 
        select.setAttribute("disabled", "")), select;
    }
    addContentItemCode(container, iconClass = "", params = {}, inner = !1) {
        container = this.addContentItemContainer(container, iconClass, inner), iconClass = this.add(container, "", "input");
        return iconClass.setAttribute("lang", "qb"), iconClass.setAttribute("spellcheck", "false"), 
        this.setContentParams(iconClass, params), this.editor.readonlyBot(!1) && (iconClass.setAttribute("readonly", ""), 
        iconClass.setAttribute("disabled", "")), iconClass;
    }
    addContentItemCodeField(container, iconClass = "", params = {}, inner = !1) {
        container = this.addContentItemContainer(container, iconClass, inner), iconClass = this.add(container, "", "code-input");
        return iconClass.setAttribute("lang", "qb"), iconClass.setAttribute("spellcheck", "false"), 
        this.setContentParams(iconClass, params), this.editor.readonlyBot(!1) && (iconClass.setAttribute("readonly", !0), 
        iconClass.setAttribute("disabled", !0)), iconClass;
    }
    setContentParams(elem, params) {
        for (var item in params) switch (item) {
          case "value":
            elem.value = params[item];
            break;

          case "hint":
            this.addHint(elem, params[item]);
            break;

          default:
            elem.setAttribute(item, params[item]);
        }
    }
    addInterfaceFrame(container, actionName, actionID, menu = 0, disabled, intent) {
        container = this.add(container, "action");
        0 < actionName.length && container.classList.add("qubot-" + actionName.replace(/[\s+, {}()%.-]/g, ""));
        let editor = this.editor;
        return null != actionID && (container.id = "qubot-action-" + actionID), 
        actionName.length && ((actionID = this.add(container, "name")).innerHTML = (actionName = "state" === actionName ? "step" : actionName) + ":", 
        actionID.onclick = function() {
            editor.stateEditor.actions.onclickAction(this);
        }, "default" !== actionName && "else" !== actionName && 0 !== actionName.indexOf("typing") && 0 !== actionName.indexOf("background") && 0 !== actionName.indexOf("height") && 0 !== actionName.indexOf("time") || (container.style.flexDirection = "column", 
        actionID.style.width = "200px")), container;
    }
    addInterfaceFrameNoAction(container, actionName, actionID, menu = 0, disabled, intent) {
        0 < actionName.length && container.classList.add("qubot-" + actionName.replace(/[\s+, {}()%.-]/g, ""));
        let editor = this.editor;
        return null != actionID && (container.id = "qubot-action-" + actionID), 
        actionName.length && ((actionID = this.add(container, "name", "span")).innerHTML = (actionName = "state" === actionName ? "step" : actionName) + ":", 
        actionID.onclick = function() {
            editor.stateEditor.actions.onclickAction(this);
        }, "default" !== actionName && "else" !== actionName && 0 !== actionName.indexOf("typing") && 0 !== actionName.indexOf("background") && 0 !== actionName.indexOf("height") && 0 !== actionName.indexOf("time") || (container.style.flexDirection = "column", 
        actionID.style.width = "200px")), container;
    }
    addInterfaceFrameCheck(container, caption, id = 0, className = "qudata-checkbox") {
        var id = "qubot-check-" + id, name = this.add(container, "name", "label"), name = (name.setAttribute("for", id), 
        name.innerHTML = caption, this.add(container, className || "checkbox", "input"));
        return name.type = "checkbox", name.id = id, this.add(container, className || "", "label").setAttribute("for", id), 
        this.editor.readonlyBot(!1) && name.setAttribute("disabled", ""), name;
    }
    addInterfaceFrameColor(container, caption, id = 0, className = "qubot-color") {
        var id = "qubot-color-" + id, name = this.add(container, "name", "label"), name = (name.setAttribute("for", id), 
        name.innerHTML = caption, this.add(container, "", "input"));
        name.type = "color", name.id = id;
        let label = this.add(container, className, "label");
        return label.setAttribute("for", id), name.oninput = function() {
            label.style.backgroundColor = this.value;
        }, name.onchange = function() {
            label.style.backgroundColor = this.value;
        }, this.editor.readonlyBot(!1) && name.setAttribute("disabled", ""), name;
    }
    addInterfaceFrameNumber(container, caption, id = 0, className) {
        var id = "qubot-number-" + id, name = this.add(container, "name", "label"), name = (name.setAttribute("for", id), 
        name.innerHTML = caption, this.add(container, "", "input"));
        return name.type = "number", name.id = id, this.editor.readonlyBot(!1) && name.setAttribute("disabled", ""), 
        name;
    }
    addInterfaceFrameText(container, caption, id = 0, className) {
        var id = "qubot-text-" + id, name = this.add(container, "name", "label"), name = (name.setAttribute("for", id), 
        name.innerHTML = caption, this.add(container, "", "input"));
        return name.type = "text", name.id = id, this.editor.readonlyBot(!1) && name.setAttribute("disabled", ""), 
        name;
    }
    addInterfaceFrameTextarea(container, caption, id = 0, className) {
        var id = "qubot-text-" + id, name = this.add(container, "name", "label"), name = (name.setAttribute("for", id), 
        name.innerHTML = caption, this.add(container, "", "textarea"));
        return name.id = id, this.editor.readonlyBot(!1) && name.setAttribute("disabled", ""), 
        name;
    }
    addInterfaceFrameSelect(container, caption, values, id = 0, className = null, titles = null, icons = null, def = null) {
        var id = "qubot-select-" + id, name = (caption && ((name = this.add(container, "name", "label")).setAttribute("for", id), 
        name.innerHTML = caption), this.add(container, "qubot-select" + className || "")), caption = (name.id = id, 
        name.onclick = function(e) {
            var id = this.id, id = document.querySelector(`.qubot-select-items[for='${id}']`);
            if (id) if (id.classList.contains("show")) {
                let chevron = this.querySelector(".qubot-svg-ch-down");
                chevron && chevron.classList.remove("qubot-svg-ch-up");
            } else {
                document.dispatchEvent(new Event("click")), e.stopPropagation();
                var e = document.documentElement.scrollTop, erect = this.getBoundingClientRect(), wHeight = (id.style.minWidth = erect.width + "px", 
                id.style.left = erect.left + "px", id.style.top = erect.bottom + 2 + e + "px", 
                id.classList.add("show"), document.documentElement.clientWidth, 
                document.documentElement.clientHeight), irect = id.getBoundingClientRect();
                erect.bottom + 2 + irect.height > wHeight && 0 < erect.top - 2 - irect.height && (id.style.top = erect.top - 2 - irect.height + e + "px", 
                wHeight = this.querySelector(".qubot-svg-ch-down")) && wHeight.classList.add("qubot-svg-ch-up");
            }
        }, this.add(name, "qubot-select-value")), val_icon = this.add(caption, "qubot-icon"), val = this.add(caption, "qubot-text", "input"), items = (val.setAttribute("readonly", ""), 
        this.add(caption, "qubot-icon qubot-svg-ch-down"), document.querySelectorAll(`.qubot-select-items[for='${id}']`).forEach(x => x.parentNode.removeChild(x)), 
        this.add(document.body, "qubot-select-items"));
        items.setAttribute("for", id);
        for (let i = 0; i < values.length; i++) {
            var item = this.add(items, "qubot-select-item"), icon = (item.setAttribute("value", values[i]), 
            this.add(item, "qubot-icon")), text = (icon.innerHTML = "", icons && icons.length > i && icons[i] && (0 == icons[i].indexOf("qubot-svg-") ? (icon.classList.add(icons[i]), 
            icon.parentNode.setAttribute("className", icons[i])) : (icon.innerHTML = icons[i], 
            icon.classList.add("qubot-svg-unicode"), icon.parentNode.setAttribute("className", "unicode"))), 
            this.add(item, "qubot-text"));
            text.innerHTML = (titles && titles.length > i && titles[i] ? titles : values)[i], 
            values[i] == def && (val.value = text.innerHTML, val.setAttribute("data", values[i]), 
            val_icon.innerHTML = icon.innerHTML, icons) && icons.length > i && (0 == icons[i].indexOf("qubot-svg-") ? val_icon.classList.add(icons[i]) : val_icon.classList.add("qubot-svg-unicode")), 
            item.onclick = function() {
                this.parentNode.classList.remove("show");
                var className = this.getAttribute("className"), text = this.querySelector(".qubot-text"), icon = this.querySelector(".qubot-icon"), for_id = this.parentNode.getAttribute("for"), for_id = document.querySelector("#" + for_id), chevron = for_id.querySelector(".qubot-svg-ch-up"), chevron = (chevron && chevron.classList.remove("qubot-svg-ch-up"), 
                for_id.querySelector("input.qubot-text")), value = this.getAttribute("value"), text = (chevron && (chevron.value = text.innerHTML, 
                chevron.setAttribute("data", value), chevron.onchange()), for_id.querySelector(".qubot-select-value .qubot-icon:first-child"));
                text.classList = "qubot-icon " + ("unicode" == className ? "qubot-svg-" + className : className), 
                text.innerHTML = "unicode" == className ? icon.innerHTML : "";
            };
        }
        return this.editor.readonlyBot(!1) && (val.setAttribute("disabled", ""), 
        name.classList.add("disabled")), document.removeEventListener("click", this.closeSelects), 
        document.addEventListener("click", this.closeSelects), val;
    }
    closeSelects(event) {
        document.querySelectorAll(".qubot-select-items.show").forEach(elem => {
            elem.classList.remove("show");
            elem = elem.getAttribute("for"), elem = document.querySelector("#" + elem).querySelector(".qubot-svg-ch-down");
            elem && elem.classList.remove("qubot-svg-ch-up");
        });
    }
}

class QuBotEditor extends QuBotEditorLib {
    constructor(env) {
        super(env), this.stateEditor = new QuBotEditorState(this), this.listEditors = new QuBotEditorLists(this), 
        this.listEditor = this.listEditors.select("grid"), this.resizer = null, 
        this.myBots = new QuBotEditorMyBots(this), this.templates = new QuBotEditorTemplates(), 
        this.examples = new QuBotEditorExamples(), this.help = new QuBotEditorHelp(this), 
        this.locale = new QuBotEditorLocale(this), this.bot = {}, this.helpBot = null, 
        this.copy = null, this.dontSave = !1, this.rootDiv = null;
    }
    async create(params) {
        return this.dontSave = !0, this.rootDiv = params.rootDiv, this.qb = params.botLib, 
        this.pageDiv = document.getElementById("qubot-page-editor"), this.stateEditor.create(), 
        qubotCodeInput.registerTemplate("syntax-highlighted", qubotCodeInput.templates.prism(Prism)), 
        this.help.load().then(() => params.loadBots ? this.myBots.loadBots().then(() => (this.createGUI(), 
        0 === this.myBots.bots.length && this.myBots.newBot("My first bot", !1), 
        null === this.myBots.botNumber && (this.myBots.botNumber = 0), this.myBots.load(this.myBots.bots[this.myBots.botNumber].id))).then(() => {
            this.qb.upgradeBotFormat(this.myBots.bot), this.setBot(this.myBots.bot), 
            this.bot.state = this.bot.start, this.myBots.createMyBotsMenu(), this.dontSave = !0, 
            this.listEditors.create(), this.stateEditor.caption.value = this.bot.state, 
            this.stateEditor.items.set(this.bot.states[this.bot.state]), this.stateEditor.set(this.bot.states[this.bot.state]), 
            this.setCurStateEditor(this.bot.start), this.dontSave = !1;
        }) : (this.createGUI(), this.env.load({
            param: "qubotToken"
        }))).then(data => {
            data && this.env.setClientToken(data.token);
        }).then(() => (this.createDragSplitter(), this.createCollapseButton(), this.onResizeEvent())).catch(error => {
            throw this.editor.critical("create editor error", error), new Error("create editor error");
        });
    }
    createGUI() {
        let editor = this;
        document.getElementById("qubot-editor").onclick = function() {
            editor.stateEditor.onclickEditor(this);
        };
        var header = document.getElementById("qubot-editor-header"), run = (this.createMenu(this.add(header, "qubot-editor-menu")), 
        this.add(header, "qubot-editor-run")), label = (run.onclick = function() {
            editor.runBot();
        }, run.id = "qubot-editor-run", this.add(run, "qubot-icon-run"), this.add(run, null)), label = (label.id = "qubot-run-bot-button", 
        label.innerHTML = this.editor.locale.get("RUN BOT"), this.add(run, "qubot-editor-run-tuto")), run = (label.id = "qubot-editor-run-tuto", 
        label.innerHTML = `<h3>1.</h3><div>${this.editor.locale.get("tuto1")}</div>`, 
        this.add(document.getElementById("qubot-page-editor"), "qubot-run-tuto"));
        run.id = "qubot-run-tuto", run.innerHTML = `<h3>2.</h3><div>${this.editor.locale.get("tuto2")}</div>`, 
        this.botName = this.add(header, "qubot-editor-name");
    }
    async init() {
        this.stateEditor.init();
    }
    async show() {
        var editorView;
        this.editor.bot && (document.getElementById("qubot-page-editor").style.display = "flex", 
        editorView = localStorage.getItem("qubotEdView"), this.showView(editorView || this.editor.bot.view), 
        this.help.isStartInfo && !this.wasStartInfo && (this.help.startInfo("StartMessage"), 
        this.wasStartInfo = !0), this.listEditor.createZoom(), this.onResizeEvent(), 
        this.qb.showButton());
    }
    async hide() {
        this.qb.hide(), document.getElementById("qubot-page-editor").style.display = "none";
    }
    async selectBot({
        type,
        botID
    }) {
        return this.editor.env.loadBot({
            botID: botID
        }).then(bot => {
            if (bot) return "MyBots" == type ? this.myBots.setBot(bot, 0) : (this.myBots.botNumber = null, 
            this.myBots.bot = null), this.loadBot(bot), this.bot;
            throw new Error("load template bot with id ", botID, " error");
        }).catch(error => {
            this.critical("selectMyBot error: ", error);
        });
    }
    async updateBot({
        botID
    }) {
        return this.selectBot({
            type: "MyBots",
            botID: botID,
            access: "write"
        });
    }
    async onResizeEvent(event) {
        let bord = 0;
        "wp" == this.editor.env.type && (bord = 20, wp_content = document.getElementById("wpbody-content")) && (wp_content.style.height = "calc(100vh - 32px)");
        var wp_content = document.getElementById("qubot-states-list"), offset = wp_content.getBoundingClientRect();
        let width, height, left, top;
        top = this.rootDiv ? (width = this.rootDiv.offsetWidth, height = this.rootDiv.offsetHeight - bord, 
        left = -offset.left + this.rootDiv.offsetLeft - 20, -offset.top + this.rootDiv.offsetTop) : (width = 825 < window.innerWidth ? window.innerWidth : 900, 
        height = window.innerHeight - bord, left = -offset.left - 25, -offset.top - 20), 
        wp_content.style.width = width + left + "px";
        offset = document.getElementById("qubot-editor-body");
        if (offset) {
            let h = offset.getBoundingClientRect().height;
            offset = document.getElementById("qubot-states-list-header");
            offset && (h -= offset.getBoundingClientRect().height), wp_content.style.height = Math.floor(h - 3) + "px";
        }
        this.botName.innerHTML = "";
        offset = this.botName.getBoundingClientRect();
        if (0 < offset.width) {
            let width = offset.width;
            this.botName.innerHTML = this.bot.name, (offset = this.botName.getBoundingClientRect()).width > width && (wp_content = width / (offset.width / this.bot.name.length), 
            this.botName.innerHTML = this.bot.name.substring(0, wp_content - 3) + "...");
        }
    }
    async onBeforeUnloadEvent() {
        this.qb.onBeforeUnloadEvent();
    }
    save() {
        this.myBots.bot && !this.dontSave && this.myBots.save();
    }
    clear() {
        this.stateEditor.clear(), this.listEditor.clear();
    }
    addBotEvent(bid, name) {
        this.env.sendBotManager({
            request: "bot_add_plugin",
            bid: bid,
            name: name
        });
    }
    renameBotEvent(bid, name) {
        this.env.sendBotManager({
            request: "bots_update",
            bots: [ {
                id: bid,
                name: name
            } ]
        });
    }
    isTemplateBot() {
        return null === this.myBots.bot;
    }
    setBot(bot) {
        this.cleaningBot(bot), this.bot.id = bot.id, this.bot.version = bot.version, 
        this.bot.start = bot.start, this.bot.state = bot.start, this.bot.states = bot.states, 
        this.bot.slots = bot.slots, this.bot.cards = bot.cards, this.bot.view = bot.view, 
        this.bot.name = bot.name, this.qb.setBotConfig(this.bot, {
            analytics: !this.isTemplateBot()
        });
    }
    loadBot(bot) {
        this.dontSave = !0, this.clear(), this.init(), this.qb.upgradeBotFormat(bot), 
        this.setBot(bot), this.listEditors.create(), this.listEditor.show(), this.stateEditor.updateCard = !1, 
        this.stateEditor.init(), this.setCurStateEditor(this.bot.start), this.stateEditor.updateCard = !0, 
        this.botName.innerHTML = "";
        var width, rect = this.botName.getBoundingClientRect();
        0 < rect.width && (width = rect.width, this.botName.innerHTML = bot.name, 
        (rect = this.botName.getBoundingClientRect()).width > width) && (width = width / (rect.width / bot.name.length), 
        this.botName.innerHTML = bot.name.substring(0, width - 3) + "..."), this.dontSave = !1;
    }
    createCollapseButton() {
        var element = document.getElementById("qubot-collapse-button");
        let arrowIcon = this.add(element), statePanel = (arrowIcon.id = "cta", arrowIcon.style.transform = "rotateZ(180deg)", 
        document.getElementById("qubot-state-editor"));
        element.onclick = () => {
            "flex" === statePanel.style.display || "" === statePanel.style.display ? (statePanel.style.display = "none", 
            arrowIcon.style.transform = "rotateZ(0)", this.onResizeEvent()) : "none" === statePanel.style.display && (statePanel.style.display = "flex", 
            arrowIcon.style.transform = "rotateZ(180deg)", this.onResizeEvent());
        };
    }
    createDragSplitter() {
        let element = document.getElementById("qubot-editor-splitter"), direction = "H", md, first = document.getElementById("qubot-state-editor"), second = document.getElementById("qubot-states-list");
        if (element && first && second) {
            let editor = this;
            function onMouseMove(e) {
                e = {
                    x: e.clientX - md.e.clientX - 10,
                    y: e.clientY - md.e.clientY
                };
                "H" === direction && (e.x = Math.min(Math.max(e.x, -md.firstWidth), md.secondWidth), 
                element.style.left = md.offsetLeft + e.x + "px", first.style.width = md.firstWidth + e.x + "px", 
                second.style.width = md.secondWidth - e.x + "px"), editor.onResizeEvent();
            }
            element.onmousedown = function(e) {
                md = {
                    e: e,
                    offsetLeft: element.offsetLeft,
                    offsetTop: element.offsetTop,
                    firstWidth: first.offsetWidth,
                    secondWidth: second.offsetWidth
                }, document.onmousemove = onMouseMove, element.onmouseover = onMouseMove, 
                document.onmouseup = () => {
                    document.onmousemove = document.onmouseup = null, element.onmouseover = null;
                };
            };
        }
    }
    async runBot() {
        var tuto = document.getElementById("qubot-editor-run-tuto"), tuto1 = document.getElementById("qubot-run-tuto");
        tuto.style.display = tuto1.style.display = "none", this.qb.initActions(this.help.isOffline ? "local" : "remote"), 
        this.qb.setBotConfig(this.bot, {
            analytics: !this.isTemplateBot()
        }), this.qb.clear(), this.qb.debugCreate(), this.qb.debugClear(), this.qb.open();
        let lang = "en";
        this.help.isRunCurLang && (lang = this.stateEditor.LANGUAGE, this.bot.slots.LANGUAGE = lang, 
        this.qb.setLang(lang)), this.help.isRunFromActive ? this.qb.showState(this.bot.state, lang) : this.qb.start(!0, lang), 
        this.wasRun = !0;
    }
    readonlyBot(alert = !0) {
        return null === this.editor.myBots.botNumber && (this.editor.dontSave || this.qb.editPermission || alert && this.editor.help.alert("YouCannotEdit"), 
        !0);
    }
    runHelpBot() {
        this.help.isOffline ? (this.helpBot || (this.helpBot = this.templates.bots["system-help"]), 
        this.helpBot ? (this.qb.setHelpBot(this.helpBot, {
            analytics: !1
        }), this.qb.setStyle({
            "text-bot-name": this.locale.get("system-help")
        }), this.qb.clear(), this.qb.start(!1, this.locale.LANGUAGE), this.qb.open()) : console.log("Help assistant error")) : (this.qb.setHelpBot("com.my.help_assistant", {
            analytics: !1
        }), this.qb.clear(), this.qb.start(!1, this.locale.LANGUAGE), this.qb.open());
    }
    setCurStateEditor(state) {
        this.listEditor.setCurState(state), this.stateEditor.set(this.bot.states[state]);
    }
    resetEditorAndCard() {
        this.stateEditor.set(this.bot.states[this.bot.state], !0);
        var card = document.getElementById("qubot-state-" + this.bot.state);
        this.listEditor.openCardState(this.bot.state, card), this.listEditor.showArrows(this.bot.state);
    }
    resetEditorAndAllCards() {
        this.stateEditor.set(this.bot.states[this.bot.state]);
        var state, curState = this.bot.state;
        for (state in this.bot.states) {
            this.bot.state = state;
            var card = document.getElementById("qubot-state-" + state);
            card ? this.listEditor.openCardState(state, card) : this.error("!!!> qubotEditor:resetEditorAndAllCards: card = null for state", state);
        }
        this.bot.state = curState, this.listEditor.showArrows(this.bot.state);
    }
    createMenu(menu) {
        let editor = this, a, cont, sub, wrap;
        menu.classList.add("qubot-disable-select"), sub = this.add(menu, "submenu"), 
        wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), this.add(wrap, "qubot-icon-wrap qubot-menu-icon", "div"), 
        this.add(wrap, "submenu-btn").innerHTML = this.locale.get("MyBots"), this.menuMyBots = this.add(sub, "submenu-content"), 
        this.myBots.createMyBotsMenu(), sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-edit-bot-icon", "div"), this.add(wrap, "submenu-btn").innerHTML = this.locale.get("EditBot"), 
        cont = this.add(sub, "submenu-content"), (a = this.add(cont, "item devider")).innerHTML = this.locale.get("New"), 
        a.onclick = function() {
            editor.myBots.newBot();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Clone"), a.onclick = function() {
            editor.myBots.cloneBot();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Rename"), a.onclick = function() {
            editor.myBots.renameBot();
        }, (a = this.add(cont, "item devider")).innerHTML = this.locale.get("Delete"), 
        a.onclick = function() {
            editor.myBots.deleteBot();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Export"), a.onclick = function() {
            editor.exportToJSON();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Import"), a.onclick = function() {
            editor.import();
        }, sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-edit-step-icon", "div");
        this.add(wrap, "submenu-btn").innerHTML = this.locale.get("EditStep"), cont = this.add(sub, "submenu-content"), 
        a = this.add(cont, "item devider iconed"), this.add(a, "", "span").innerHTML = this.locale.get("Add"), 
        a.innerHTML += '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather align-middle me-2 svg"><polyline points="9 18 15 12 9 6"></polyline></svg>';
        var popup = this.add(a, "popup-content submenu-content");
        let p = this.add(popup, "item");
        p.innerHTML = this.locale.get("Step"), p.onclick = function() {
            editor.listEditor.onclickBtnAddCard();
        }, (p = this.add(popup, "item")).innerHTML = this.locale.get("Folder"), 
        p.onclick = function() {
            editor.listEditor.createCardFolder();
        }, (p = this.add(popup, "item")).innerHTML = this.locale.get("YesNoStep"), 
        p.onclick = function() {
            editor.listEditor.onAddCard(null, !0, "yesno");
        }, (p = this.add(popup, "item")).innerHTML = this.locale.get("ChangeLangStep"), 
        p.onclick = function() {
            editor.listEditor.onAddCard(null, !0, "lang");
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Copy"), a.onclick = function() {
            editor.listEditor.copyStep();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("CopyFolder"), 
        a.onclick = function() {
            editor.listEditor.copyCardFolder();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Paste"), a.onclick = function() {
            editor.listEditor.pasteStep();
        }, (a = this.add(cont, "item devider")).innerHTML = this.locale.get("PasteFolder"), 
        a.onclick = function() {
            editor.listEditor.pasteCardFolder();
        }, (a = this.add(cont, "item devider")).innerHTML = this.locale.get("RenameFolder"), 
        a.onclick = function() {
            editor.listEditor.renameCardFolder();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Delete"), a.onclick = function() {
            editor.listEditor.onclickBtnDelCard();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("DeleteFolder"), 
        a.onclick = function() {
            editor.listEditor.onclickBtnDelCardFolder();
        }, sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-template-icon", "div"), this.add(wrap, "submenu-btn").innerHTML = this.locale.get("Templates"), 
        this.menuTemplates = cont = this.add(sub, "submenu-content");
        for (let bot in this.templates.bots) "Help" !== this.templates.bots[bot].name && ((a = this.add(cont, "item")).innerHTML = this.templates.bots[bot].name, 
        a.onclick = function() {
            editor.onclickMenuTemplate(bot);
        });
        sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-example-icon", "div"), this.add(wrap, "submenu-btn").innerHTML = this.locale.get("Examples"), 
        this.menuExamples = cont = this.add(sub, "submenu-content");
        for (let bot in this.examples.bots) (a = this.add(cont, "item")).innerHTML = this.examples.bots[bot].name, 
        a.onclick = function() {
            editor.onclickMenuExamples(bot);
        };
        sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-options-icon", "div");
        this.add(wrap, "submenu-btn").innerHTML = this.locale.get("Options"), cont = this.add(sub, "submenu-content"), 
        a = this.add(cont, "item devider iconed"), this.add(a, "", "span").innerHTML = this.locale.get("View"), 
        a.innerHTML += '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather align-middle me-2 svg"><polyline points="9 18 15 12 9 6"></polyline></svg>';
        var popup = this.add(a, "popup-content submenu-content"), on = (this.menuView = [], 
        this.help.isGrid ? "round" : "");
        p = this.add(popup, "item"), this.add(p, "svg " + on), this.add(p, "", "span").innerHTML = this.locale.get("Grid"), 
        p.onclick = function() {
            editor.onclickMenuView("grid");
        }, this.menuView.push(p), on = this.help.isGrid ? "" : "round", p = this.add(popup, "item"), 
        this.add(p, "svg " + on), this.add(p, "", "span").innerHTML = this.locale.get("Free"), 
        p.onclick = function() {
            editor.onclickMenuView("free");
        }, this.menuView.push(p), on = this.help.isStartInfo ? "on" : "", a = this.add(cont, "item iconed"), 
        this.add(a, "", "span").innerHTML = this.locale.get("StartInfo"), a.innerHTML += "<label class='check " + on + "' id='qb-menu-option-start'></label>", 
        a.onclick = function() {
            editor.onclickMenuOptions("start");
        }, on = this.help.isHint ? "on" : "", a = this.add(cont, "item iconed"), 
        this.add(a, "", "span").innerHTML = this.locale.get("Hints"), a.innerHTML += "<label class='check " + on + "' id='qb-menu-option-hints'></label>", 
        a.onclick = function() {
            editor.onclickMenuOptions("hint");
        }, on = this.help.fastMode ? "on" : "", a = this.add(cont, "item devider iconed"), 
        this.add(a, "", "span").innerHTML = this.locale.get("FastMode"), a.innerHTML += "<label class='check " + on + "' id='qb-menu-option-fast'></label>", 
        a.onclick = function() {
            editor.onclickMenuOptions("fast");
        }, on = this.help.isRunFromActive ? "on" : "", a = this.add(cont, "item iconed"), 
        this.add(a, "", "span").innerHTML = this.locale.get("ActiveStep"), a.innerHTML += "<label class='check " + on + "' id='qb-menu-option-step'></label>", 
        a.onclick = function() {
            editor.onclickMenuOptions("active");
        }, on = this.help.isRunCurLang ? "on" : "", a = this.add(cont, "item iconed devider"), 
        this.add(a, "", "span").innerHTML = this.locale.get("ActiveLang"), a.innerHTML += "<label class='check " + on + "' id='qb-menu-option-lang'></label>", 
        a.onclick = function() {
            editor.onclickMenuOptions("lang");
        }, "wp" != editor.env.type ? (on = this.help.isOffline ? "" : "on", popup = this.add(cont, "item iconed"), 
        this.add(popup, "", "span").innerHTML = this.locale.get("ServerMode"), popup.innerHTML += "<label class='check " + on + "' id='qb-menu-option-mode'></label>", 
        popup.onclick = function() {
            editor.onclickMenuOptions("offline");
        }) : this.help.isOffline = !0, sub = this.add(menu, "submenu"), wrap = this.add(sub, "qubot-menu-icon-wrap", "div"), 
        this.add(wrap, "qubot-icon-wrap qubot-help-icon", "div"), this.add(wrap, "submenu-btn").innerHTML = this.locale.get("Help"), 
        this.menuOptions = cont = this.add(sub, "submenu-content"), (a = this.add(cont, "item")).innerHTML = this.locale.get("VAssistant"), 
        a.onclick = function() {
            editor.runHelpBot();
        }, (a = this.add(cont, "item")).innerHTML = this.locale.get("Documentation"), 
        a.onclick = function() {
            window.open(editor.locale.get("Documentation_link"), "_blank");
        };
    }
    onclickMenuView(view) {
        this.showView(view);
    }
    showView(view) {
        var title = document.getElementById("qubot-list_state-title");
        "grid" === view ? (this.help.isGrid = !0, localStorage.setItem("qubotEdView", "grid"), 
        title.innerHTML = this.editor.locale.get("List of states:")) : "free" === view && (this.help.isGrid = !1, 
        this.editor.bot.view = "free", localStorage.setItem("qubotEdView", "free"), 
        title.innerHTML = this.editor.locale.get("Board of states:")), (this.help.isGrid ? (this.menuView[1].getElementsByClassName("svg")[0].classList.remove("round"), 
        this.menuView[0]) : (this.menuView[0].getElementsByClassName("svg")[0].classList.remove("round"), 
        this.menuView[1])).getElementsByClassName("svg")[0].classList.add("round"), 
        this.help.save(), this.listEditor = this.listEditors.select(view), this.listEditor.init(), 
        this.listEditor.show(), this.addVersion();
    }
    addVersion() {
        let elem = document.getElementById("qubot-states-list"), div = document.getElementById("qubot-version");
        div || ((div = div || this.add(elem, "left")).id = "qubot-version", div.innerHTML = "Version: " + window.editorConfig.version, 
        elem.addEventListener("scroll", function() {
            div.classList.add("hide");
        }), elem.addEventListener("scrollend", function() {
            div.style.bottom = -elem.scrollTop + "px", div.style.left = elem.scrollLeft + "px", 
            div.classList.remove("hide");
        }));
    }
    onclickMenuTemplate(botNumber) {
        this.save(), this.myBots.botNumber = null, this.myBots.bot = null, this.loadBot(this.templates.bots[botNumber]);
        var bot, tagsA = this.menuTemplates.getElementsByClassName("item");
        let i = 0;
        for (bot in this.templates.bots) {
            if (i >= tagsA.length) break;
            tagsA[i].classList.remove("checked"), botNumber === bot && tagsA[i].classList.add("checked"), 
            i++;
        }
        var lst = this.menuMyBots.getElementsByClassName("item");
        Array.from(lst).forEach(a => {
            a.classList.remove("checked");
        }), lst = this.menuExamples.getElementsByClassName("item"), Array.from(lst).forEach(a => {
            a.classList.remove("checked");
        });
    }
    onclickMenuExamples(botNumber) {
        this.save(), this.myBots.botNumber = null, this.myBots.bot = null, this.loadBot(this.examples.bots[botNumber]);
        var bot, tagsA = this.menuExamples.getElementsByClassName("item");
        let i = 0;
        for (bot in this.examples.bots) tagsA[i].classList.remove("checked"), botNumber === bot && tagsA[i].classList.add("checked"), 
        i++;
        var lst = this.menuMyBots.getElementsByClassName("item");
        Array.from(lst).forEach(a => {
            a.classList.remove("checked");
        }), lst = this.menuTemplates.getElementsByClassName("item"), Array.from(lst).forEach(a => {
            a.classList.remove("checked");
        });
    }
    onclickMenuOptions(item) {
        this.menuOptions.getElementsByClassName("item");
        if ("start" === item) {
            var elem = document.querySelector("#qb-menu-option-start");
            this.help.isStartInfo = !this.help.isStartInfo, this.help.isStartInfo ? elem.classList.add("on") : elem.classList.remove("on");
        } else if ("hint" === item) {
            let elem = document.querySelector("#qb-menu-option-hints");
            this.help.isHint = !this.help.isHint, this.help.isHint ? elem.classList.add("on") : elem.classList.remove("on");
        } else if ("active" === item) {
            let elem = document.querySelector("#qb-menu-option-step");
            this.help.isRunFromActive = !this.help.isRunFromActive, this.help.isRunFromActive ? elem.classList.add("on") : elem.classList.remove("on");
        } else if ("offline" === item) {
            let elem = document.querySelector("#qb-menu-option-mode");
            this.help.isOffline = !this.help.isOffline, this.help.isOffline ? elem.classList.remove("on") : elem.classList.add("on"), 
            this.qb.initActions(this.help.isOffline ? "local" : "remote");
        } else if ("lang" === item) {
            let elem = document.querySelector("#qb-menu-option-lang");
            this.help.isRunCurLang = !this.help.isRunCurLang, this.help.isRunCurLang ? elem.classList.add("on") : elem.classList.remove("on");
        } else if ("fast" === item) {
            let elem = document.querySelector("#qb-menu-option-fast");
            this.help.fastMode = !this.help.fastMode, this.help.fastMode ? (elem.classList.add("on"), 
            document.body.style.setProperty("--anim-duration-slow", ".05s")) : (elem.classList.remove("on"), 
            document.body.style.setProperty("--anim-duration-slow", ".2s"));
        }
        this.help.save();
    }
    newStateName() {
        let cnt = Object.keys(this.bot.states).length + 1;
        for (;"STEP_" + cnt in this.bot.states; ) cnt++;
        return "STEP_" + cnt;
    }
    renameState(oldState, newState, bot = null, refresh = !0) {
        for (var s in bot = bot || this.bot, oldState === bot.start && (bot.start = newState, 
        this.myBots.bot) && (this.myBots.bot.start = newState), bot.states) this.stateEditor.items.getStates(bot.states[s]).forEach(ss => {
            ss.state === oldState && ("state" in ss.action ? ss.action.state = newState : "goto" in ss.action ? ss.action.goto = newState : "run" in ss.action && (ss.action.run = newState));
        });
        var old_items = bot.states[oldState];
        delete bot.states[oldState], newState && (bot.states[newState] = old_items, 
        this.listEditor.renameState(oldState, newState), this.listEditor.setCurState(newState)), 
        refresh && (this.resetEditorAndCard(), this.myBots.save());
    }
    error(...theArgs) {
        console.log(theArgs);
    }
    critical(msg, error) {
        console.log(msg + ":" + error.message + " stack: " + error.stack);
    }
    copyBot() {
        this.help.alert("BotCopy"), this.copy = JSON.stringify(this.bot);
    }
    pasteBot() {
        if (this.copy) if (this.myBots.bot) {
            var state, bot = JSON.parse(this.copy);
            for (state in this.bot.states) if (state in bot.states) {
                let cnt = 1;
                for (;state + cnt in this.bot.states; ) cnt++;
                this.renameState(state, state + cnt, bot, !1);
            }
            for (let state in bot.states) this.myBots.bot.states[state] = bot.states[state];
            this.save(), this.resetEditorAndAllCards();
        } else this.help.alert("BotPasteCannot2"); else this.help.alert("BotPasteCannot1");
    }
    cleaningBot(bot) {
        var state, slot, slots = {};
        for (state in bot.states) {
            var input, items = bot.states[state];
            let inputID = -1;
            for (let i = 0; i < items.length; i++) {
                var item = items[i];
                if ("actions" in item) this.cleaningBotActions(item.actions); else if ("buttons" === item.type && "items" in item) for (let j = 0; j < item.items.length; j++) for (let j2 = 0; j2 < item.items[j].items.length; j2++) this.cleaningBotActions(item.items[j].items[j2].actions); else "comment" === item.type && (item.type, 
                item.comment) && (item.note = item.comment, delete item.comment);
                "input" === item.type && i + 1 < items.length && (inputID = i);
            }
            0 <= inputID && (input = items[inputID], items.splice(inputID, 1), items.push(input)), 
            this.stateEditor.items.getSlots(bot.states[state], slots);
        }
        for (slot in bot.slots) slot in slots || "LANGUAGE" === slot || "INPUT" === slot || delete bot.slots[slot];
    }
    cleaningBotActions(actions) {
        if (actions) for (let i = 0; i < actions.length; i++) {
            var action = actions[i];
            action ? "true" in action ? delete action.true : "false" in action ? delete action.false : 0 === Object.keys(action).length || "state" in action && !action.state || "goto" in action && !action.goto || "run" in action && !action.run ? actions.splice(i, 1) : "comment" in action ? "note" in action || (action.note = action.comment, 
            delete action.comment) : "actions" in action && this.cleaningBotActions(action.actions) : actions.splice(i, 1);
        }
    }
    exportToYAML() {
        let res = "bid:     " + this.bot.id + "\n";
        for (var state in res = (res = (res += "version: " + this.bot.version + "\n") + ("view: " + this.bot.view + "\n")) + ("start: " + this.bot.start + "\n\n") + "states:\n", 
        this.bot.states) res = (res += "    " + state + ":\n") + this.stateEditor.items.exportYAML(this.bot.states[state], "    ");
        for (var slot in res += "\nslots:\n", this.bot.slots) res = (res += "    " + slot + ":\n") + "        value: " + this.bot.slots[slot] + "\n";
        res = (res = (res += "\ncards:\n") + "    states: " + JSON.stringify(this.bot.cards.states) + "\n") + "    folders: " + JSON.stringify(this.bot.cards.folders) + "\n";
        var blob = new Blob([ res ], {
            type: "text/plain"
        }), blob = window.URL.createObjectURL(blob), anchor = document.createElement("a");
        anchor.href = blob, anchor.download = this.botName.innerHTML + ".yml", anchor.click(), 
        window.URL.revokeObjectURL(blob), anchor.remove();
    }
    itemsToYAML(items) {
        let res = "";
        for (var k in items) "type" !== k && (res += `${k}: ${items[k]}, `);
        res += "}\n";
    }
    exportToJSON() {
        var slot, res = "{", res = (res = (res = (res += '"start":"' + this.bot.start + '",') + ('"version":"' + this.bot.version + '",')) + ('"view":"' + this.bot.view + '",')) + ('"states":' + JSON.stringify(this.bot.states) + ",");
        for (slot in this.bot.slots) this.bot.slots[slot] = "";
        this.bot.slots.LANGUAGE = "en", res = (res += '"slots":' + JSON.stringify(this.bot.slots) + ",") + '"cards":' + JSON.stringify(this.bot.cards) + "}";
        var res = new Blob([ res ], {
            type: "Application/json"
        }), res = window.URL.createObjectURL(res), anchor = document.createElement("a");
        anchor.href = res, anchor.download = this.bot.name + ".json", anchor.click(), 
        window.URL.revokeObjectURL(res), anchor.remove(), this.save();
    }
    async import() {
        this.myBots.bot ? await this.help.loadFile("ImportBot", "Import bot", "Import bot", ".txt, .json") && (this.help.inputFileName.endsWith(".zip") ? await this.importNLPModel() : await this.importFromJSON()) : this.help.alert("NoActiveBot");
    }
    async importFromJSON() {
        try {
            var bot = this.checkConfig(JSON.parse(this.help.inputFileContent)), id = this.myBots.bot.id, name = this.myBots.bot.name;
            this.myBots.bot = bot, this.myBots.bot.id = id, this.myBots.bot.name = name, 
            this.loadBot(bot), this.save();
        } catch (e) {
            alert("I was unable to import the bot. Format error."), console.log("importFromJSON", e);
        }
    }
    async importNLPModel() {
        try {
            var url = await this.editor.env.saveFile({
                botID: this.bot.id,
                fileName: "nlp.zip",
                arrayBuffer: this.help.inputFileContent
            });
            this.myBots.bot.nlp = url, this.save();
        } catch (e) {
            alert("I was unable to import the nlp model. Format error.");
        }
    }
    toMultiLang() {
        for (var state in this.bot.states) this.bot.states[state].forEach(item => {
            "text" === item.type && "string" == typeof item.text ? item.text = {
                en: item.text
            } : "buttons" === item.type && item.items.forEach(row => {
                row.items.forEach(btn => {
                    "button" === btn.type && "string" == typeof btn.button && (btn.button = {
                        en: btn.button
                    });
                });
            });
        });
    }
    checkConfig(data) {
        var states = {};
        if (data.states) for (var key in data.states) {
            states[key] = [];
            for (let j = 0; j < data.states[key].length; j++) {
                let item = data.states[key][j];
                switch (item.type) {
                  case "row":
                    var items = [ {
                        items: data.states[key][j].items
                    } ];
                    for (let i = j + 1; j < data.states[key].length && "row" == data.states[key][i].type; i++) items.push({
                        items: data.states[key][i].items
                    }), j++;
                    item = {
                        type: "buttons",
                        items: items
                    };
                    break;

                  case "images":
                    for (let i = 0; i < item.items.length; i++) item.items[i].image && (item.items[i].url = item.items[i].image, 
                    delete item.items[i].image);
                }
                states[key].push(item);
            }
        }
        return data.states = states, data;
    }
}

var qubotCodeInput = {
    usedTemplates: {},
    defaultTemplate: void 0,
    CodeInput: class extends HTMLElement {
        constructor() {
            super();
        }
        update(text) {
            this.value != text && (this.value = text), this.querySelector("textarea").value != text && (this.querySelector("textarea").value = text);
            var result_element = this.querySelector("pre code");
            "\n" == text[text.length - 1] && (text += " "), result_element.innerHTML = this.escape_html(text), 
            this.template.includeCodeInputInHighlightFunc ? this.template.highlight(result_element, this) : this.template.highlight(result_element);
        }
        sync_scroll() {
            var input_element = this.querySelector("textarea"), result_element = this.template.preElementStyled ? this.querySelector("pre") : this.querySelector("pre code");
            result_element.scrollTop = input_element.scrollTop, result_element.scrollLeft = input_element.scrollLeft;
        }
        codeHeight() {
            return (this.template.preElementStyled ? this.querySelector("pre") : this.querySelector("pre code")).scrollHeight;
        }
        check_tab(event) {
            if (this.template.isCode) {
                var input_element = this.querySelector("textarea"), code = input_element.value;
                if ("Tab" == event.key) {
                    if (event.preventDefault(), input_element.selectionStart == input_element.selectionEnd) {
                        var before_selection = code.slice(0, input_element.selectionStart), code = code.slice(input_element.selectionEnd, input_element.value.length), cursor_pos = input_element.selectionEnd + 1;
                        input_element.value = before_selection + "\t" + code, input_element.selectionStart = cursor_pos, 
                        input_element.selectionEnd = cursor_pos;
                    } else {
                        var lines = input_element.value.split("\n");
                        let letter_i = 0;
                        before_selection = input_element.selectionStart, code = input_element.selectionEnd;
                        let number_indents = 0, first_line_indents = 0;
                        for (let i = 0; i < lines.length; i++) letter_i += lines[i].length, 
                        input_element.selectionStart < letter_i && input_element.selectionEnd > letter_i - lines[i].length && (event.shiftKey ? "\t" == lines[i][0] && (lines[i] = lines[i].slice(1), 
                        0 == number_indents && first_line_indents--, number_indents--) : (lines[i] = "\t" + lines[i], 
                        0 == number_indents && first_line_indents++, number_indents++));
                        input_element.value = lines.join("\n"), input_element.selectionStart = before_selection + first_line_indents, 
                        input_element.selectionEnd = code + number_indents;
                    }
                    this.update(input_element.value);
                }
            }
        }
        escape_html(text) {
            return text.replace(new RegExp("&", "g"), "&amp;").replace(new RegExp("<", "g"), "&lt;");
        }
        connectedCallback() {
            this.template = qubotCodeInput.usedTemplates[this.getAttribute("template") || qubotCodeInput.defaultTemplate], 
            this.template.preElementStyled && this.classList.add("code-input_pre-element-styled");
            var lang = this.getAttribute("lang"), placeholder = this.getAttribute("placeholder") || this.getAttribute("lang") || "", value = this.value || this.innerHTML || "", textarea = (this.innerHTML = "", 
            document.createElement("textarea")), placeholder = (textarea.placeholder = placeholder, 
            textarea.value = value, textarea.setAttribute("spellcheck", "false"), 
            this.getAttribute("name") && (textarea.setAttribute("name", this.getAttribute("name")), 
            this.removeAttribute("name")), textarea.setAttribute("oninput", "this.parentElement.update(this.value); this.parentElement.sync_scroll();"), 
            textarea.setAttribute("onscroll", "this.parentElement.sync_scroll();"), 
            textarea.setAttribute("onkeydown", "this.parentElement.check_tab(event);"), 
            this.append(textarea), document.createElement("code")), textarea = (this.template.isCode && null != lang && placeholder.classList.add("language-" + lang), 
            placeholder.innerText = value, document.createElement("pre"));
            textarea.setAttribute("aria-hidden", "true"), textarea.append(placeholder), 
            this.append(textarea), this.update(value, this);
        }
        static get observedAttributes() {
            return [ "value", "placeholder", "lang", "template", "disabled", "readonly" ];
        }
        attributeChangedCallback(name, oldValue, newValue) {
            switch (name) {
              case "value":
                this.update(newValue);
                break;

              case "placeholder":
                this.querySelector("textarea").placeholder = newValue;
                break;

              case "disabled":
                this.querySelector("textarea").disabled = newValue;
                break;

              case "readonly":
                this.querySelector("textarea").readonly = newValue;
                break;

              case "template":
                this.template = qubotCodeInput.usedTemplates[newValue || qubotCodeInput.defaultTemplate], 
                this.template.preElementStyled ? this.classList.add("code-input_pre-element-styled") : this.classList.remove("code-input_pre-element-styled"), 
                this.update(this.value);

              case "lang":
                var textarea, code = this.querySelector("pre code");
                code && (textarea = this.querySelector("textarea"), code.className = null != newValue ? "language-" + newValue : "", 
                textarea.placeholder == oldValue && (textarea.placeholder = newValue), 
                this.update(this.value));

              default:
                this.update(this.value);
            }
        }
        get value() {
            return this.getAttribute("value");
        }
        set value(val) {
            return this.setAttribute("value", val);
        }
        get placeholder() {
            return this.getAttribute("placeholder");
        }
        set placeholder(val) {
            return this.setAttribute("placeholder", val);
        }
    },
    registerTemplate: function(template_name, template) {
        qubotCodeInput.usedTemplates[template_name] = template, qubotCodeInput.defaultTemplate = template_name;
    },
    templates: {
        custom(highlight = function() {}, preElementStyled = !0, isCode = !0, includeCodeInputInHighlightFunc = !1) {
            return {
                highlight: highlight,
                includeCodeInputInHighlightFunc: includeCodeInputInHighlightFunc,
                preElementStyled: preElementStyled,
                isCode: isCode
            };
        },
        prism(prism) {
            return {
                includeCodeInputInHighlightFunc: !1,
                highlight: prism.highlightElement,
                preElementStyled: !0,
                isCode: !0
            };
        },
        hljs(hljs) {
            return {
                includeCodeInputInHighlightFunc: !1,
                highlight: hljs.highlightElement,
                preElementStyled: !1,
                isCode: !0
            };
        },
        characterLimit() {
            return {
                highlight: function(result_element, code_input) {
                    var character_limit = Number(code_input.getAttribute("data-character-limit")), normal_characters = code_input.escape_html(code_input.value.slice(0, character_limit)), character_limit = code_input.escape_html(code_input.value.slice(character_limit));
                    result_element.innerHTML = normal_characters + `<mark class="overflow">${character_limit}</mark>`, 
                    0 < character_limit.length && (result_element.innerHTML += ` <mark class="overflow-msg">${code_input.getAttribute("data-overflow-msg") || "(Character limit reached)"}</mark>`);
                },
                includeCodeInputInHighlightFunc: !0,
                preElementStyled: !0,
                isCode: !1
            };
        },
        rainbowText(rainbow_colors = [ "red", "orangered", "orange", "goldenrod", "gold", "green", "darkgreen", "navy", "blue", "magenta" ], delimiter = "") {
            return {
                highlight: function(result_element, code_input) {
                    var html_result = [], sections = code_input.value.split(code_input.template.delimiter);
                    for (let i = 0; i < sections.length; i++) html_result.push(`<span style="color: ${code_input.template.rainbow_colors[i % code_input.template.rainbow_colors.length]}">${code_input.escape_html(sections[i])}</span>`);
                    result_element.innerHTML = html_result.join(code_input.template.delimiter);
                },
                includeCodeInputInHighlightFunc: !0,
                preElementStyled: !0,
                isCode: !1,
                rainbow_colors: rainbow_colors,
                delimiter: delimiter
            };
        }
    }
}, _self = (customElements.define("code-input", qubotCodeInput.CodeInput), "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}), Prism = function(_self) {
    var readyState, lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, uniqueId = 0, plainTextGrammar = {}, _ = {
        manual: _self.Prism && _self.Prism.manual,
        disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
        util: {
            encode: function encode(tokens) {
                return tokens instanceof Token ? new Token(tokens.type, encode(tokens.content), tokens.alias) : Array.isArray(tokens) ? tokens.map(encode) : tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
            },
            type: function(o) {
                return Object.prototype.toString.call(o).slice(8, -1);
            },
            objId: function(obj) {
                return obj.__id || Object.defineProperty(obj, "__id", {
                    value: ++uniqueId
                }), obj.__id;
            },
            clone: function deepClone(o, visited) {
                var clone, id;
                switch (visited = visited || {}, _.util.type(o)) {
                  case "Object":
                    if (id = _.util.objId(o), visited[id]) return visited[id];
                    for (var key in clone = {}, visited[id] = clone, o) o.hasOwnProperty(key) && (clone[key] = deepClone(o[key], visited));
                    return clone;

                  case "Array":
                    return (id = _.util.objId(o), visited[id]) ? visited[id] : (clone = [], 
                    visited[id] = clone, o.forEach(function(v, i) {
                        clone[i] = deepClone(v, visited);
                    }), clone);

                  default:
                    return o;
                }
            },
            getLanguage: function(element) {
                for (;element; ) {
                    var m = lang.exec(element.className);
                    if (m) return m[1].toLowerCase();
                    element = element.parentElement;
                }
                return "none";
            },
            setLanguage: function(element, language) {
                element.className = element.className.replace(RegExp(lang, "gi"), ""), 
                element.classList.add("language-" + language);
            },
            currentScript: function() {
                if ("undefined" == typeof document) return null;
                if ("currentScript" in document) return document.currentScript;
                try {
                    throw new Error();
                } catch (err) {
                    var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
                    if (src) {
                        var i, scripts = document.getElementsByTagName("script");
                        for (i in scripts) if (scripts[i].src == src) return scripts[i];
                    }
                    return null;
                }
            },
            isActive: function(element, className, defaultActivation) {
                for (var no = "no-" + className; element; ) {
                    var classList = element.classList;
                    if (classList.contains(className)) return !0;
                    if (classList.contains(no)) return !1;
                    element = element.parentElement;
                }
                return !!defaultActivation;
            }
        },
        languages: {
            plain: plainTextGrammar,
            plaintext: plainTextGrammar,
            text: plainTextGrammar,
            txt: plainTextGrammar,
            extend: function(id, redef) {
                var key, lang = _.util.clone(_.languages[id]);
                for (key in redef) lang[key] = redef[key];
                return lang;
            },
            insertBefore: function(inside, before, insert, root) {
                var token, grammar = (root = root || _.languages)[inside], ret = {};
                for (token in grammar) if (grammar.hasOwnProperty(token)) {
                    if (token == before) for (var newToken in insert) insert.hasOwnProperty(newToken) && (ret[newToken] = insert[newToken]);
                    insert.hasOwnProperty(token) || (ret[token] = grammar[token]);
                }
                var old = root[inside];
                return root[inside] = ret, _.languages.DFS(_.languages, function(key, value) {
                    value === old && key != inside && (this[key] = ret);
                }), ret;
            },
            DFS: function DFS(o, callback, type, visited) {
                visited = visited || {};
                var i, property, propertyType, objId = _.util.objId;
                for (i in o) o.hasOwnProperty(i) && (callback.call(o, i, o[i], type || i), 
                property = o[i], "Object" !== (propertyType = _.util.type(property)) || visited[objId(property)] ? "Array" !== propertyType || visited[objId(property)] || (visited[objId(property)] = !0, 
                DFS(property, callback, i, visited)) : (visited[objId(property)] = !0, 
                DFS(property, callback, null, visited)));
            }
        },
        plugins: {},
        highlightAll: function(async, callback) {
            _.highlightAllUnder(document, async, callback);
        },
        highlightAllUnder: function(container, async, callback) {
            var env = {
                callback: callback,
                container: container,
                selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
            };
            _.hooks.run("before-highlightall", env), env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector)), 
            _.hooks.run("before-all-elements-highlight", env);
            for (var element, i = 0; element = env.elements[i++]; ) _.highlightElement(element, !0 === async, env.callback);
        },
        highlightElement: function(element, async, callback) {
            var language = _.util.getLanguage(element), grammar = _.languages[language], parent = (_.util.setLanguage(element, language), 
            element.parentElement);
            parent && "pre" === parent.nodeName.toLowerCase() && _.util.setLanguage(parent, language);
            var env = {
                element: element,
                language: language,
                grammar: grammar,
                code: element.textContent
            };
            function insertHighlightedCode(highlightedCode) {
                env.highlightedCode = highlightedCode, _.hooks.run("before-insert", env), 
                env.element.innerHTML = env.highlightedCode, _.hooks.run("after-highlight", env), 
                _.hooks.run("complete", env), callback && callback.call(env.element);
            }
            _.hooks.run("before-sanity-check", env), (parent = env.element.parentElement) && "pre" === parent.nodeName.toLowerCase() && !parent.hasAttribute("tabindex") && parent.setAttribute("tabindex", "0"), 
            env.code ? (_.hooks.run("before-highlight", env), env.grammar ? async && _self.Worker ? ((language = new Worker(_.filename)).onmessage = function(evt) {
                insertHighlightedCode(evt.data);
            }, language.postMessage(JSON.stringify({
                language: env.language,
                code: env.code,
                immediateClose: !0
            }))) : insertHighlightedCode(_.highlight(env.code, env.grammar, env.language)) : insertHighlightedCode(_.util.encode(env.code))) : (_.hooks.run("complete", env), 
            callback && callback.call(env.element));
        },
        highlight: function(text, grammar, language) {
            text = {
                code: text,
                grammar: grammar,
                language: language
            };
            return _.hooks.run("before-tokenize", text), text.tokens = _.tokenize(text.code, text.grammar), 
            _.hooks.run("after-tokenize", text), Token.stringify(_.util.encode(text.tokens), text.language);
        },
        tokenize: function(text, grammar) {
            var rest = grammar.rest;
            if (rest) {
                for (var token in rest) grammar[token] = rest[token];
                delete grammar.rest;
            }
            for (var tokenList = new LinkedList(), list = (addAfter(tokenList, tokenList.head, text), 
            !function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
                for (var token in grammar) if (grammar.hasOwnProperty(token) && grammar[token]) {
                    var patterns = grammar[token];
                    patterns = Array.isArray(patterns) ? patterns : [ patterns ];
                    for (var j = 0; j < patterns.length; ++j) {
                        if (rematch && rematch.cause == token + "," + j) return;
                        for (var flags, patternObj = patterns[j], inside = patternObj.inside, lookbehind = !!patternObj.lookbehind, greedy = !!patternObj.greedy, alias = patternObj.alias, pattern = (greedy && !patternObj.pattern.global && (flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0], 
                        patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g")), 
                        patternObj.pattern || patternObj), currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail && !(rematch && pos >= rematch.reach); pos += currentNode.value.length, 
                        currentNode = currentNode.next) {
                            var str = currentNode.value;
                            if (tokenList.length > text.length) return;
                            if (!(str instanceof Token)) {
                                var match, removeCount = 1;
                                if (greedy) {
                                    if (!(match = matchPattern(pattern, pos, text, lookbehind)) || match.index >= text.length) break;
                                    var from = match.index, to = match.index + match[0].length, p = pos;
                                    for (p += currentNode.value.length; p <= from; ) currentNode = currentNode.next, 
                                    p += currentNode.value.length;
                                    if (p -= currentNode.value.length, pos = p, 
                                    currentNode.value instanceof Token) continue;
                                    for (var k = currentNode; k !== tokenList.tail && (p < to || "string" == typeof k.value); k = k.next) removeCount++, 
                                    p += k.value.length;
                                    removeCount--, str = text.slice(pos, p), match.index -= pos;
                                } else if (!(match = matchPattern(pattern, 0, str, lookbehind))) continue;
                                var from = match.index, matchStr = match[0], before = str.slice(0, from), after = str.slice(from + matchStr.length), str = pos + str.length, removeFrom = (rematch && str > rematch.reach && (rematch.reach = str), 
                                currentNode.prev), before = (before && (removeFrom = addAfter(tokenList, removeFrom, before), 
                                pos += before.length), removeRange(tokenList, removeFrom, removeCount), 
                                new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr));
                                currentNode = addAfter(tokenList, removeFrom, before), 
                                after && addAfter(tokenList, currentNode, after), 
                                1 < removeCount && (matchStr = {
                                    cause: token + "," + j,
                                    reach: str
                                }, matchGrammar(text, tokenList, grammar, currentNode.prev, pos, matchStr), 
                                rematch) && matchStr.reach > rematch.reach && (rematch.reach = matchStr.reach);
                            }
                        }
                    }
                }
            }(text, tokenList, grammar, tokenList.head, 0), tokenList), array = [], node = list.head.next; node !== list.tail; ) array.push(node.value), 
            node = node.next;
            return array;
        },
        hooks: {
            all: {},
            add: function(name, callback) {
                var hooks = _.hooks.all;
                hooks[name] = hooks[name] || [], hooks[name].push(callback);
            },
            run: function(name, env) {
                var callbacks = _.hooks.all[name];
                if (callbacks && callbacks.length) for (var callback, i = 0; callback = callbacks[i++]; ) callback(env);
            }
        },
        Token: Token
    };
    function Token(type, content, alias, matchedStr) {
        this.type = type, this.content = content, this.alias = alias, this.length = 0 | (matchedStr || "").length;
    }
    function matchPattern(pattern, pos, text, lookbehind) {
        pattern.lastIndex = pos;
        pos = pattern.exec(text);
        return pos && lookbehind && pos[1] && (pattern = pos[1].length, pos.index += pattern, 
        pos[0] = pos[0].slice(pattern)), pos;
    }
    function LinkedList() {
        var head = {
            value: null,
            prev: null,
            next: null
        }, tail = {
            value: null,
            prev: head,
            next: null
        };
        head.next = tail, this.head = head, this.tail = tail, this.length = 0;
    }
    function addAfter(list, node, value) {
        var next = node.next, value = {
            value: value,
            prev: node,
            next: next
        };
        return node.next = value, next.prev = value, list.length++, value;
    }
    function removeRange(list, node, count) {
        for (var next = node.next, i = 0; i < count && next !== list.tail; i++) next = next.next;
        (node.next = next).prev = node, list.length -= i;
    }
    return _self.Prism = _, Token.stringify = function stringify(o, language) {
        if ("string" == typeof o) return o;
        var s;
        if (Array.isArray(o)) return s = "", o.forEach(function(e) {
            s += stringify(e, language);
        }), s;
        var name, env = {
            type: o.type,
            content: stringify(o.content, language),
            tag: "span",
            classes: [ "token", o.type ],
            attributes: {},
            language: language
        }, o = o.alias, attributes = (o && (Array.isArray(o) ? Array.prototype.push.apply(env.classes, o) : env.classes.push(o)), 
        _.hooks.run("wrap", env), "");
        for (name in env.attributes) attributes += " " + name + '="' + (env.attributes[name] || "").replace(/"/g, "&quot;") + '"';
        return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
    }, _self.document ? ((plainTextGrammar = _.util.currentScript()) && (_.filename = plainTextGrammar.src, 
    plainTextGrammar.hasAttribute("data-manual")) && (_.manual = !0), _.manual || ("loading" === (readyState = document.readyState) || "interactive" === readyState && plainTextGrammar && plainTextGrammar.defer ? document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback) : window.requestAnimationFrame ? window.requestAnimationFrame(highlightAutomaticallyCallback) : window.setTimeout(highlightAutomaticallyCallback, 16))) : _self.addEventListener && !_.disableWorkerMessageHandler && _self.addEventListener("message", function(evt) {
        var evt = JSON.parse(evt.data), lang = evt.language, code = evt.code, evt = evt.immediateClose;
        _self.postMessage(_.highlight(code, _.languages[lang], lang)), evt && _self.close();
    }, !1), _;
    function highlightAutomaticallyCallback() {
        _.manual || _.highlightAll();
    }
}(_self);

"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism), 
Prism.languages.markup = {
    comment: {
        pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
        greedy: !0
    },
    prolog: {
        pattern: /<\?[\s\S]+?\?>/,
        greedy: !0
    },
    doctype: {
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: !0,
        inside: {
            "internal-subset": {
                pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
                lookbehind: !0,
                greedy: !0,
                inside: null
            },
            string: {
                pattern: /"[^"]*"|'[^']*'/,
                greedy: !0
            },
            punctuation: /^<!|>$|[[\]]/,
            "doctype-tag": /^DOCTYPE/i,
            name: /[^\s<>'"]+/
        }
    },
    cdata: {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        greedy: !0
    },
    tag: {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
        greedy: !0,
        inside: {
            tag: {
                pattern: /^<\/?[^\s>\/]+/,
                inside: {
                    punctuation: /^<\/?/,
                    namespace: /^[^\s>\/:]+:/
                }
            },
            "special-attr": [],
            "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
                inside: {
                    punctuation: [ {
                        pattern: /^=/,
                        alias: "attr-equals"
                    }, /"|'/ ]
                }
            },
            punctuation: /\/?>/,
            "attr-name": {
                pattern: /[^\s>\/]+/,
                inside: {
                    namespace: /^[^\s>\/:]+:/
                }
            }
        }
    },
    entity: [ {
        pattern: /&[\da-z]{1,8};/i,
        alias: "named-entity"
    }, /&#x?[\da-f]{1,8};/i ]
}, Prism.languages.markup.tag.inside["attr-value"].inside.entity = Prism.languages.markup.entity, 
Prism.languages.markup.doctype.inside["internal-subset"].inside = Prism.languages.markup, 
Prism.hooks.add("wrap", function(env) {
    "entity" === env.type && (env.attributes.title = env.content.replace(/&amp;/, "&"));
}), Object.defineProperty(Prism.languages.markup.tag, "addInlined", {
    value: function(tagName, lang) {
        var includedCdataInside = {}, includedCdataInside = (includedCdataInside["language-" + lang] = {
            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
            lookbehind: !0,
            inside: Prism.languages[lang]
        }, includedCdataInside.cdata = /^<!\[CDATA\[|\]\]>$/i, {
            "included-cdata": {
                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                inside: includedCdataInside
            }
        }), lang = (includedCdataInside["language-" + lang] = {
            pattern: /[\s\S]+/,
            inside: Prism.languages[lang]
        }, {});
        lang[tagName] = {
            pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
                return tagName;
            }), "i"),
            lookbehind: !0,
            greedy: !0,
            inside: includedCdataInside
        }, Prism.languages.insertBefore("markup", "cdata", lang);
    }
}), Object.defineProperty(Prism.languages.markup.tag, "addAttribute", {
    value: function(attrName, lang) {
        Prism.languages.markup.tag.inside["special-attr"].push({
            pattern: RegExp(/(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"),
            lookbehind: !0,
            inside: {
                "attr-name": /^[^\s=]+/,
                "attr-value": {
                    pattern: /=[\s\S]+/,
                    inside: {
                        value: {
                            pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                            lookbehind: !0,
                            alias: [ lang, "language-" + lang ],
                            inside: Prism.languages[lang]
                        },
                        punctuation: [ {
                            pattern: /^=/,
                            alias: "attr-equals"
                        }, /"|'/ ]
                    }
                }
            }
        });
    }
}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, 
Prism.languages.svg = Prism.languages.markup, Prism.languages.xml = Prism.languages.extend("markup", {}), 
Prism.languages.ssml = Prism.languages.xml, Prism.languages.atom = Prism.languages.xml, 
Prism.languages.rss = Prism.languages.xml, Prism.languages.clike = {
    comment: [ {
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: !0,
        greedy: !0
    }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: !0,
        greedy: !0
    } ],
    string: {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: !0
    },
    "class-name": {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: !0,
        inside: {
            punctuation: /[.\\]/
        }
    },
    keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
    boolean: /\b(?:false|true)\b/,
    function: /\b\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    punctuation: /[{}[\];(),.:]/
}, Prism.languages.qubot = {
    comment: [ {
        pattern: /(^|[^\\])#.*/,
        lookbehind: !0,
        greedy: !0
    }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: !0,
        greedy: !0
    } ],
    "string-interpolation": {
        pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
        greedy: !0,
        inside: {
            interpolation: {
                pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
                lookbehind: !0,
                inside: {
                    "format-spec": {
                        pattern: /(:)[^:(){}]+(?=\}$)/,
                        lookbehind: !0
                    },
                    "conversion-option": {
                        pattern: /![sra](?=[:}]$)/,
                        alias: "punctuation"
                    },
                    rest: null
                }
            },
            string: /[\s\S]+/
        }
    },
    "triple-quoted-string": {
        pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
        greedy: !0,
        alias: "string"
    },
    string: {
        pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
        greedy: !0
    },
    function: {
        pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
        lookbehind: !0
    },
    "class-name": {
        pattern: /(\bclass\s+)\w+/i,
        lookbehind: !0
    },
    decorator: {
        pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
        lookbehind: !0,
        alias: [ "annotation", "punctuation" ],
        inside: {
            punctuation: /\./
        }
    },
    keyword: /\b(?:_(?=\s*:)|if|else|while|for|in|continue|switch|case|default|local|and|not|or)\b/,
    builtin: /\b(?:button|buttons|text|images|image|set_check|get_check|set_radio|get_radio|print|floor|trunc|ceil|rounf|randint|random|date)\b/,
    boolean: /\b(?:false|true|null)\b/,
    number: /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
    operator: /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
    punctuation: /[{};(),.:]/,
    punctuation2: /[\[\]]/,
    variable: /\${1}(?:\w+\b)/
}, Prism.languages.qubot["string-interpolation"].inside.interpolation.inside.rest = Prism.languages.qubot, 
Prism.languages.qb = Prism.languages.qubot;